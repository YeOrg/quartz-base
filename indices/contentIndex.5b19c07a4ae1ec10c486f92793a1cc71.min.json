{"/":{"title":"Knowledge","content":"**My aim in life is joy, inspiration, health and wellness and harmony. Everything I do is driven by these thoughts. - The light in hands. (我的人生目标是快乐、灵感、健康与和谐。我所做的一切都是由这些去驱动的。)**\n\n# Entrance 1\n\n[[about_me|About Me]] （关于我）\n\n[[picture|Picture]] （我的愿景）\n\n# Entrance 2\n\n### 2024-02-21 - Houdini USD Test\n\n[【效果】Houdini USD 流程\\_哔哩哔哩\\_bilibili](https://www.bilibili.com/video/BV1vy421z7T1)\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/picx-images-hosting@master/e/image.4jnvja8zav.webp\" alt=\"image\" width=600/\u003e\n\n使用USD流程测试从模型资产到最终渲染的流程。\n### 2024-01-17 - AYON\n\n[[cg_pipeline#AYON|CGPipeline - AYON]]\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/1705577962584.webp\" alt=\"1705577962584\" width=600/\u003e\n\nAYON开源pipeline工具,目前已经release了版本v1.0.0，openpype现以是core模块。\n\n### 2024-01-10 - CGRU Render farm\n\n[[cg_pipeline#CGRU|CGRU 配置]]\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.67fqkqbzo39c.webp\" alt=\"image\" width=600/\u003e\n\n一个开源的渲染农场，配置相当简单。测试提交了Houdini的Arnold渲染任务。也很不错。\n### 2023-12-17 - Stable Diffusion Krita\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.2ofyf0a2p8m0.webp\" alt=\"image\" width=600/\u003e\n\nSD绘画，这是一个Krita的开源插件(https://github.com/Acly/krita-ai-diffusion)，背后使用comfyUI作为后端，主要通过ControlNet控制画面生成。\n\n### 2023-12-10 - Procedural Generation\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.5me22rn6qnk0.webp\" alt=\"image\" width=\"600\" height=\"600\" /\u003e\n\n程序化生成，路面工具，Painting工具，建筑工具等等。\n### 2023-10-29 - Openpype OpenSource Pipeline\n\n[[cg_pipeline|OpenPype Pipeline]]\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.5psn8dc994c0.webp\" alt=\"image\" width=\"600\" height=\"600\" /\u003e\n\n开源的Pipeline工具搭建，可以本地部署，支持非常多的DCC软件。再结合cgwire项目管理，可以很好的规范项目制作。\n\n### 2023-9-10 - Discover (E1)\n\n[Site Unreachable](https://github.com/semi-desert/Ye)\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/1702139850359.webp\" alt=\"1702139850359\" width=600/\u003e\n\n写的一个渲染小工具，带有python绑定，简单的point-vertex-edge-primitive表示，简单的节点系统，支持光栅和光追。暂时还没有公开~\n\n### 2023-08-31 - assimp Update Triangulate Process\n\n[Update Triangulate Process by aaronmack · Pull Request 5205 · assimp/assimp · GitHub](https://github.com/assimp/assimp/pull/5205)\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.3fe0ua575qa0.png\" alt=\"image\" width=\"600\" height=\"600\" /\u003e\n\n第一个往开源仓库贡献的PR，是在为自己写的一个小玩意中的多边形模型\n三角化时，参考了assimp，发现了有额外一种情况并没有考虑到。遂补足了这个情况。\n\n### 2023-06-18 Openmoonray\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.68gnu7ugpls0.webp\" alt=\"image\" width=600/\u003e\n\n那个时候openmoonray已经开源蛮久了，由于自己就一个windows系统，也没有再去装一个Linux系统，就使用了WSL2去构建它，看了一下源代码，不得不说，跑起来的时候，测试了各个搭配的工具，感觉作为一款商业渲染器，真的牛~\n\n### 2023-05-16 - Finder\n\n[Finder](https://server1.xyzzyxwz.top:12030/)\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.2j60okmcdkw0.webp\" alt=\"image\" width=600/\u003e\n\n开发的另一个网页程序，使用的是nicegui，最当初本来是想测试Python写前端UI，后来突发奇想要不做一个可视化三维旋转，矩阵变化的工具，因为是Python，刚好还可以使用USD的python绑定一起搭配使用，最后证明，确实好用，可以帮助理解这些概念~\n\n### 2023-04-18 - Discover\n\n[Discover](https://xyzzyxwz.top:5173/)\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.22vrii818gtc.webp\" alt=\"image\" width=600/\u003e\n\n开发的一个完整WS结构的小网页程序，拥有一个简单的Token登录系统，可以在线看电影(后台通过将mp4视频转成m3u8格式的流媒体传输)，还可以听歌，看电子书，听音乐等等，前端页面是vue的UI框架，后端是python的django，数据库用mysql，还用了一台小的vps作为反向代理服务器。\n\n### 2022-12-09 - USD\n\n[GitHub - PixarAnimationStudios/OpenUSD: Universal Scene Description](https://github.com/PixarAnimationStudios/OpenUSD)\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.33jdn09oetz4.webp\" alt=\"image\" width=600/\u003e\n\n从2018年最当初做特效时，就接触到了USD，当时尝试去构建它，第一次看到usdview在自己的计算机上跑起来，觉得真的是一个很神奇的东西~ 现在也是，只是不同的是，现在构建USD越来越顺手了~\n\n### 2022-05-09 - W3C Leaning HTML\n\n[W3.CSS Template](https://aaronli.w3spaces.com/)\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.4xajvc8o9940.png\" alt=\"image\" width=\"600\" height=\"600\" /\u003e\n\n在W3C上入门学习了HTML/CSS/JS这些网页端基本的知识。\n\n### 2022-03-20 - Course Basics Computer Graphics\n\n[【图形】 阿龙教你学图形-第一部分\\_哔哩哔哩\\_bilibili](https://www.bilibili.com/video/BV1NR4y1c78Z/)\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.5h5w59in5uk0.webp\" alt=\"image\" \nwidth=\"600\" height=\"600\" /\u003e\n自己录制的第一套公开的课程，是一个入门级的小课程，里面讲了一些非常基础的关于渲染的知识。\n\n### 2021-12-29 - Figma Design\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/aaronmack.github.io@master/assets/img/life/Figma-design.png\" alt=\"image\" width=\"600\" height=\"600\" /\u003e\n\n我是小小设计师。还记得当时初次接触设计，尽浑然不知疲惫，连续不停的看完了教程。后面设计了图标，软件界面。\n\n### 2021-10-11 - Geometry Intersection Detection\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.6l3kddi3to80.webp\" alt=\"image\" width=\"600\" height=\"600\"/\u003e\n\n用于检测模型穿插，主要是写VEX来处理逻辑，然后通过Houdini Engine在Maya中使用。红色的点代表两个或多个模型之间穿插了，可以用于检测类似在K角色动画时，一组模型之间是否穿插（像穿在角色身上的衣服，内层的衣服是否穿出了外层的衣服）。当时的自己还是很激动的。\n\n### 2021-08-06 - Bezier Curve And B Spline\n\n[[b_spline|B Spline]] [[bezier_curve|Bezier Curve]]\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.1e1plkqf0gu8.webp\" alt=\"image\" width=\"600\" height=\"600\" /\u003e\n\n在做一个参数面板时，需要用到与Houdini中一致的Ramp参数，其中包括了贝塞尔曲线与B样条线。不得不佩服数学的奇妙。\n\n### 2021-01-15 - UE Material Niagara System\n\n[GitHub - aaronmack/demo-learning-project](https://github.com/aaronmack/demo-learning-project)\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.26c4h2s44u68.webp\" alt=\"image\" width=\"600\" height=\"600\"/\u003e\n\n学了虚幻引擎Niagara粒子系统，做了一些非常小的粒子效果。最早当初是使用的UE的级联粒子系统，刚开始学习时还有点不太适应。后面才渐渐感受到新系统的好用之处。还学习跟着做了一些虚幻的材质。不得不说，虚幻的材质编辑器真的好用。\n\n### 2021-01-10 - Unreal Indie Film - Discovery\n\n[GitHub - aaronmack/demo-unreal-indie](https://github.com/aaronmack/demo-unreal-indie)\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/demo-unreal-indie@master/Screenshots/L_ConceptualMaster.gif?raw=true\" alt=\"image\" width=\"600\" height=\"600\" /\u003e\n\n在公司研究UE虚幻引擎，包含了材质，Sequence，地形等等，将这些知识结合起来用引擎做了一个简短的画面。\n\n### 2020-10-08 - AI Tutorial\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.7cgayikwg8e8.webp\" alt=\"image\" width=\"600\" height=\"600\"/\u003e\n\n最早那个时候学习了关于人工智能的教程，想了解其背后的原理，而不单单只是去应用，当时更早些时日，一同学习了Python编程和网络相关的知识。\n\n### 2020-08-08 - Houdini Terrain Instance\n\n[Houdini Terrain Instance - YouTube](https://www.youtube.com/watch?v=N8E4muRzrrw)\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.7kz497mepcs0.webp\" alt=\"image\" width=\"600\" height=\"600\"/\u003e\n\n程序化地形，在Houdini中制作地形与散布，再使用HoudiniEngine在UE生成地形数据。以及Instance实例。这是一个非常简单的演示。\n\n### 2019-06-20 - DCC Tools (Export Alembic)\n\n[GitHub - aaronmack/Develop\\_ExportAlembic](https://github.com/aaronmack/Develop_ExportAlembic)\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.14du5qsjniak.png\" alt=\"image\" width=\"600\" height=\"600\" /\u003e\n\n写的第一个TD工具，学完Python的Qt不久后写了这个工具，可以从Maya中导出Alembic文件到其它的DCC中。\n\n### 2019-05-22 - Houdini UE Destruction\n\n[Houdini UE Destruction on Vimeo](https://vimeo.com/337720335)\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.4cufnudarvq0.webp\" alt=\"image\" width=\"600\" height=\"600\" /\u003e\n\n将UE中物体导出到外面，在Houdini中做破碎解算，再导入进去，同时还有使用Max的插件Rayfire做破碎。那时用的背景音乐可真的绝。\n\n### 2018-12-05 - Houdini Effects\n\n[HoudiniStudy\\_StevenParticles Ⅳ on Vimeo](https://vimeo.com/339268502)\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.5zjdgvftllg0.webp\" alt=\"image\"  width=\"600\" height=\"600\" /\u003e\n\n学习了Steven的教程，花瓣飘落的效果，以及项目中需要用到的群集效果。那是一个时代了。最初进入一家动画公司，做着剧集中的效果，那个时候起就喜欢捣鼓一些代码，还有USD~\n\n# Entrance 3\n\n...\n\n**People's knowledge should be based on graph. （人们的知识应该基于图）**\n\n**People's  target should be a mountain. (人们的目标应当是一座山)**\n\n**Life is endless, and tinkering is endless (生命不息，捣鼓不止)**","lastmodified":"2024-06-05T09:48:57.367223771Z","tags":[]},"/adv/about_me":{"title":"About me","content":"\n\n# 一\n\n原来你就是阿龙，让我找到你了。\n\n咳咳，这我可就有的说了，他很喜欢动画电影，梦想可以制作出来心目中的作品。 在16年的时候，第一次真正接触三维软件后，就完全陷入了当中。后来自学了Houdini特效和编程，从此踏上了征途。 \n\n他在生活中，喜欢奇思妙想，但也不是瞎想哈哈，有时活泼，活泼的时候和小孩子没有什么区别；有时沉默，沉默的时候大多数在想事情，在想当前做的工作。 \n\n他的梦想是，驾驶飞机，在天空飞行。走遍山川草木。创作出他心中的作品。 \n\n平时他没有什么不开心的，要是不说话啦，其实不是不开心，而是被某个东西卡住了，让你感觉有一些郁闷。 \n\n想过的生活，喜欢去转一转，小到平时的走路散步，大到想去一些美丽的地方。有一辆车，有一个家 [房子+喜欢的人在一起]，做着喜欢的事情。 喜欢大自然和星空，喜欢吃面，最喜欢的是卷卷面和汤面，最喜欢的颜色淡紫色和淡蓝色，淡的颜色都挺喜欢的。 \n\n喜欢给自己出一点难题，不断挑战自我。\n\n常记于心：对知识的追求，对爱的渴望，对苦难的怜悯。应无所住，而生其心，勇敢的去努力，坦然的去接受。\n\n\u003cimg src=\"http://xyzzyxwz.top:8080/wp-content/uploads/2023/11/IMG_0200_cleanup.jpg\" alt=\"image\" width=\"300\" class=\"center\"/\u003e\n\n**孟龙 - 23年10月**\n\n\n","lastmodified":"2024-06-05T09:48:57.367223771Z","tags":[]},"/adv/b_spline":{"title":"B Spline","content":"# Graphics-B Spline\n\n\u003e B样条是贝塞尔曲线的推广，是由于Bezier曲线上的每一点会受到所有控制点的影响，我们称它为\"全局的\"，而B样条是一种\"局部的\"。\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/demonstration/B-SplineDemo.2whftkls6ku0.png\" alt=\"image\" /\u003e\n\n\n\n\u003e 迭代公式与计算公式 (下方公式是离散情况下，其中k与代码中knotvector对应)\n\n$$\nP(t) = \\sum_{i=0}^{n}P_iB_{i,p}(t), \\ t\\in [t_{k-1}, t_{n-1})\n$$\n\n$$\n\\begin{aligned}\n{B}_{(i,p,k)}(t)\n\u0026=\n\\frac{t-k_{i}}{k_{i+p}-k_{i}}{B}_{(i,p-1,k)}(t)\n+\\frac{k_{i+p+1}-t}{k_{i+p+1}-k_{i+1}}{B}_{(i+1,p-1,k)}(t) \n\\end{aligned}\n$$\n\n$$\n\\begin{aligned}\n{B}_{(i,0,k)}(t)\n\u0026=\n\\begin{cases}\n    \u00261\\quad (k_{i}\\le t\u003c k_{i+1})\\\\\n    \u00260\\quad (\\text{otherwise})\n\\end{cases}\n\\end{aligned}\n$$\n\n\u003e Code\n\n```python\n\ndef SimpleBSpline(i, p, k, t):\n     if p==0:\n          return k[i] \u003c= t \u003c= k[i+1]  # return 0 or 1\n     else:\n          return SimpleBSpline(i, p-1, k, t) * (t-k[i])/(k[i+p]-k[i]) \\\n                 + SimpleBSpline(i+1, p-1, k, t) * (k[i+p+1]-t)/(k[i+p+1]-k[i+1])\n\ndef Simple_B_Spline():\n     knotvector = []\n     step = 100\n     result = [0.0 for i in range(step+1)]\n     points = 10\n     t=0.0\n     interval = 1.0/step\n     randomRange = (0.0, 1.0)\n\n     for i in range(points):\n          knotvector.append(random.uniform(randomRange[0], randomRange[1]))\n     knotvector.sort()\n     knotvector = [0.026, 0.176, 0.226, 0.271, 0.513, 0.616, 0.802, 0.888, 0.905, 0.928]\n     y = [-0.1 for i in range(points)]\n     p=3  # order\n     i=3\n     x = [0.0 for i in range(step+1)]\n     for j in range(step+1):\n          t = j*interval\n          x[j] = t\n          result[j] += SimpleBSpline(i, p, knotvector, t)\n     plt.title(\"B-Spline p=%s\" % p)\n     plt.plot(x, result, marker='.')\n     plt.scatter(knotvector, y, s=10)\n     plt.show()\n```\n\n***","lastmodified":"2024-06-05T09:48:57.367223771Z","tags":[]},"/adv/barycentric_coordinates":{"title":"Barycentric Coordinates","content":"\n**重心坐标**\n\n**插值Interpolation**\n\n给一段距离，再选取这段距离上的一个区间并记刻度$0-1$，然后使用插值我们可以计算出这段距离上的每一处的值，当在中间时，就是$0.5$; 或者说我们将$0$刻度处设为\u003cspan style=\"color:red\"\u003e红色\u003c/span\u003e，$1$刻度处设为\u003cspan style=\"color:green\"\u003e绿色\u003c/span\u003e，同样使用插值我们可以计算出这段距离上每一处的颜色，使用颜色混合，当在中间时，红色和绿色的强度是一样的，我们知道可以混合出\u003cspan style=\"color:yellow\"\u003e黄色\u003c/span\u003e\n\n**重心坐标的引入**\n\n模型可以使用许多三角形来表示\n\n\u003cdiv align=center\u003e\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/mathematics/手绘模型三角形表示.11qpyej3om0g.webp\"\u003e\u003c/div\u003e\n\n刚才举例中的在一段距离上插值两个颜色应用到三角形上该如何表示呢？答案是使用**重心坐标**,重心坐标就是在一个三角形内使用三个数值 ($\\alpha\\ \\beta\\ \\gamma$),用这三个数值来表示这个三角形内每一个点的位置，并且需要满足这三个数值相加起来等于$1$\n\n\u003cdiv align=center\u003e\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/mathematics/重心坐标介绍.4cy6cafle480.webp\" width=\"790\"\u003e\u003c/div\u003e\n\n用一种直观的感受，我们小时候应该玩过一种玩具，一个透明的塑料盖子里有一个迷宫，里面有一个小铁球，我们通过前后左右摆动来控制小铁球走出迷宫\n\n\u003cdiv align=center\u003e\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/mathematics/重力球迷宫图片.1m4djnzlcrmo.webp\"\u003e\u003c/div\u003e\n\n将这个迷宫想象成三角形，当我们摇动时，这个小球就会前往这个三角形中不同的地方，是不是就是\u003cspan style=\"color:blue\"\u003e\"重心\"\u003c/span\u003e再往那个地方偏呢在，在数学中也是一样的道理。\u003cbr\u003e现在我们向左下移动，那么这个小球就会\"铛\"的一声，停靠在左下方\n\n\u003cdiv align=center\u003e\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/mathematics/重心坐标示例.4ba7m720nk00.webp\" width=\"490\"\u003e\u003c/div\u003e\n\n那么就像所有的\"重心\"都落在了左下方这个$A$点上了，在数学上表示呢，就是$\\alpha$的数值为$1$,$\\beta$和$\\gamma$的值为$0$\n\n**如何计算这个坐标**\n\n\u003cdiv align=center\u003e\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/mathematics/重心坐标计算用图.j14mugbo4k0.webp\" width=\"790\"\u003e\u003c/div\u003e\n\n$P$点分别与三角形的三个顶点相连，我们可以得到三个小三角形，然后**通过分别计算这个三个小三角形的面积与整个三角形的面积的比值**\n\n\u003cdiv align=center\u003e\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/mathematics/重心坐标计算1.g6q54cfe988.webp\" width=\"790\"\u003e\u003c/div\u003e\n\n那么之前的那个例子通过计算就是小三角形$A_A$占据了整个三角形，与整个三角形的面积比值为$\\frac{1}{1}=1$,而小三角形$A_B$与$A_C$与整个三角形的面积比为$\\frac{0}{1}=0$,现在的问题就是我们如何计算这个**面积比值**\n\n\u003cdiv align=center\u003e\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/mathematics/重心坐标计算示例.2fikhcexbois.webp\" width=\"390\"\u003e\u003c/div\u003e\n\n首先是三角形上的法线计算，使用[[cross_product]]叉乘\n\n$$\\mathbf{n}=(b-a)\\times (c-a)$$\n\n求得法线 (两个向量叉乘得第三个向量且垂直于这两个向量) 为什么要计算法线呢？因为计算法线与求面积有关,让我们继续往下看，在我们求得法线之后，我们就有三角形的面积为 \n\n$$area = \\frac{1}{2} ||n||$$\n\n这里为什么面积是$\\frac{1}{2}$倍的法线的模？抛开叉乘的几何意义，我们从代数意义去看叉乘\n\u003cdiv align=center\u003e\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/mathematics/叉乘与三角形面积.6bri9yhngtc0.webp\"\u003e\u003c/div\u003e其中\n\n$${\\displaystyle \\left\\|\\mathbf {a} \\times \\mathbf {b} \\right\\|=\\left\\|\\mathbf {a} \\right\\|\\left\\|\\mathbf {b} \\right\\|\\sin(\\theta)}$$\n\n是叉乘的模长计算公式，其中$a$向量的模也就是$a$的边长，$b$向量的模就是$b$的边长,根据三角形面积的计算公式\n\n$$\\Delta = \\frac{1}{2}ah$$\n\n我们发现，计算叉乘的过程正好是计算三角形面积的过程，只不过少除以了一个$2$，所以叉乘的模长的$\\frac{1}{2}$倍正好就是三角形的面积\n\n计算其中两个小三角形的面积和整个三角形的面积，其中\n\n①的面积为\n\n$$\\frac{1}{2}\\times ||(a-p)\\times (c-p)||$$\n\n②的面积为\n\n$$\\frac{1}{2}\\times ||(b-p)\\times (c-p)||$$\n\n整个三角形的面积为\n\n$$\\frac{1}{2}\\times ||(b-a)\\times (c-a)||$$\n\n则我们最终有\n\n$$ \\begin{array}{l} \\alpha =\\frac{①的面积}{整个三角形面积} \\\\ \\beta =\\frac{②的面积}{整个三角形面积} \\\\ \\gamma =1-\\alpha-\\beta \\end{array}$$\n\n注：计算方法不唯一，还有一些其它的计算方法","lastmodified":"2024-06-05T09:48:57.367223771Z","tags":[]},"/adv/bezier_curve":{"title":"Bezier Curve","content":"# Graphics-Bezier Curve\n\n\u003e Bezier曲线在例如Photoshop中的钢笔工具等工业软件中有很重要的应用，可以帮助艺术家制作出一些直观上的光滑的曲线；其中最主要的部分是**伯恩斯坦多项式**，也就是下方代码中的`compute`函数\n\n$$\nB_{i,n}(t) = \\left ( \\begin{matrix} n\\\\i \\end{matrix} \\right ) t^i(1-t)^{n-i}\n$$\n这是个多项式喔。\n\n\u003cdiv class=\"caption\"\u003e\n    Bernstein Polynomial.\n\u003c/div\u003e\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/demonstration/BezierCurve.3r4fli5ucs00.gif\" alt=\"image\" /\u003e\n\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/demonstration/BezierHoudiniNode.4yjg8bfl2xw0.png\" alt=\"image\" /\u003e\n\n```c\nvector compute(vector p1, p2; float t){\n    return (1-t)*p1+t*p2;\n}\n\nvector gen_bezier( vector p[]; float t ){ \n    vector ps[] = p;  // Note: p is reference, so we need a new variable\n    int iter = len(ps);\n    for(int z=0; z\u003citer; z++){\n        int n=len(ps);\n        vector tmp[];\n        for(int i=0;i\u003cn-1;i++){\n            vector cr = vector(compute(ps[i], ps[i+1], t));\n            push( tmp, cr); \n        }\n        ps=tmp;\n        iter--; \n    }\n\n    return compute(ps[0], ps[1], t);\n}\n\n\nint step=chi(\"step\");\nfloat interval=1.0/step;\nint prim0 = addprim(0, \"polyline\");\nvector tp[];\nint np = npoints(0); \nint i=0; \nwhile(i\u003cnp){\n    push(tp, vector(point(0, \"P\", i)));\n    i++; \n}\n\nfor(float t=0;t\u003c1;t+=interval){\n    int pt=addpoint(0, gen_bezier(tp, t));\n    addvertex(0, prim0, pt);\n} \n```\n\n**原理**:\n\nBernstein多项式与概率密切相关(假设我们在做一个实验，做了n次，成功i次的概率是多少？怎么计算？就是上面的那个公式)，我们知道假设的概率，概率的范围是`[0,1]`，则我们多尝试一些，会有\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/aaronmack.github.io@master/assets/img/graphics/BernsteinPolynomial.png\" alt=\"image\" /\u003e\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.5jkfxvr1cik0.webp\" alt=\"image\" /\u003e\n\n\u003cdiv class=\"caption\"\u003e\n    Bernstein Polynomial. Figure from - \u003cb\u003eWolfram MathWorld\u003c/b\u003e\n\u003c/div\u003e\n\n它的值总是往所取值处的尖峰处靠拢，再进行迭代，就得到Bezier曲线了\n\n***\n\n[贝塞尔曲线中的伯恩斯坦多项式（Bernstein Polynomial） - 知乎](https://zhuanlan.zhihu.com/p/366082920) - 前面的还能读懂，后面就只知其意，不知其理了。看来还是只能听懂大白话。\n\n[贝塞尔曲线入门](https://pomax.github.io/bezierinfo/zh-CN/index.html) - 一个非常全的介绍贝塞尔曲线的网站。","lastmodified":"2024-06-05T09:48:57.367223771Z","tags":[]},"/adv/bijection_injection_surjection":{"title":"Bijection Injection Surjection","content":"\n\n![image](https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.2jh58a81p9w0.webp)","lastmodified":"2024-06-05T09:48:57.367223771Z","tags":[]},"/adv/cg_outline":{"title":"Tools","content":"\n[Academy Software Foundation - ASWF](https://www.aswf.io/)\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/1706417312928.webp\" alt=\"1706417312928\" width=600/\u003e\n\n\n# Tools\n\n## Pipeline\n\n2. AYON\n\t1. AYON core (Openpype) 开源的管道工具。\n\t2. AYON Backend\n\t3. AYON Frontend\n\t4. Addons\n\t5. Components\n3. **cgru** 更详细: [[cg_pipeline|CG Pipeline]] CGRU 是计算机图形工具包。其中Afanasy是一个渲染场管理器。 Rules 是一个CG 项目跟踪器。\n4. Ramses 生产管理系统。 [Ramses](https://github.com/RxLaboratory/Ramses)\n5. Anima - VFX和动画管道库。 [anima](https://github.com/eoyilmaz/anima) 同时与[stalker](https://github.com/eoyilmaz/stalker)搭配使用，内部工作室的工具。\n6. Prism Pipeline工具社区版。[GitHub - PrismPipeline/Prism: Prism Pipeline](https://github.com/PrismPipeline/Prism)\n7. kabaret 制作跟踪，资产管理，管道流程的工具。 https://gitlab.com/kabaretstudio/kabaret\n8. cgwire - **Kitsu** - 项目协作管理。\n\n## Matchmove\n\n1. Syntheyes - 平面跟踪(Match move)的一款软件。\n## Common\n\n2. GeoTracker\n3. FaceTracker (KeenTools 系列中的脸部追踪工具)\n4. Tiny Eye (制作眼球的工具，支持Blender的Cycles和Eevee)\n5. Allusion [Allusion](https://github.com/allusion-app/Allusion) 管理你的图片库。\n6. Cascade 基于节点的图片编辑。\n7. GimelStudio 基于节点的图片编辑。\n8. **Krita** 绘画软件。\n10. storyboarder 故事版制作软件。\n11. xComp 渲染结果比较工具。 [xComp](https://github.com/gugenstudio/xComp)\n12. Mandelbulber v2 可以生成三维分形的软件。\n13. MeshLib 用于处理和编辑 3D网格的系统。\n14. Wings3D 介绍说是一款对模型进行细分的工具。\n15. QuiltiX 基于节点的MaterialX材质编辑。\n16. Open RV / DJV - 图片序列查看器。\n17. Ink - 写互动叙述故事或者游戏的工具。 [https://github.com/inkle/ink](https://github.com/inkle/ink) \n18. glslViewer - 命令行中的glsl shader查看器[https://github.com/patriciogonzalezvivo/glslViewer](https://github.com/patriciogonzalezvivo/glslViewer) \n19. NXT - https://nxt-dev.github.io/ 代码节点分层合成应用程序。\n## Post-compositing video editing\n\n1. **Natron** - nuke软件的平替。用于VFX与MG。[GitHub - NatronGitHub/Natron](https://github.com/NatronGitHub/Natron)\n2. Kdenlive - 开源的视频编辑器。[GitHub - KDE/kdenlive](https://github.com/KDE/kdenlive)\n3. olive - 开源的非线性（节点）视频编辑器。[GitHub - olive-editor](https://github.com/olive-editor/olive)\n4. shotcut - 开源基于Qt的视频编辑器。 https://github.com/mltframework/shotcut\n5. tlRender - 用于视效电影动画的review和playback工具。\n6. xSTUDIO - 用于电影动画的review和playback工具。\n\n\n## Renderer\n\n1. **openmoonray** - 梦工厂开源的渲染器。\n2. Guerilla render\n3. gatling [gatling](https://github.com/pablode/gatling) - 基于Hydra的光追渲染器。\n4. **Cycles** - Blender中的基于物理的渲染器。\n5. kajiya - 实验性的的实时全局光照渲染器。\n6. **LuxCoreRender** - 用于研究性质的，用于生成摄影级别的图像。(物理光流)\n7. Arnold\n8. Renderman\n9. VRay\n10. Redshift\n11. Mitsuba - 面向研究性质的，正向和反向光传输模拟渲染系统。可微分的渲染器。\n12. **Radeon ProRender** - AMD开发的物理渲染引擎。\n\n## Blender\n\n1. **Poly Haven** Assets Add-on [polyhavenassets](https://github.com/Poly-Haven/polyhavenassets)\n2. VF-BlenderAutosaveRender https://github.com/jeinselen/VF-BlenderAutosaveRender\n3. **Capsule** - https://github.com/Takanu/Capsule 批量导出Blender中的场景内容。\n4. BlenderGIS - https://github.com/domlysz/BlenderGIS 导入geographic地理数据。\n5. Rigify - CloudRig - 自动绑定的功能集包。 [Blender / CloudRig · GitLab](https://gitlab.com/blender/CloudRig)\n6. 自动地形 (输入简单多边形生成地形) https://unicornhunter.gumroad.com/l/AutoTerrainer\n7. **Eazy PBR** https://codeofart.gumroad.com/l/EasyPBR\n## awesome\n\n1. CG VFX Pipeline [GitHub - cgwire/awesome-cg-vfx-pipeline: List of open-source technologies that help in the process of building a pipeline for CG and VFX productions](https://github.com/cgwire/awesome-cg-vfx-pipeline)\n\n## Storage\n\n1. FreeNAS\n\n# Effect Reference\n\n真实地球 https://www.youtube.com/watch?v=7KXGZAEWzn0 [来源](https://www.sidefx.com/forum/topic/74787/?page=1#post-319797)\n\n场景渲染参考\n\t3. 武术3D效果图 https://www.youtube.com/watch?v=8b5k0M8wTBg \n\t2. 另类现实 Alternate Realities https://www.youtube.com/watch?v=iKBs9l8jS6Q\n\t1. BOSS决战 Boss Fight 3D Montage https://www.youtube.com/watch?v=wgiRK8_iKdg\n\t2. 3D Vehicle https://www.youtube.com/watch?v=mIDlU_sKto0\n\n# CG Assets\n\n## Library\n\n1. https://github.com/knightcrawler25/GLSL-PathTracer assets\n2. https://github.com/LuxCoreRender/LoL LuxCoreRender online asset library\n3. https://luxcorerender.org/example-scenes/ LuxCoreRender Example Scenes\n4. **PolyHaven** https://polyhaven.com/\n5. Quixel Bridge https://quixel.com/bridge\n6. **AMD GPUOpen MaterialX** Library https://matlib.gpuopen.com/main/materials/all\n7. Mixamo https://www.mixamo.com/\n9. freepoly.org https://www.freepoly.org/en\n10. free3d https://free3d.com/3d-models/\n11. sketchfab https://sketchfab.com/\n12. 3D Scans https://threedscans.com/ - 3D扫描模型\n13. **ambientcg** [ambientCG - CC0 Textures, HDRIs and Models](https://ambientcg.com/)\n15. **Armorpaint Cloud** https://github.com/armory3d/armortools/tree/main/armorpaint\n16. Maya Rigs https://animationmethods.com/rigs.html\n17. Maya rigs and tools https://gumroad.com/\n18. Maya Rigs https://www.characterrigs.com/\n19. blendswap https://www.blendswap.com/\n20. turbosquid - https://www.turbosquid.com\n21. CGTrader https://www.cgtrader.com\n\n## Example\n\n1. Arnold Learning Scene (Houdini) https://help.autodesk.com/view/ARNOL/ENU/?guid=arnold_for_houdini_tutorials_ah_Learning_Scenes_html\n2. **Digital Production Example Library** https://dpel.aswf.io/\n3. Render Example Scene https://rmanwiki.pixar.com/display/REN25/Examples\n4. **Link To Open Assets** \n\t1. https://wiki.aswf.io/display/ARW/Links+to+Open+Assets\n\t2. https://wiki.aswf.io/display/WGUSD/Sample+Assets\n5. Blender Cloud Libraries https://cloud.blender.org/libraries\n\t1. Cloud Gallery https://cloud.blender.org/p/gallery/\n\t2. HDRI https://cloud.blender.org/p/hdri\n\t3. Textures https://cloud.blender.org/p/textures\n\t4. Characters https://studio.blender.org/characters/\n6. Blender Demo Files https://www.blender.org/download/demo-files/\n7. Nvidia USD Assets https://developer.nvidia.com/usd\n8. **Houdini Content Library** https://www.sidefx.com/contentlibrary/\n9. **mitsuba** - https://mitsuba.readthedocs.io/en/stable/src/gallery.html\n10. McGuire Computer Graphics Archive - https://casual-effects.com/data/\n11. Renderman Learn Resource https://renderman.pixar.com/learn\n\n## Learning Materials\n\n1. [https://thebookofshaders.com/?lan=ch](https://thebookofshaders.com/?lan=ch) 关于shader的一本书\n\n# Pixar USD\n\n## 资源\n\n1. 面向PipelineTD的USD生存者指南 https://github.com/LucaScheller/VFX-UsdSurvivalGuide\n2. USD Working Group Assets https://github.com/usd-wg/assets\n3. USD资产结构 (alab) https://usd-alab.s3.amazonaws.com/documentation.html\n\n# Blender\n\n## 资源\n\n2. Blender - [GitHub - agmmnn/awesome-blender: 🪐 A curated list of awesome Blender addons, tools, tutorials; and 3D resources for everyone.](https://github.com/agmmnn/awesome-blender)\n\n# Houdini\n\n## 资源\n\n1. Houdini - [GitHub - wyhinton/AwesomeHoudini: A collection of awesome Free/Open Source things regarding the SideFx Houdini ecosystem.](https://github.com/wyhinton/AwesomeHoudini)\n\n[[houdini_hello|Houdini Hello]]\n\n## Releases\n\n14 - https://www.sidefx.com/community/sidefx-releases-houdini-14/\n15 - https://www.sidefx.com/community/sidefx-releases-houdini-15/\n15.5 - https://www.sidefx.com/community/sidefx-releases-houdini-155/\n16 - https://www.sidefx.com/community/sidefx-releases-houdini-16/\n16.5 - https://www.sidefx.com/community/sidefx-releases-houdini-165\n17 - https://www.sidefx.com/community/houdini-17-sneak-peek/\n17.5 - https://www.sidefx.com/community/houdini-175-launch-event/\n18 - https://www.sidefx.com/community/houdini-18-sneak-peek/\n18.5 - https://www.sidefx.com/community/houdini-18_5-sneak-peek/\n19 - https://www.sidefx.com/community/houdini-19-sneak-peek/\n19.5 - https://www.sidefx.com/community/houdini-195-sneak-peek/\n20 - https://www.sidefx.com/products/whats-new-in-h20/\n\n\n\n# Unity\n\n## 艺术准备\n\n1. 绑定是否满足Unity-Humanoid-Avatar (是 Unity 识别特定动画模型是否为人形布局的方法，以及该模型的腿部、手臂、头部和身体的对应部分。) 的要求\n2. 动画的BlendShape满足ARKit命名规范\n\n**Maya**\n\n\u003e ADV\n\n**Unity**\n\nPackages\n\n\u003e Subscenes  \n\u003e Cinemachine  \n\u003e InputSystem  \n\u003e HDRP - Volumetric Cloud 高清渲染管线  \n\u003e ML-Agents\n\nStore\n\n\u003e Magic Cloth  \n\u003e Dynamic Bone  \n\u003e HAIRWORKS  \n\u003e Gaia 地形工具  \n\u003e Terrain Composer 2 地形工具  \n\u003e Obi 基于 CPU 的 Unity 实时粒子物理引擎  \n\u003e Playmaker 交互式游戏设计  \n\u003e Amplify Shader Editor (Pack) 材质编辑器  \n\u003e KWS Water System (HDRP) 用于模拟海洋/大海/河流/湖泊/池塘等水面  \n\u003e Polygon Pack  \n\u003e Amplify Impostors 使用billboard技术来表示复杂几何。\n\nOpenSource\n\n\u003e [usd-unity-sdk](https://github.com/Unity-Technologies/usd-unity-sdk)  \n\u003e [glTFast](https://github.com/atteneder/glTFast)  \n\u003e Houdini引擎 Houdini Engine\n\n\u003e Sentis [About Sentis Beta - AI Beta / Sentis - Unity Discussions](https://discussions.unity.com/t/about-sentis-beta/260899/1)\n\n## 制作考虑\n\n动画融合-Mixamo  \nHoudini程序化生成（地形，建筑，场景…）  \n动作捕捉，面部捕捉\n\n## 工具插件\n\n### Houdini Engine\n\nInstall\n\n在编辑器Project-\u003eAssets中，Import Package -\u003eCustom Package...，选择到Houdini安装目录(engine/unity/HoudiniEngineUnity.unitypackage) 或者也可以从Github仓库[GitHub - sideeffects/HoudiniEngineForUnity: Houdini Engine for Unity](https://github.com/sideeffects/HoudiniEngineForUnity)安装。\n\n\u003e https://www.sidefx.com/products/houdini-engine/plug-ins/\n\n\n### USD\n\nInstalling\n\n[GitHub - Unity-Technologies/usd-unity-sdk: Integration of Pixar's Universal Scene Description into Unity](https://github.com/Unity-Technologies/usd-unity-sdk)\n\n- installing by name, \"com.unity.formats.usd\";\n- installing by Git URL, \"[https://github.com/Unity-Technologies/usd-unity-sdk.git?path=package/com.unity.formats.usd](https://github.com/Unity-Technologies/usd-unity-sdk.git?path=package/com.unity.formats.usd)\";\n- or browsing for a local package with path `\u003croot\u003e/package/com.unity.formats.usd/package.json.`\n\n## 工具集合\n\n1. Unity Live Capture [[unity_live_capture|Unity Live Capture]]\n\n## 开源仓库\n\n### Tools\n\n[GitHub - Unity-Technologies/ml-agents: The Unity Machine Learning Agents Toolkit (ML-Agents) is an open-source project that enables games and simulations to serve as environments for training intelligent agents using deep reinforcement learning and imitation learning.](https://github.com/Unity-Technologies/ml-agents)\n\n[GitHub - gonglei007/GameDevMind: 最全面的游戏开发技术图谱。帮助游戏开发者们在已知问题上节省时间，省出更多的精力投入到更有创造性的工作中去。](https://github.com/gonglei007/GameDevMind)\nUnity 游戏引擎的程序生成库[GitHub - Syomus/ProceduralToolkit: Procedural generation library for Unity](https://github.com/Syomus/ProceduralToolkit)\n\n特效工具集 [GitHub - Unity-Technologies/VFXToolbox: Additional tools for Visual Effect Artists](https://github.com/Unity-Technologies/VFXToolbox)\n\n### Effects\n\n[GitHub - keijiro/TestbedHDRP: Testbed project for Unity HDRP (High Definition Render Pipeline)](https://github.com/keijiro/TestbedHDRP)\n\n[GitHub - QianMo/X-PostProcessing-Library: Unity Post Processing Stack Library | Unity引擎的高品质后处理库](https://github.com/QianMo/X-PostProcessing-Library)\n\n[GitHub - mob-sakai/ParticleEffectForUGUI: Render particle effect in UnityUI(uGUI). Maskable, sortable, and no extra Camera/RenderTexture/Canvas.](https://github.com/mob-sakai/ParticleEffectForUGUI)\n\n### Shader\n\n[GitHub - lettier/3d-game-shaders-for-beginners: 🎮 A step-by-step guide to implementing SSAO, depth of field, lighting, normal mapping, and more for your 3D game.](https://github.com/lettier/3d-game-shaders-for-beginners)\n\n[GitHub - QianMo/Awesome-Unity-Shader: :boat: 关于炫酷的Unity3D Shader | About Cool Unity3D Shaders](https://github.com/QianMo/Awesome-Unity-Shader)\n\n[GitHub - adrian-miasik/unity-shaders: A bunch of shader examples created in Unity (ShaderGraph \u0026 Built-in) 🧙✨](https://github.com/adrian-miasik/unity-shaders)\n\n[GitHub - nvjob/nvjob-water-shader-simple-and-fast: NVJOB Simple Water Shaders. Free Unity Asset.](https://github.com/nvjob/nvjob-water-shader-simple-and-fast)\n\n### Collects\n\nhttps://github.com/baba-s/awesome-unity-open-source-on-github  \nhttps://github.com/RyanNielson/awesome-unity  \nhttps://github.com/michidk/Unity-Script-Collection  \nhttps://github.com/XINCGer/Unity3DTraining  \nhttps://github.com/ThusSpokeNomad/GameNetworkingResources\n\n### Toon Shader\n\nhttps://github.com/Delt06/urp-toon-shader  \nhttps://github.com/Delt06/toon-rp  \nhttps://github.com/ColinLeung-NiloCat/UnityURPToonLitShaderExample  \nhttps://github.com/JasonMa0012/JTRP\n\n## 资源下载\n\n[Free VFX image sequences and flipbooks | Unity Blog](https://blog.unity.com/engine-platform/free-vfx-image-sequences-flipbooks)\n\n## 学习路径\n\n1. Code Monkey - (Game Script, Multi Player)  \n\t1. Learn Unity Beginner Intermediate 2023\n\t2. Learn Unity Multiplayer\n2. Third Person Game  \n\t1. THIRD PERSON MOVEMENT in 11 MINUTES - Unity Tutorial [UCwwn2q4Vys]\n\t2. THIRD PERSON MOVEMENT in Unity [4HpC--2iowE]\n3. Virtual Camera (MainCamera)  \n4. Visual Effect Graph\n5. Basic Real-Time FX ｜ Simon Verstraete ｜ Games Workshop [kMI-Wro3p9g]\n6. Complex Roads in Houdini\n\t1. Complex Roads in Houdini - Part 1： Solving Intersections [bTlY9ahThdQ]\n\t2. Complex Roads in Houdini - Part 2： Constructing Geometry [lV8r3pDZZ50]\n\t3. Complex Roads in Houdini - Part 3： Setting up a Road Tool [EoRHJPN-JI0]\n7. Creating Fire, Smoke \u0026 Mist Effects with VFX Graph in Unity! (Tutorial) [OCzGXcdyqnQ]\n8. FIREWORKS in Unity using VFX Graph! [iCEHarLRCzI]\n9. Houdini Engine for Unity ｜ Instancing \u0026 Variation [Hw-XcMe7B3E]\n10. Intro to Playmaker (2021) [Vx4TxvtqICE]\n11. Procedural Generated Pipe\n\t1. Procedural Generated Pipe - Part 1： Generating Geometry [0Kk0tHp0Ax8]\n\t2. Procedural Generated Pipe - Part 2： HDA and Unreal Materials [8V8BzEK0cDI]\n\t3. Procedural Generated Pipe - Part 3： Valves, Connectors and Corners [qgPnDvYvdQk]\n\t4. Procedural Generated Pipe - Part 4： Cleaning up the Interface [xQ8J2Lj6nXE]\n12. The Matrix Awakens： Creating a World ｜ Tech Talk ｜ State of Unreal 2022 [xLVJP-o0g28]\n13. The Matrix Awakens： Generating a World ｜ Tech Talk ｜ State of Unreal 2022 [usJrcwN6T4I]\n14. Thinking Procedurally ｜ Moritz Schwind ｜ Games Workshop [moRNVJwSKYA]\n\n\n# Unreal\n\n## 技术\n\n作者个人对虚幻引擎中的GameplayAbilitySystem（GAS）的理解。[GitHub - tranek/GASDocumentation: My understanding of Unreal Engine 5's GameplayAbilitySystem plugin with a simple multiplayer sample project.](https://github.com/tranek/GASDocumentation)\n\n[https://github.com/UE4-OceanProject/Environment-Project/tree/UE5?tab=readme-ov-file](https://github.com/UE4-OceanProject/Environment-Project/tree/UE5?tab=readme-ov-file) 轻松创建ue5环境","lastmodified":"2024-06-05T09:48:57.367223771Z","tags":[]},"/adv/cg_pipeline":{"title":"CG Pipeline","content":"# AYON\n\nOpenPype将会在24年开始逐步变成AYON的一部分。变为core模块。\n\nWindows下开始使用docker部署，要方便许多。总来说，现在分为一个backend (server) 和frontend 前端页面，以及一个launcher和许多的addons。\n\n首先部署的是服务，可以在下面的链接中根据ayon-docker中写的命令去安装。它会同时在docker容器中装好所需要的部件。(数据库，frontend，backend)。\n\n此时就可以去浏览器页面默认为(localhost:5000)，去配置项目。\n\n本地部署需要自己构建launcher，并上传到backend中去。构建的方式参考下面的链接。\n\n关于安装上的一些命令，可以在这里找到。[[my_develop#AYON|Develop AYON]]\n\n# rez\n\n## 前言\n\n针对流程上的工具，可以配置软件环境。例如DCC工具等。可以使用例如`rez-env \u003cpackage_name\u003e` 配置当前Shell的环境。\n\n## 安装\n\n### 第一步\n\n**via pip**\n\n```bash\n# create virtualenv then install it\npip install rez\n# config REZ_CONFIG_FILE point to your rezconfig.py\n```\n\n**via source**\n\n```bash\npython ./install.py\n```\n\n### 第二步\n\n安装完成后使用`rez-bind --quickstart` 为现有软件创建rez包。\n\n### 第三步\n\n尝试官方的example。\n\n```bash\ncd example_packages/hello_world\nrez-build --install\n\n# 这会在你的系统里创建一个名为hello_world的包rez-env hello_world进入到这个包的环境中~\n```\n\n## 使用\n\n1. 配置rezconfig.py文件\n\n```bash\npackages_path = [\n    \"~/packages\",           # locally installed pkgs, not yet deployed\n    \"~/.rez/packages/int\",  # internally developed pkgs, deployed\n    \"~/.rez/packages/ext\",  # external (3rd party) pkgs, such as houdini, boost                  \n    \"\u003cyour_extra_path_here\u003e\"\n]\n```\n\n2. 配置第一个包\n\n例如想创建一个关于maya，版本2023环境的包。那么就可以在上述packages_path中的某个目录下，先创建maya（包名）这个文件夹，再创建2023（版本号）这个文件夹，再创建package.py，文件。其内容如下：\n\n```bash\nname = \"maya\"\n\nversion = \"2023\"\n\ndef commands():\n    env.MAYA_UI_LANGUAGE = 'en_US'\n    alias(\"maya2023\", r\"C:/Program Files/Autodesk/Maya2023/bin/maya.exe\")\n```\n\n\u003e [!INFO] commands函数定义了如何配置当前的环境。\n\n3. 当完成上述配置后，在命令行中使用`rez-env maya`则会配置成功当前环境。\n# CGRU\n\n官方网站：[CGRU](https://cgru.info/)\n\n## 写到前面\n\n一个渲染农场管理软件，之前最早我捣鼓了Deadline，但是其配置之繁琐，步骤之复杂，着实被震撼到了，当然我觉得，复杂也许意味着强大。直到发现了这个工具，它的配置真的很简单，主流的DCC工具都也支持，是老牌的工具了。它需要一台电脑当server，可以是随便一台电脑。\n\n## 准备一下\n\n当前版本：3.3.1\n\n1. 下载与配置\n\n可以在这个网站下载到[Render Farm Manager, Project Tracker. - Browse Files at SourceForge.net](https://sourceforge.net/projects/cgru/files)最新版本，将它放置到一个目录中，比如我放在`c:\\data\\exec\\cgru\\v3.3.1`, 解压到这个里面，然后在这个目录中创建一个`config.json`，这里我填入的内容如下：\n\n```json\n{\n\t\"cgru_config\":\n\t{\n\t\t\"\": \"\",\n\t\t\"-company\":\"LingJingStudio\",\n\t\t\"af_servername\":\"192.168.31.200\",\n\t\t\"af_serverport\":51000\n\t}\n}\n```\n\n因为默认配置文件(`config_default.json`) 中的servername默认是127.0.0.1，我们需要改成服务端电脑的ip地址，这样其它的机器就可以找到啦。这份`config.json`，在其它电脑上也需要用到~ 所以如果改动了，需要同步到其它电脑上。\n\n\u003e [!INFO] cgru并没有区分客户端的安装文件与服务端的安装文件，所以配置好之后，直接将v3.3.1目中压缩一份，复制到其它电脑上就行了。\n\n2. 启动\n\n服务启动\n\n```bash\nset CGRU_LOCATION=C:\\data\\exec\\cgru\\v3.3.1\ncd /d %CGRU_LOCATION%\nsetup.cmd\nstart\\AFANASY\\_afserver.cmd\n```\n\n* 服务启动后就可以在浏览器中根据配置文件中填写的地址与端口查看各种信息了。\n\nKeeper启动 - 这会启动一个桌面图标，其中一些功能就像是deadline的slaves。可以选择是否让本机执行渲染任务。在其它的电脑就只需要启动这个Keeper就可以啦。\n\n```bash\nset CGRU_LOCATION=C:\\data\\exec\\cgru\\v3.3.1\ncd /d %CGRU_LOCATION%\nsetup.cmd\nstart.cmd\n```\n\n\n3. 选择电脑是否执行渲染任务。\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.2bzugvjljim8.webp\" alt=\"image\" width=300/\u003e\n\n\n## 提交渲染任务\n\n这里以Blender为例子。\n\n首先给Blender安装插件。插件在cgru的目录plugins中。具体安装就不赘述啦。\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.1z3vpdtsuqt.webp\" alt=\"image\" width=500/\u003e\n\n在Blender中填好渲染输出的路径后，在Render标签中找到Afanasy子标签，填写你的Job Name后就可以提交了。然后在浏览器中查看当前Job的状态。\n\n## 更多\n\n上面的只是非常非常简单的配置与使用。更深入的使用还是要仔细查看它的文档。在这里 https://cgru.readthedocs.io/en/latest/index.html\n\n# OpenPype (Deprecated) \n\n\u003e[!WARN] 现在openpype已经成为AYON-Core，见 [[cg_pipeline#AYON|AYON]]\n\n## 写到前面\n\n在捣鼓Pipeline时，从Github上发现了OpenPype这款DCC管道工具和CgWire开源的流程管理软件。\nOpenPype就像是Publisher和Loader，交接棒一样进行流程中数据的管理，并且支持和CgWire的互动，满足一般工作室的需求。\n目前Pype的官方提供了云支持，但代码是开源的你可以自己搭建数据库和Pype。\n\n## 准备工作\n\n\u003e 系统 Windows+Docker\n\u003e Bash 其中在生成CA的部分，是使用的cgywin\n\n1. 数据库使用的mongodb，我们为了安全，使用ca证书进行authorization，测试的时候发现ca证书和数据库如果换了电脑，就需要重新生成。\n\n生成CA证书和公私钥 (下方的命令)\n\n```bash\nRef: https://github.com/bitnami/containers/blob/main/bitnami/mongodb/README.md\n\ncd  /cygdrive/c/data/db/.mongodb/ca_local\n\nopenssl genrsa -out mongoCA.key 2048\n\nopenssl req -x509 -new \\\n    -subj \"/C=US/ST=NY/L=New York/O=Example Corp/OU=IT Department/CN=mongoCA\" \\\n    -key mongoCA.key -out mongoCA.crt\n\nexport NODE_NAME=mongodb\nopenssl req -new -nodes \\\n    -subj \"/C=US/ST=NY/L=New York/O=Example Corp/OU=IT Department/CN=${NODE_NAME}\" \\\n    -keyout ${NODE_NAME}.key -out ${NODE_NAME}.csr\n\n\nopenssl x509 \\\n    -req -days 365 -in ${NODE_NAME}.csr -out ${NODE_NAME}.crt \\\n    -CA mongoCA.crt -CAkey mongoCA.key -CAcreateserial -extensions req\n\ncat ${NODE_NAME}.key ${NODE_NAME}.crt \u003e ${NODE_NAME}.pem\n\n\nrm ${NODE_NAME}.csr\n\n\n# 在docker-desktop的mongodb中的exec中执行下方命令，生成pfx格式的密钥\ncd /certificates\nopenssl pkcs12 -inkey mongodb.key -in mongodb.crt -export -out mongodb.pfx （passwd: a1234）\nopenssl pkcs12 -inkey mongoCA.key -in mongoCA.crt -export -out mongoCA.pfx （passwd: a1234）\n```\n\n使用compose.yaml配置文件和.env配置文件通过使用docker-desktop搭建mongodb数据库\n\n2. 创建好这两个文件\n\n.env\n\n```env\n### MongoDB configuration\n\nMONGODB_VERSION=7.0.2\nMONGODB_DATA=C:/data/db/.mongodb/mongodb_local\nMONGODB_CA=C:/data/db/.mongodb/ca_local\nMONGODB_CONF=C:/data/db/.mongodb/local_config\nALLOW_EMPTY_PASSWORD=no\nMONGODB_ROOT_PASSWORD=tC0jsi16gEqx\nMONGODB_REPLICA_SET_KEY=mL7sArv24C4o\n```\n\ncompose.yaml\n\n```yaml\n\nvolumes:\n  mongodb_data: { driver: local }\n\nservices:\n  mongodb:\n    image: docker.io/bitnami/mongodb:${MONGODB_VERSION:-6.0}\n    restart: always\n    volumes:\n      - \"${MONGODB_DATA}:/bitnami/mongodb\"\n      - \"${MONGODB_CA}:/certificates\"\n      - \"${MONGODB_CONF}:/bitnami/mongodb/conf\"\n    environment:\n      MONGODB_REPLICA_SET_MODE: primary\n      MONGODB_REPLICA_SET_NAME: ${MONGODB_REPLICA_SET_NAME:-rs0}\n      MONGODB_PORT_NUMBER: ${MONGODB_PORT_NUMBER:-27018}\n      MONGODB_INITIAL_PRIMARY_HOST: ${MONGODB_INITIAL_PRIMARY_HOST:-mongodb}\n      MONGODB_INITIAL_PRIMARY_PORT_NUMBER: ${MONGODB_INITIAL_PRIMARY_PORT_NUMBER:-27018}\n      MONGODB_ADVERTISED_HOSTNAME: ${MONGODB_ADVERTISED_HOSTNAME:-mongodb}\n      MONGODB_ENABLE_JOURNAL: ${MONGODB_ENABLE_JOURNAL:-true}\n      ALLOW_EMPTY_PASSWORD: ${ALLOW_EMPTY_PASSWORD:-yes}\n      MONGODB_ROOT_PASSWORD: ${MONGODB_ROOT_PASSWORD:-password123}\n      MONGODB_REPLICA_SET_KEY: ${MONGODB_REPLICA_SET_KEY:-replicasetkey123}\n      MONGODB_EXTRA_FLAGS: --tlsMode=preferTLS --tlsCertificateKeyFile=/certificates/mongodb.pem --tlsClusterFile=/certificates/mongodb.pem --tlsCAFile=/certificates/mongoCA.crt\n    expose:\n      - ${MONGODB_PORT:-27018}\n    ports:\n      - \"${MONGODB_BIND_IP:-0.0.0.0}:${MONGODB_HOST_PORT:-27018}:${MONGODB_PORT:-27018}\"\n```\n\n3. cd到这两个文件的文件夹中，调用`docker compose up -d`命令，执行成功后如果没有报错就可以使用一些工具来测试数据库是否创建成功了。\n\n\u003e mongosh来连接数据库并创建用户\n\n```bash\n# 连接\n\"C:\\data\\port\\mongosh-1.10.6-win32-x64\\bin\\mongosh\" --port 27018 -u root -p tC0jsi16gEqx --authenticationDatabase admin\n\n# 使用admin数据库\nuse admin\n\n# 创建用户 (测试的时候发现Pype并没有自己的用户管理，是通过数据库用户来进行权限管理的，真的牛)\ndb.createUser( { user: \"aaron\", pwd: \"secretpassword\", roles: [ { role: \"userAdminAnyDatabase\", db: \"admin\" } ] } ) \n\ndb.createUser( { user: \"Mohan\", pwd: \"password\", roles:[{role: \"read\" , db:\"openpype\"}, {role: \"readWrite\" , db:\"avalon\"}] } ) \n\ndb.grantRolesToUser( \"ll\", [{role:\"read\", db:\"openpype\"}, {role:\"readWrite\", db:\"avalon\"}] ) \n\n# 改变用户的密码\ndb.changeUserPassword(\"root\", \"secretpassword\") \n# 删除用户\ndb.dropUser(\"siteUserAdmin\") \n# 列出所有用户\ndb.system.users.find() \n# 改变用户的权限\ndb.grantRolesToUser('aaron', ['readWriteAnyDatabase']);\n\n```\n\n## 其它\n\n或者不要像上面那样，那么麻烦，如果你有一台vps主机，可以参考如果安装mongodb在那台vps上。可以见[[os_linux|OS Linux]]中如果安装Mongodb。\n\n## 从源码编译\n\n\u003e 截至至3.17.3版本，使用Python3.9\n\n从 https://github.com/ynput/OpenPype 仓库的Readme中参考\n\n1. 首先Clone原仓库使用`git clone --recurse-submodules git@github.com:ynput/OpenPype.git`\n\n2. 然后打开一个PowerShell，进入到仓库的文件夹里，执行`.\\tools\\create_env.ps1` 创建虚拟venv环境\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.2lyughc8ikm0.webp\" alt=\"image\" /\u003e\n\n3. 再执行`.\\tools\\fetch_thirdparty_libs.ps1`下载第三方依赖库\n4. 执行`.\\tools\\build.ps1`去构建Pype，执行成功后在build文件中就会有`openpype_gui.exe`和`openpype_console.exe`这两个程序\n\n\n## 配置Pype\n\n可以使用root账号，登录Mongodb数据库，然后执行\n\n```\n# 创建一个管理员账号\ndb.createUser( { user: \"aaron\", pwd: \"\u003cpassword\u003e\", roles: [ { role: \"userAdminAnyDatabase\", db: \"admin\" } ] } )\n\n# 给账号设置权限 (openpype只读，这是一些系统设置，avalon需要可读可写)\ndb.grantRolesToUser( \"aaron\", [{role:\"read\", db:\"openpype\"}, {role:\"readWrite\", db:\"avalon\"}] )\n```\n\n然后就可以在![image](https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.1pej7ki22chs.png)中选择 Admin -\u003e Studio Settings -\u003e Module (Kistu) 中填入你的cgwire的地址与端口，例如我填写的是`http://localhost:25061` 然后点击保存设置\n\n此时再去执行 (一个是Module用于同步Kitsu的项目数据，一个是启动OpenPype) \n\n\u003e 我这里是Windows系统下\n\n```bash\n@echo off\n\nset \"KITSU_LOGIN=lilong999000@gmail.com\"\nset \"KITSU_PWD=\u003cpassword\u003e\"\nset OPENPYPE_MONGO=mongodb://aaron:\u003cpassword\u003e@localhost:27018\nC:\\data\\exec\\openpype\\build\\openpype_console.exe module kitsu sync-service\n\npause\n```\n\n```bash\n@echo off\n\nset OPENPYPE_MONGO=mongodb://aaron:\u003cpassword\u003e@localhost:27018\nC:\\data\\exec\\openpype\\build\\openpype_console.exe\n\npause\n```\n\n\nDCC 的配置 在 Admin -\u003e Studio Settings -\u003e Applications中，可以选择启用哪些DCC，也可以在这里面配置环境变量等等![image](https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.39v4jdcijps0.webp) 例如这里是我配置的关于Houdini的一个，配置了RenderMan渲染插件~ 如果Pype没有列出你的DCC版本也可以在下方的Key和Label中自己去配置一个~\n\n\n有了这些全部的设置，就可以尽情去捣鼓了~\n\n## 从仓库下载\n\ne.g. OpenPype · GitHub https://github.com/ynput/OpenPype/releases/tag/3.17.3 下载下来的版本运行与从源码构建的版本是一致的。\n\n\n## 其它\n\n### Cgwire的导出与导入\n\n如果需要迁移整个cgwire，因为是在docker中创建的容器，所以可以将整个容器import和export\n\n\u003e [!WARNING] 这样运行docker命令后，默认数据是存储到docker的volume中，我们可以导出当前的docker的数据到本地，再导入，这样volume就被取消了，虽然不知这样是否安全\n\n当在第一次创建cgwire后，可以立马执行\n`docker export cgwire-run \u003e cgwire-run-export.tar` \n再执行\n`docker import cgwire-run-export.tar cgwire-run`，\n\n这个时候再去导出和导入这个容器数据就也在其中了\n`docker export cgwire-run \u003e cgwire-run-export.tar`\n再执行\n`docker import cgwire-run-export.tar cgwire-run`\n\n最后执行\n`docker run --user=root --env=PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin --env=DEBIAN_FRONTEND=noninteractive --env=PG_VERSION=12 --env=DB_USERNAME=root --env=DB_HOST=  --workdir=/opt/zou -p 25061:80 --restart=no --runtime=runc -d --name cgwire-run cgwire-run /opt/zou/start_zou.sh`\n\n\u003e 查看command的命令`docker ps -a --no-trunc`,上面的启动命令就是用这个命令查询出来的command，以及其它的包括环境变量的配置是在docker里copy docker run\n\n* 但这样不好的是，丢失了元数据以及image的数据\n\n# Cgwire\n\n[Installation | Kitsu Documentation](https://kitsu.cg-wire.com/installation/)\n\n虽然Pype中也有Project Manage，但是我们可以扩展使用Cgwire去进行项目的管理与创建。\n\n执行 `docker run -d -p 25061:80 --name cgwire-run cgwire/cgwire:0.17.37` 去开启cgwire服务，这里设置的是为防止污染80端口而改为25061端口，版本为截至现在最新的0.17.37，这里可以改为latest选择最新版本\n\n成功后在浏览器打开localhost:25061，初次登录用户名与密码是\n\n```\n- login: admin@example.com\n- password: mysecretpassword\n```\n\n进去之后就可以创建用户，创建部门，资产类型等等，这里我创建了一个名为Discover的项目。\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.5q4k52oe0q80.webp\" alt=\"image\" /\u003e\n","lastmodified":"2024-06-05T09:48:57.367223771Z","tags":[]},"/adv/color_managment_workflow":{"title":"Color Managment Workflow","content":"\n# Color management workflow (CMW) - (sRGB ACES)\n\n  \n\n## Introduce\n\n  \n\n\u003e Reference:\n\n\u003e   https://chrisbrejon.com/cg-cinematography/chapter-1-color-management/#rendering-and-display-spaces\n\n\u003e   https://chrisbrejon.com/cg-cinematography/chapter-1-5-academy-color-encoding-system-aces/\n\n  \n\n* Eyes vs\n\n  \n\n![eyes_vs.png](https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/eyes_vs.3bb7om2f6dm0.webp)\n\n  \n\n* All light will travel in a straight line unless something gets in the way and does one of the following:\n\n  * Reflect it (like a mirror).\n\n  * Refract it (bend it like a prism).\n\n  * Disperse it (like gas molecules in the atmosphere).\n\n* Light is the source of all colors. The importance of light in our lives is truly astounding. When a lemon appears yellow, it is because its surface reflects yellow, not because it is actually yellow. This used to confuse me, but pigments appear to have color because they selectively reflect and absorb certain wavelengths of visible light.\n\n  \n\n* OETF and EOTF\n\n  \n\n![OETF-EOTF.png](https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/OETF-EOTF.223b38l9a15s.webp)\n\n  \n\n* 1976 Recap\n\n![1976-recap.png](https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/1976-recap.3yidv44zob60.webp)\n\n  \n\n\u003e Standard\n\n  \n\n![Rec2020.png](https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/Rec2020.1muv35u8nsrk.webp)\n\n  \n\n* sRGB for internet, Windows and camera photos.\n\n* Rec. 709 has the same primaries than sRGB but differs on transfer function/gamma. This is because the target use of Rec.709 is video where it’s supposed to be viewed on a dim surround.\n\n* DCI-P3 for cinema projectors.\n\n* Rec. 2020, also called UHD TV, the future of colorimetry.\n\n* AdobeRGB for printing projects.\n\n  \n\n![image](https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.9x8sahkeer4.webp)\n\n  \n\n* Scene Linear Workflow\n\n  \n\n![image](https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.2nk90mqrxfs0.webp)\n\n  \n\n## sRGB Primary Conversion\n\n  \n\n![image](https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.68lvpciv6ew0.webp)\n\n  \n\n## To plot the gamut\n\n  \n\n![image](https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.6qpt6umbqp40.webp)\n\n  \n\n## Reference\n\n1. http://www.banjiajia.com/posts/82801\n\n  \n\n## Linear Workflow and ACEScg\n\n  \n\nIDT = Input Device Transform (The content of the conversion performed in ACEScg)\n\n  \n\nODT = Output Device Transform (The result of adapting to the display)\n\n  \n\nRRT = Rendering Reference Transformation\n\n  \n\n![gamma.png](https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/gamma.6viws34kg1w0.webp)\n\n  \n\n![ACEScg.png](https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/ACEScg.70egzk1rhkk0.webp)\n\n  \n\n![gamma_math.png](https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/gamma_math.624te0mzfb80.webp)\n\n  \n\n## ACES Color Space\n\n  \n\n* ACES 2065-1 is scene linear with APO primaries. It remains the core of ACES and is the only interchange and archival format (for DCDM).\n\n* ACEScg is scene linear with AP1 primaries (the smaller “working” color space for Computer Graphics).\n\n* ACEScc, ACEScct and ACESproxy all have AP1 primaries and their own specified logarithmic transfer functions.\n\n  \n\n## Transformation\n\n  \n\n```c\n\n TYPE                   GAMMA                   IDT\n\n  \n\ndiffuse (COLOR)      sRGB (8bit)            Utility_sRGB_Texture\n\n  \n\nroughtness(DATA)     Linear (16/32 bit)     Utility_Raw\n\nHDRi (COLOR)         Linear (16/32 bit)     Utility_Linear_sRGB\n\n```\n\n  \n\n### RGB COLOURSPACE TRANSFORMATION MATRIX\n\n  \n\nhttps://www.colour-science.org:8010/apps/rgb_colourspace_transformation_matrix?input-colourspace=sRGB\u0026output-colourspace=ACEScg\u0026chromatic-adaptation-transform=Sharp\u0026formatter=str\u0026decimals=6\n\n  \n\n* sRGB -\u003e ACEScg\n\n  \n\n```c\n\n// CHROMATIC ADAPTATION TRANSFORM (Sharp)\n\n[[ 0.614070  0.334950  0.051068]\n\n [ 0.070530  0.916420  0.013019]\n\n [ 0.020286  0.108171  0.871491]]\n\n```\n\n  \n\n## Schema\n\n  \n\n![aces_schema.png](https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/aces_schema.6pqyd52iopk0.webp)\n\n  \n\n1. On the left are files on your computer, textured, HDR, etc., from the Web, Photoshop, whatever. These files are sRGB and are standard files available to most users\n\n2. In the middle is 3D software, such as Maya, which integrates scenes for rendering, and Nuke, which can do some compositing. The color space is ACEScg\n\n3. The right side is where to view the image, the screen is sRGB, I can't save the image directly in Maya or Nuke, otherwise the resulting image will have problems, which is why I have to convert the ACEScg image to sRGB image.\n\n  \n\n## Versus\n\n  \n\n![sRGBvsACEScg.gif](https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/sRGBvsACEScg.7iabt3cfpww0.gif)\n\n  \n\n## Definition\n\n  \n\n![aces_def.png](https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/aces_def.5zu0ajz36v00.webp)\n\n  \n\n* Color space is defined by 3 things:\n\n  * Primaries: Refers to the three vertices of the triangle shown in schema 1 (chessboard), this triangle is called gamut, note that it is not gamma.\n\n  * Whitepoint: Refers to the space defined as the whitest in the triangle, and moving this point can make the picture warmer or cooler.\n\n  * Transfer functions: This is gamma, and in schema 2, the red line is sRGB and the blue line is Linear\n\n  \n\n* Whitepoint\n\n  * RGB color Spaces can have different white dots, depending on their context usage. This can be a creative option:\n\n    * If you want to simulate the light quality of a standard observation room, choose the D50. Selecting a warm color temperature such as D50 will produce a warm white.\n\n    * If you want to simulate midday daylight quality, choose D65. Higher temperature Settings (such as D65) will produce a slightly cooler white color.\n\n    * If you prefer cool daylight, choose D75.\n\n  \n\n## Limitations\n\n  \n\n### Hue skews and Gamut Clipping\n\n  \n\n#### Abney effect\n\n  \n\nThe Abney effect or the purity-on-hue effect describes the perceived hue shift that occurs when white light is added to a monochromatic light source\n\n  \n\n![image](https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.3uuu50vagg80.webp)\n\n  \n\nAn illustration of the Abney effect. The RGB primaries on a typical display are not monochromatic, making the effect weaker than in the usual experimental setup. However, it is usually still possible to see the effect in the blue example, with the middle shades appearing to be purple.\n\n  \n\n### The ODTs clip values\n\n  \n\n![image](https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.1xyml4cw7xvk.webp)\n\n  \n\n### Gamut mapping\n\n  \n\n![image](https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.7cej5drk1cg0.webp)\n\n  \n\nInteresting hue skews with the ACES ODT.\n\n  \n\n### Gamut Compress\n\n  \n\n* https://github.com/jedypod/gamut-compress\n\n  \n\nGamut-compress is a tool which allows you to compress highly chromatic camera source colorimetry into a smaller gamut.\n\n  \n\n## Misc\n\n  \n\n### Delta E\n\n  \n\n* The Delta E value represents the difference between Display color and the original color standard for input content. The lower the Delta E value, the higher the accuracy, and the higher the Delta E value, the more obvious the color difference.\n\n  * \u003c= 1.0: The human eye cannot perceive the difference\n\n  * 1-2: The difference can be perceived by careful observation\n\n  * 2-10: The difference can be perceived at a casual glance\n\n  * 11-49: Colors are more similar than opposite\n\n  * 100: The color is completely distorted\n\n  \n\n### HDR\n\n  \n\n* 2084 - PQ 10 Curve\n\n* 2086 - HDR 10\n\n* 2094 -\n\n* Screen Device - DELL U2720QM\n\n  * Delta E\u003c2, 99% sRGB, HDR 400, 95% DCI-P3, 99% REC709\n\n  \n\n### Chromatic Adaptation\n\n  \n\nWhen looking at a bright color for a long time, people will feel the brightness of the color slowly reduce, this phenomenon is visual color adaptation. The best time for color adaptation is about 5 ~ 10s. People's first impression of the light source color, that is, the initial color feeling, gradually weakens with the increase of the observation time of the object, so when observing color, pay attention to capturing the first impression and the initial color feeling.","lastmodified":"2024-06-05T09:48:57.367223771Z","tags":[]},"/adv/complex_transformation":{"title":"Complex transformation","content":"\n**变换复合**\n\n变换是可以复合的，考虑一组数\n\n$$\\left ( \\begin{matrix} -1 \\\\ 1 \\end{matrix} \\right ) 和 \\left ( \\begin{matrix} 2 \\\\ 2 \\end{matrix} \\right )$$\n\n其中$\\left ( \\begin{matrix} 2 \\\\ 2 \\end{matrix} \\right )$我们知道是由$\\left ( \\begin{matrix} 2 \u0026 0 \\\\ 0 \u0026 2 \\end{matrix} \\right )$变换而来，而$\\left ( \\begin{matrix} -1 \\\\ 1 \\end{matrix} \\right )$是由$\\left ( \\begin{matrix} -1 \u0026 0 \\\\ 0 \u0026 1 \\end{matrix} \\right )$变换而来，我们是可以将这两个变换组合到一起的,组合到一起最终就是\n\n$$\\left ( \\begin{matrix} -1 \u0026 0 \\\\ 0 \u0026 1 \\end{matrix} \\right )\\left ( \\begin{matrix} 2 \u0026 0 \\\\ 0 \u0026 2 \\end{matrix} \\right )$$\n\n其中变换计算的顺序是从右到左的，如果交换顺序，结果不一定相等；其中后者这个变换如之前一样，在图像上来看，就是缩放，那么前者呢？就是$i$帽从$(1,0)$变到了$(-1,0)$去，$j$帽保持不变，这种变换就像我们平常看书时翻页一样，叫做**Reflection反射**最终结果就是从坐标基(①)开始先作用缩放(②)最后作用反射(③)\n\u003cdiv align=center\u003e\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/mathematics/手绘复合变换.7kd8flleofs.webp\" width=\"790\"\u003e\u003c/div\u003e\n","lastmodified":"2024-06-05T09:48:57.367223771Z","tags":[]},"/adv/computational_geometry":{"title":"Computational Geometry","content":"\nPolygon Triangulation\n\n[[polygon_triangulation]]","lastmodified":"2024-06-05T09:48:57.367223771Z","tags":[]},"/adv/computer_graphics":{"title":"Computer Graphics","content":"","lastmodified":"2024-06-05T09:48:57.367223771Z","tags":[]},"/adv/computer_science":{"title":"Computer Science","content":"\n[[computational_geometry]]\n\n[[computer_graphics]]","lastmodified":"2024-06-05T09:48:57.367223771Z","tags":[]},"/adv/coordinate_basis_vector_and_transformation":{"title":"Coordinate basis vector and transformation","content":"\n**坐标基矢**\n\n坐标基矢是我们人为定义的事物；一维情形下就是数轴上$0$到$1$之间那个距离，记为\n\n$$(1,)$$\n\n二维有两个坐标轴，分别为\n\n$$(1,0)$$\n\n叫做$i$帽，符号记为$\\hat{i}$和\n\n$$(0,1)$$\n\n叫做$j$帽，符号记为 $\\hat{j}$ \n\n\u003cdiv align=center\u003e\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/mathematics/手绘坐标基.2pvxzz9z2es0.webp\" width=\"790\"\u003e\u003c/div\u003e\n\n刚才我们未引入坐标基矢，引入坐标基矢后，现在就有了一种统一的形式，上述例子的完整情况为\n\n$$\\left ( \\begin{matrix} 1x+0y=2 \\\\ 0x+1y=2 \\end{matrix} \\right.$$ \n\n矩阵形式\n\n$$\\left ( \\begin{matrix} 1 \u0026 0 \\\\ 0 \u0026 1 \\end{matrix} \\right ) \\left ( \\begin{matrix} x \\\\ y \\end{matrix} \\right ) = \\left ( \\begin{matrix} 2 \\\\ 2 \\end{matrix} \\right ) \\ \\ (x=2,y=2)$$\n\n其实我们可以看到，我们想要去到的那个点$(2,2)$，本质上就是我们定义的坐标基矢(i帽和j帽)\u003cspan style=\"color:green\"\u003e\"去到了\"\u003c/span\u003e点$(2,2)$,我们把这种\u003cspan style=\"color:green\"\u003e\"去到了\"\u003c/span\u003e哪里，称为**变换**\n$x=2, y=2$是满足方程的一组数，也就是**坐标基矢变化的量** 这样，每当我们看到像\n$$\\left ( \\begin{matrix} 2 \\\\ 2 \\end{matrix} \\right )$$\n都应想起是笛卡尔坐标系中的两个**坐标基矢的变换**, 像\n\n$$\\left ( \\begin{matrix} 1 \\\\ 1 \\end{matrix} \\right )$$\n\n可以看做\n\n$$\\left ( \\begin{matrix} 1 \u0026 0 \\\\ 0 \u0026 1 \\end{matrix} \\right ) \\left ( \\begin{matrix} x \\\\ y \\end{matrix} \\right ) = \\left ( \\begin{matrix} 1 \\\\ 1 \\end{matrix} \\right ) \\ \\ (x=1,y=1)$$\n\n只不过这两个坐标基没有产生任何的变化; 再如\n$$\\left ( \\begin{matrix} 2 \\\\ 2 \\end{matrix} \\right )$$\n可以看做\n\n$$\\left ( \\begin{matrix} 2 \u0026 0 \\\\ 0 \u0026 2 \\end{matrix} \\right )$$\n\n为了便于描述，我们还通常给我们要去的$(2,2)$那个点称作**向量**，不仅有方向还有箭头，如$\\vec{a}=(2,2),\\quad a_1=2, \\quad a_2=2$这是在二维的情形下\n","lastmodified":"2024-06-05T09:48:57.367223771Z","tags":[]},"/adv/coordinate_system":{"title":"Coordinate System","content":"\n在几何学中[[mathematics_geometry]]，坐标系是一个使用一个或多个数或坐标来唯一确定流形（如欧几里得空间）上的点或其他几何元素的位置的系统。\n\n\n[[barycentric_coordinates]]\n\n[[equation_and_coordinate_axis]]\n\n[[homogenous_coordinates]]","lastmodified":"2024-06-05T09:48:57.367223771Z","tags":[]},"/adv/cosine_law":{"title":"Cosine law","content":"\n余弦定理是描述**三角形中三边长度与一个角的余弦值关系**的数学定理，是**勾股定理在一般三角形情形下的推广**，勾股定理是余弦定理的特例\u003cdiv align=center\u003e\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/mathematics/Law-of-Cosines.46vagpeucam0.webp\" width=\"790\"\u003e\u003c/div\u003e\n\n$$\\begin{array}{l}a^2=b^2+c^2-2bc\\ cos A \\\\ b^2=a^2+c^2-2ac\\ cos B \\\\ c^2=a^2+b^2-2ab\\ cos C \\\\ cos A = \\frac{-a^2+b^2+c^2}{2bc} \\\\ cos B = \\frac{a^2-b^2+c^2}{2ac} \\\\ cos C = \\frac{a^2+b^2-c^2}{2ab} \\\\ \\end{array}$$\n","lastmodified":"2024-06-05T09:48:57.367223771Z","tags":["basis"]},"/adv/cross_product":{"title":"Cross product","content":"\n叉乘只在三维中有定义，\u003cspan style=\"color:purple\"\u003e两个向量的叉乘可以产生一个与这两个向量都垂直的新向量\u003c/span\u003e。例如计算一个物体表面的法向量\n\n\u003cdiv align=center\u003e\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/mathematics/叉乘.1eb9eyex849s.webp\" width=\"290\"\u003e\u003c/div\u003e\n\n**叉乘定义**\n\n$${\\displaystyle \\mathbf {a} \\times \\mathbf {b}=\\left\\|\\mathbf {a} \\right\\|\\left\\|\\mathbf {b} \\right\\|\\sin(\\theta)\\mathbf{n}}$$\n\n其中$\\theta$表示$\\mathbf{a}$向量和$\\mathbf{b}$向量之间的夹角，而 ${\\displaystyle \\mathbf {n} }$则是一个与${\\displaystyle \\mathbf {a} }$、${\\displaystyle \\mathbf {b} }$所构成的平面垂直的单位向量，方向由右手定则决定 (https://zh.wikipedia.org/wiki/%E5%8F%89%E7%A7%AF)\n\n**模长计算**\n\n$${\\displaystyle \\left\\|\\mathbf {a} \\times \\mathbf {b} \\right\\|=\\left\\|\\mathbf {a} \\right\\|\\left\\|\\mathbf {b} \\right\\|\\sin(\\theta)}$$\n\n\u003cspan style=\"color:purple\"\u003e模长等于以两个向量为边的平行四边形的面积\u003c/span\u003e\n\n**叉乘计算**\n\n**Part1**\n叉乘计算规则：如果两个向量一样，叉乘结果为$0$\n通过引入单位向量，向量就可以转化成代数形式，例如\n\n$$a=a_1i+a_2j+a_3k, \\ \\ b=b_1i+b_2j+b_3k$$\n\n$i，j，k$是三个相互垂直的向量。它们刚好可以构成一个坐标系。这三个向量就是\n\n$$i=(1,0,0), \\ j=(0,1,0), \\ k=(0,0,1)$$\n\n**Part2**\n\n$$\\mathbf{a}=(a_1,a_2,a_3),\\mathbf{b}=(b_1,b_2,b_3)$$\n\n分别为两三维向量，叉乘为\n\n$$\\mathbf{a}\\times \\mathbf{b}=\\ \u003ca_2b_3-a_3b_2,\\ \\ a_3b_1-a_1b_3,\\ \\ a_1b_2-a_2b_1\u003e$$\n\n也可以写成**伪行列式**的形式[[equation_and_determinant]]\n\n$$a\\times b = \\left ( \\begin{matrix} \\mathbf{i} \u0026 \\mathbf{j} \u0026 \\mathbf{k} \\\\ a_1 \u0026 a_2 \u0026 a_3 \\\\ b_1 \u0026 b_2 \u0026 b_3 \\end{matrix} \\right ) = \\mathbf{i}(a_2b_3-a_3b_2) + \\mathbf{j}(a_3b_1-a_1b_3) + \\mathbf{k}(a_1b_2-a_2b_1)$$\n\n$$\\mathbf{a}\\times \\mathbf{b} = \\left ( \\begin{matrix} a_2b_3-a_3b_2 \\\\ a_3b_1-a_1b_3 \\\\ a_1b_2-a_2b_1 \\end{matrix} \\right )$$\n\n**Part3**\n先以二维为例，假设有一个向量$\\mathbf{a}=(a_1,a_2)$然后我们引入反对称矩阵\n\n$$\\mathbf{H} = \\left ( \\begin{matrix} 0\u0026-1 \\\\ 1\u00260 \\end{matrix}\\right )$$\n\n然后计算\n\n$$\\mathbf{a}\\mathbf{H}\\mathbf{a}^T$$\n\n得结果为\n\n$$\\left ( \\begin{matrix} a_1\u0026a_2 \\end{matrix} \\right )  \\left ( \\begin{matrix} 0\u0026-1 \\\\ 1\u00260 \\end{matrix} \\right )  \\left ( \\begin{matrix} a_1 \\\\ a_2 \\end{matrix} \\right ) = \\left ( \\begin{matrix} a_1\u0026a_2 \\end{matrix} \\right )  \\left ( \\begin{matrix} -a_2 \\\\ a_1 \\end{matrix} \\right ) = \\left ( \\begin{matrix} a_1(-a_2) + a_2a_1 \\end{matrix} \\right ) = 0$$\n\n\u003cdiv align=center\u003e\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/mathematics/反对称矩阵比较.190iia091ml.webp\"\u003e\u003c/div\u003e\u003cdiv align=center\u003e\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/mathematics/反对称变换-图解.6sycqrfdsxk0.webp\"\u003e\u003c/div\u003e\n\n由叉乘的规则我们有\n\n$$a\\times a = [a]_\\times * a = 0$$\n\n其中$[a]_\\times$表示某个叉乘矩阵，然后作用到了$a$得结果为$0$,通过对比，我们可以发现，$\\mathbf{a}\\mathbf{H}$就是向量a的叉乘矩阵，当$\\mathbf{a}$为列向量时，$\\mathbf{a}^T\\mathbf{H}$为a向量的叉乘矩阵，如果向量$\\mathbf{a} = (a_1,a_2,a_3)$为三维向量，那么H为\n\n$$\\mathbf{H} = \\left ( \\begin{matrix} H_1 \\\\ H_2 \\\\ H_3 \\end{matrix}\\right ) \\ \\mathbf{H_1} = \\left ( \\begin{matrix} 0\u00260\u00260 \\\\ 0\u00260\u0026\\color{green}{-1} \\\\ 0\u0026\\color{green}{1}\u00260 \\end{matrix}\\right ) \\ \\mathbf{H_2} = \\left ( \\begin{matrix} 0\u00260\u0026\\color{blue}{1} \\\\ 0\u00260\u00260 \\\\ \\color{blue}{-1}\u00260\u00260 \\end{matrix}\\right ) \\ \\mathbf{H_3} = \\left ( \\begin{matrix} 0\u0026\\color{red}{-1}\u00260 \\\\ \\color{red}{1}\u00260\u00260 \\\\ 0\u00260\u00260 \\end{matrix}\\right )$$\n\n最后将变换合并起来就是\n\n$$\\mathbf{H} = \\left ( \\begin{matrix} 0\u0026\\color{red}{-1}\u0026\\color{blue}{1} \\\\ \\color{red}{1}\u00260\u0026\\color{green}{-1} \\\\ \\color{blue}{-1}\u0026\\color{green}{1}\u00260 \\end{matrix}\\right )$$\n\n则最终有\n\n$$\\mathbf{a}\\mathbf{H} = \\left ( \\begin{matrix} 0\u0026\\color{red}{-a_3}\u0026\\color{blue}{a_2} \\\\ \\color{red}{a_3}\u00260\u0026\\color{green}{-a_1} \\\\ \\color{blue}{-a_2}\u0026\\color{green}{a_1}\u00260 \\end{matrix}\\right )$$\n\n$$\\mathbf{a}\\times \\mathbf{b} = \\mathbf{A}*\\mathbf{b} = \\left ( \\begin{matrix} 0\u0026-a_3\u0026a_2 \\\\ a_3\u00260\u0026-a_1 \\\\ -a_2\u0026a_1\u00260 \\end{matrix} \\right )\\left ( \\begin{matrix} b_1 \\\\ b_2 \\\\ b_3 \\end{matrix} \\right )$$\n\n**Part4**\n根据内积和外积的定义 [[dot_product]]\n\n$$(\\mathbf{a}\\times \\mathbf{b})\\cdot \\mathbf{a} =\u003ca_2b_3-a_3b_2,\\ \\ a_3b_1-a_1b_3,\\ \\ a_1b_2-a_2b_1\u003e \\cdot \\mathbf{a} \\\\ =\\ a_1(a_2b_3-a_3b_2) + a_2(a_3b_1-a_1b_3) + a_3(a_1b_2-a_2b_1) \\\\ $$ \n\n$$= \\color{red}{a_1a_2b_3}-\\color{orange}{a_1a_3b_2}+\\color{blue}{a_2a_3b_1}-\\color{red}{a_2a_1b_3}+\\color{orange}{a_3a_1b_2}-\\color{blue}{a_3a_2b_1} = 0$$\n\n假设有两个不共线的向量，分别为$(a_1,a_2,a_3),(b_1,b_2,b_3)$,我们设我们要找的垂直于这两个向量的向量为$(x,y,z)$，那么我们则有如下方程\n\n$$\\left ( \\begin{matrix} a_1\u0026a_2\u0026a_3 \\\\ b_1\u0026b_2\u0026b_3 \\end{matrix} \\right )\\left ( \\begin{matrix} x \\\\ y \\\\ z \\end{matrix} \\right ) = \\left ( \\begin{matrix} 0 \\\\ 0 \\end{matrix} \\right ) =0$$ \n\n$$\\Rightarrow \\left ( \\begin{matrix} a_1x + a_2y + a_3z=0 \\\\ b_1x + b_2y + b_3z=0 \\end{matrix} \\right.$$ \n\nThere is a footnote here [^1]\n\n(这里可以看做向量$(a_1,a_2,a_3)$和$(b_1,b_2,b_3)$分别与要求向量$(x,y,z)$的点乘，如果垂直点乘结果为$0$) 令式子中的$z=1$,则我们有\n\n$$\\left ( \\begin{matrix} a_1x+a_2y=-a_3 \\quad (1) \\\\ b_1x+b_2y=-b_3 \\quad (2) \\end{matrix}\\right .$$\n\n因为我们的方程组的秩小于未知数的个数，这里不妨设$z=1$然后再求解)\n然后解二元一次方程，另$(1)\\times \\frac{b_1}{a_1}-(2)$得\n\n$$y=\\frac{a_1b_3-a_3b_1}{a_2b_1-a_1b_2}$$\n\n与\n\n$$x=\\frac{a_3b_2-a_2b_3}{a_2b_1-a_1b_2}$$\n\n因此所求向量为\n\n$$(\\frac{a_3b_2-a_2b_3}{a_2b_1-a_1b_2}, \\ \\frac{a_1b_3-a_3b_1}{a_2b_1-a_1b_2}, \\ 1)$$ \n\n改变一下形式我们有\n\n$$(a_3b_2-a_2b_3, \\ a_1b_3-a_3b_1, \\ a_2b_1-a_1b_2)$$\n\n这个形式与之前的形式相差了一个$-$号，还有另外一种解法使用$(2)\\times \\frac{a_1}{b_1} - (1)$所得的结果的形式与之前的形式相同\n\n补充(https://github.com/Krasjet/quaternion/blob/master/quaternion.pdf)\n * 叉乘的定义在历史顺序上来说是从Graßmann积中导出\n\n[^1]: For math render, use `\\begin{cases}` instead of `\\left {` that doesn't supported. Or use `\\left (` with end of `\\right.`","lastmodified":"2024-06-05T09:48:57.367223771Z","tags":[]},"/adv/digital_garden":{"title":"Digital Garden","content":"\n# Digital Garden\n\n## 题记\n\n最早有一天是想改变自己的做笔记的方式，思考了半晚上，最后得到了个结论就是，笔记应当记成图，而不是树，遂第二天去查资料，看到这篇，顿时找到自己想要的~\n\n[玩转 Obsidian 04：为什么推荐使用 Obsidian 做知识管理 - 少数派](https://sspai.com/post/67339)\n\n笔记可以这样做，之前我们一般是使用树的层级结构去记笔记，但我们知道知识与知识之间一般是有联系的，知识与知识之间应该是一张图，通过相互之间的联系进行关联。\n\n软件上使用Obsidian，但我们还想发布到网上，可以使用社区插件Digital Garden进行设置和发布，再使用免费的vecel进行部署。\n\n## 安装\n\n\n在[^1]中的文档写的非常详细，每一步，里面需要你知道一些关于Github的与Vecel的配置。\n\n## 其它\n\n1. https://github.com/oleeskild/Obsidian-Digital-Garden 社区插件的地址\n\n2. https://github.com/oleeskild/digitalgarden 插件的配套网页模板，Vecel就是去构建它然后再部署。e.g. 我的笔记网站 https://github.com/aaronmack/knowledge-garden 就是使用的这个模板。\n\n3. https://github.com/jackyzha0/quartz 还有个这个，可以self-hosting或使用Github-pages，也有Vevel的部署方式。两者选其一就可以了，建议就用那个插件，简单方便。\n\n## 发布你的笔记\n\n在你的笔记中，根据文档 https://dg-docs.ole.dev/getting-started/02-commands 的介绍，你需要添加dg-publish属性并且值为on，这样这个插件就会识别到你想要发布的内容了。\n\n然后再在Obsdian的左侧栏有个小叶子，点击那个就可以一键发布。\n\n\n[^1]: https://dg-docs.ole.dev/getting-started/01-getting-started/","lastmodified":"2024-06-05T09:48:57.367223771Z","tags":[]},"/adv/dot_product":{"title":"Dot product","content":"\n点乘我们通常用于衡量两个向量的方向差，或者衡量\"做功\"的大小，通常我们将它们单位化，然后再计算，这样取值范围就在$-1$到$1$之间，例如两个向量共向，那么值为$1$，反向则为$-1$，垂直为$0$\n\u003cdiv align=center\u003e\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/mathematics/点乘.78lv308m6p80.webp\" width=\"290\"\u003e\u003c/div\u003e\n\n**代数定义**\n\n两个向量${\\displaystyle {\\vec {a}}=[a_{1},a_{2},\\cdots ,a_{n}]}$和${\\displaystyle {\\vec {b}}=[b_{1},b_{2},\\cdots ,b_{n}]}$的点积定义为\n\n$$\\begin{aligned} \\vec{a}\\cdot \\vec{b} = \\sum_{i=1}^{n} a_ib_i \\end{aligned}$$\n\n其中$n$是维度，在2维情况下就是$a_1b_1+a_2b_2$,例如\n\n$$\\left ( \\begin{matrix} 5_{(a_1)} \u0026 6_{(b_1)} \\\\ 9_{(a_2)} \u0026 4_{(b_2)} \\end{matrix} \\right )$$\n\n就是$5\\times 6+9\\times 4$ （这里需要注意与行列式的计算是不一样的，行列式是$5\\times 4-6\\times 9$）**这里点乘的计算和我们在转置那里讲到的投影是一回事**\n\n**几何定义**\n在欧几里得空间中，点积可以直观地定义为\n\n$${\\displaystyle {\\vec {a}}\\cdot {\\vec {b}}=|{\\vec {a}}|\\,|{\\vec {b}}|\\cos \\theta \\quad }$$\n\n其中$\\theta$为两向量之间的夹角\n\n**推导**\n\n两个定义之间是等价的并可以互相推出\n根据[[cosine_law]]余弦定理则我们有\n\n$$|| a-b ||^2 = ||a||^2+||b||^2-2||a|| \\quad ||b||cos\\alpha$$\n\n展开得\n\n$$\\begin{aligned} \\sum_{i=1}^{n} (a_i-b_i)^2 = \\sum_{n}^{i=1} a_i^2+\\sum_{n=1}^{n} b_i^2-2 ||a|| \\quad ||b||cos \\alpha \\end{aligned}$$\n\nHere[^1]\n\n在二维情况下展开有\n\n$$\\begin{aligned} (a_1^2+b_1^2-2a_1b_1)+(a_2^2+b_2^2-2a_2b_2) = a_1^2+a_2^2 + b_1^2+b_2^2 - 2||a|| \\quad ||b||cos\\alpha \\end{aligned}$$\n\n消去所有的$a_1^2,\\quad b_1^2$整理后有\n\n$$-2a_1b_1 + (-2a_2b_2) =  - 2||a|| \\quad ||b||cos\\alpha$$\n\n两边再同除以$-2$有\n\n$$a_1b_1 + (a_2b_2) = ||a|| \\quad ||b||cos\\alpha = \\vec{a}\\cdot \\vec{b}$$ \n\n同样可以推广到$n$维 □\n\n**点乘在投影上的应用**\u003cdiv align=center\u003e\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/mathematics/DotProductForProjection.20f8sxq8tejk.webp\" width=\"390\"\u003e\u003c/div\u003e\n\n计算出向量$\\vec{b}$在$\\vec{a}$上的投影值,则有$||\\vec{b}_{\\perp}|| = ||\\vec{b}||cos\\theta$ \n\n[^1]: when display `$$xxx$$` not rendered. cause of have things like `\\sum^{n}_{i=1}`, must replace with `\\sum^{n}\\_{i=1}` 2. Or use `_` first then use `^` second. e.g. `\\sum_{i=1}^{n}`","lastmodified":"2024-06-05T09:48:57.367223771Z","tags":[]},"/adv/dual_vector":{"title":"Dual vector","content":"\n给定一个**矢量**,如果存在这样一个**映射**,它把给定的矢量映射为一个实数,就说这个映射是**对偶矢量**。例如一个$n$维行向量\n\n$$(a_1,a_2\\cdots a_n)$$\n\n它既可以理解为**行向量**,也可理解为某种**映射**,该映射把给定的$n$维**列向量**\n\n$$\\left ( \\begin{matrix} b_1 \\\\ b_2 \\\\ \\cdots \\\\ b_n \\end{matrix}\\right )$$\n\n(矢量)映射为实数$k$, \n\n$$k=a_1b_1+a_2b_2+\\cdots+a_nb_n$$\n\n即矩阵的乘积。则这个映射满足对偶矢量的定义,因此行向量$(a_1,a_2\\cdots a_n)$是矢量$\\left ( \\begin{matrix} b_1 \\\\ b_2 \\\\ \\cdots \\\\ b_n \\end{matrix}\\right )$的对偶矢量。","lastmodified":"2024-06-05T09:48:57.367223771Z","tags":[]},"/adv/ear_clipping_triangulation":{"title":"Ear Clipping Triangulation","content":"\n\n","lastmodified":"2024-06-05T09:48:57.367223771Z","tags":[]},"/adv/equation_and_coordinate_axis":{"title":"Equation and coordinate axis","content":"\n方程中的**等号**是问题的核心，**方程（英文：equation）是表示两个数学式（如两个数、函数、量、运算）之间相等关系的一种等式，而函数的定义是在非空数集之间的映射称为函数，要注意区分**\n\n\u003cdiv align=center\u003e\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/mathematics/手绘一维坐标轴.2fvv0l7brt7o.webp\" width=\"590\"\u003e\u003c/div\u003e\n\n我们先定义**坐标轴**这个家伙，首先定义一条直直的线，然后我们再在这条线上定义一些单位，也就是**刻度**(1,2,3...)等，这些都是我们定义的，刻度$1$可以代表任何事物，例如一个苹果，移动了一米等等都可以，而这条直线呢，也是我们定义的，就像我们走路都是直直的前往某个地方，所以为了刻画这种东西，所以我们定义坐标轴也为直的，如果我们每个人都走路是沿曲折的曲线前进，那么我们的坐标轴估计也就是弯弯曲曲的了 (只是猜测)，好了，我们定义完了\"坐标轴\"，来看一个例子\n\n首先让我们来思考个问题，先假设$(0,)$到$(1,)$之间表示$1$米，假设小红站在$(0,)$点不动，小明从$(0,)$出发走到了$(2,)$这个位置，走了$2$米，请问，小红需要走多少个$1$米就可以达到小明现在的位置，我们假设需要走$x$个$1$米就可以达到小明的位置，表现为方程就是$1x=2,x=2$,小红需要走$2$个$1$米这么长的距离才可以达到小明的位置，这就是**方程**，描述两个事物之间的相等关系，其中等号是核心，只不过在一维情况下，比较简单，到了二维时，就要稍微复杂那么一丢丢了\n\n---\n\n这里举一个简单的二维情况下，我们还是以小明和小红走路这个例子为例，前面是在数轴上，他们可以活动的范围太小了，只在一条线上，我们现在把它扩大到一个平面上，现在取两条数轴，还有刻度，然后再让这两条数轴垂直，像$(x,y)$那样，那么能不能斜着呢？可以，只不过这些都是与我们的生活相贴近的，就像展开的地球，如果我们生活的地方就像第二张被错切之后的那样,其中的任何事物都是错切的形状，那估计我们的坐标系也就是会是那样定义了，就像$(x',y')$那样 (只是猜测)\n\n\u003cdiv align=center\u003e\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/mathematics/手绘二维斜坐标系.51qcwl4w6hg0.webp\" width=\"590\"\u003e\u003c/div\u003e (二维坐标系，两条不相互垂直的坐标轴，就像我们所生活的世界，我们在一个巨大的平面上)\n\n\u003cdiv align=center\u003e\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/mathematics/世界地图展开.6s0a9v3ifao0.webp\" width=\"490\"\u003e\u003c/div\u003e\n\n\u003cdiv align=center\u003e\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/mathematics/世界地图展开-shear.5a4qowcfi4k0.webp\" width=\"490\"\u003e\u003c/div\u003e\n\n现在把这两个数轴放到一个平面中去，那么我们的维度就上升了一个层面，定义完之后，也就是说，我们不仅可以左右移动了，也可以上下移动了\n\n假设我们在$(0,0)$点，想要前往到$(2,2)$点，我们能想象得到也比较直观的就是，沿着左右方向中的右那个方向走$2$个单位，然后再沿着上下方向中的上那个方向走$2$个单位，就到了$(2,2)$，你们可能想，这也太麻烦了，我直接从$(0,0)$到$(2,2)$之间连一条线，然后沿着那条线走不就行了嘛，是的，**这就是极坐标系的由来，我们看待同一种问题的不同视角**，这里我们先讨论直角坐标系\n\n\u003cdiv align=center\u003e\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/mathematics/二维坐标移动行程例子.6iwav4dmdck0.webp\" width=\"590\"\u003e\u003c/div\u003e\n\n回到问题，$(0,0) \\rightarrow (2,2)$, 分开来看，就是先往右移动$2m$到达$p1$，再往上移动$2m$到达$p2$，设往右移动$x$个$1m$才能到达$p1$处,然后往上移动$y$个$1m$才能到达$p2$处, 则我们有\n\n$$\\begin{array}{l} \\left ( \\begin{matrix} 1x=2 \\\\ 1y=2 \\end{matrix} \\right.\\\\ \\left ( \\begin{matrix} x=2\\\\ y=2 \\end{matrix} \\right. \\end{array}$$ \n\n往右移动$2$个$1m$才能到达$p1$处，然后往上移动$2$个$1m$才能到达$p2$处。","lastmodified":"2024-06-05T09:48:57.367223771Z","tags":[]},"/adv/equation_and_determinant":{"title":"Equation and determinant","content":"\n**方程与行列式**\n\n有一个方程，我们试着解一下\n\n$$\\begin{array}{l} \\left ( \\begin{matrix}  5x+6y=7 \\quad (1) \\\\ 9x+4y=3 \\quad (2) \\end{matrix} \\right. \\end{array}$$\n我们用消去法\n$$\\begin{array}{l} (2) \\times \\frac{5}{9} - (1) \\\\ (1)\\times \\frac{4}{6} - (2) \\end{array}$$\n最终可以得到\n$$\\begin{array}{l} y(5\\times 4-6\\times 9)=3\\times 5-7\\times 9 \\\\ x(5\\times 4-6\\times 9)=7\\times 4-6\\times 3 \\end{array}$$\n\n大家有没有注意到$x$和$y$后面的\n$$(5\\times 4-6\\times 9)$$\n他们是一样的，所以为了简化计算，我们将这个$(5\\times 4-6\\times 9)$拿出来排列成\n$$\\left ( \\begin{matrix} 5 \u0026 6 \\\\ 9 \u0026 4 \\end{matrix} \\right ) $$\n这样一组数,再定义\n$$\\left ( \\begin{matrix} 5 \u0026 6 \\\\ 9 \u0026 4 \\end{matrix} \\right ) = 5\\times 4 - 6\\times 9$$\n叫做**行列式**, 而\n$$\\left ( \\begin{matrix} 5 \u0026 6 \\\\ 9 \u0026 4 \\end{matrix} \\right ) $$\n也是方程中的系数(称作**系数矩阵**)，通用格式就是\n$$\\left ( \\begin{matrix} a\u0026b \\\\ c\u0026d \\end{matrix} \\right ) = ad-bc$$\n\n---\n\n再看另外一个方程\n$$\\left ( \\begin{matrix}  1x+0y=0 \\\\ 0x+1y=0 \\end{matrix} \\right.$$ \n列出系数矩阵形式\n$$\\left ( \\begin{matrix} 1 \u0026 0 \\\\ 0 \u0026 1 \\end{matrix} \\right )$$\n\n\u003cdiv align=center\u003e\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/mathematics/手绘二维坐标系.qt5rv7k809s.webp\" width=\"490\"\u003e\u003c/div\u003e\n\n观察图中我们看到如果我们把$(1,0)$和$(0,1)$\"围起来\"，我们会得到一个正方形，在应用我们刚刚学的的行列式的计算方法，我们正好得到一个数字$1\\times 1-0\\times 0=1$，(同样的$2\\times 2-0\\times 0=4$，面积为4)，如果我们抛开坐标系不谈论，就单纯的把围成的区域看做是一个正方形，它的面积正好为1，不是吗？那是不是我们可以把**行列式与面积联系起来**呢？答案是：可以，我们再来看另外一个例子，我们现在讨论的是(1,0)和(0,1)下围成的区域，它正好是一个正方形，那么其它的情况呢？\n\n\u003cdiv align=center\u003e\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/mathematics/行列式的一般情形.7gtqx3nj4x80.webp\" width=\"790\"\u003e\u003c/div\u003e\n\n我们两个坐标$(a,c)$和$(b,d)$系数矩阵为\n$$\\left ( \\begin{matrix}  a \u0026 b \\\\ c \u0026 d \\end{matrix} \\right )$$\n现在形成的面积是一个平行四边形，经过计算后我们发现也满足。\n","lastmodified":"2024-06-05T09:48:57.367223771Z","tags":[]},"/adv/fan_triangulation":{"title":"Fan Triangulation","content":"\n在计算几何中[[computational_geometry]]，扇形三角剖分是对多边形进行三角剖分的一种简单方法，即选择一个顶点并绘制通往多边形所有其他顶点的边。这种方法通常只用于凸多边形。","lastmodified":"2024-06-05T09:48:57.367223771Z","tags":[]},"/adv/field_of_view":{"title":"Field of view","content":"\n**FOV (Field-Of-View) and aspect ratio**\n\n**原理**\n\n透视矩阵中我们使用$top、bottom、left、right、near、far$来定义，但通常我们不这样做，而是使用$fov、aspect\\ ratio、near、far$来定义，但他们本质上都是一样的，像人的眼睛也是有$fov$，叫做[视度](https://baike.baidu.com/item/%E4%BA%BA%E7%9C%BC%E8%A7%86%E5%BA%A6/5997035#)这么一说的,顾名思义，视度越大，我们看到的事物也就越多，例如$fov90$就比$fov60$看到的多，它是视点中心到视锥左侧与视点中心到视锥右侧所张开的角度，当然这样只能计算出左右侧的，还需要一个$aspect\\ ratio$(屏幕纵横比)来计算上下侧的。\n\n**计算**\u003cdiv align=center\u003e\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/graphics/FOV-image.5ljfnjoc8mc0.webp\"\u003e\u003c/div\u003e\n\n根据三角函数\n$$\\begin{array}{l} \\tan( \\dfrac{ FOV } {2}) = \\dfrac{ opposite } { adjacent } = \\dfrac {BC}{AB} = \\dfrac{top}{near} \\\\ top = \\tan( \\dfrac{ FOV } {2}) * near \\\\ bottom = -top \\end{array}$$\n如果我们的$aspect \\quad ratio$(宽高比)为$1$的话，则\n$$\\begin{array}{l} right = top\\\\ left = bottom = -top \\end{array}$$\n但通常我们的屏幕的宽高比都不是$1:1$的，如\n\u003cdiv align=center\u003e\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/graphics/AspectRation.3dftg4ztsu00.webp\"\u003e\u003c/div\u003e\n\n图中右边所示，我们有公式\n\n$$\\frac{width}{height}=\\frac{right}{top}$$ \n$$\\frac{width}{height}=\\frac{left}{bottom}$$ \n(宽与左右对应，高与上下对应) 则我们有\n$$\\begin{array}{l} right = top * aspect \\quad ratio \\\\ left = bottom * aspect \\quad ratio \\end{array}$$\n其中\n$$aspect\\quad ratio = \\frac{width}{height}$$ \n$$bottom = -top$$","lastmodified":"2024-06-05T09:48:57.367223771Z","tags":[]},"/adv/game_engine_shader":{"title":"Game Engine Shader","content":"\n# 基本概念\n\n1. Properties中定义的属性，需要在下方SubShader中写出对应的名称。e.g.\n\n```c\nProperties\n{\n\t_Color (\"Color\", Color) = (1,1,1,1)\n}\n\n   ...\n   \nfixed4 _Color;\n```\n\n[Unity - Manual: ShaderLab: defining material properties](https://docs.unity3d.com/Manual/SL-Properties.html)\n\n2. Shader的类型为`#pragma surface surf Standard fullforwardshadows`则对应`void surf (Input IN, inout SurfaceOutputStandard o)`\n\n|  | |  |\n| :------: | :------: | :------: |\n|Standard|SurfaceOutputStandard|\n|Lambert|SurfaceOutput|\n|||\n\n[Unity - Manual: Writing Surface Shaders](https://docs.unity3d.com/Manual/SL-SurfaceShaders.html)\n\n3. 内置函数的使用\n\n- `tex2D`\n- `UnpackNormal`\n- `saturate`\n- `…`\n\n4. 透明物体Shader的设置\n\n```\nTags { \n\t\"RenderType\" = \"Transparent\" \n\t\"Queue\" = \"Transparent\"\n\t\"IgnoreProjector\" = \"True\"\n}\n#pragma surface surf Standard alpha:fade nolighting\n```\n\n[Unity - Manual: Writing Surface Shaders](https://docs.unity3d.com/Manual/SL-SurfaceShaders.html)\n\n5. Unity Shader中的Variables\n\n[Unity - Manual: Built-in shader variables](https://docs.unity3d.com/Manual/SL-UnityShaderVariables.html)\n\n内置变量\n\n- `_Time`\n- `…`\n\n输入结构\n\n- `worldNormal`\n- `viewDir`\n- `…`\n\n6. Surface Shader 示例\n\n[Unity - Manual: Surface Shader examples](https://docs.unity3d.com/Manual/SL-SurfaceShaderExamples.html)\n\n7. 一些内置的调用函数与变量\n\n- `_LightColor0 will be the primary directional light color`\n- `#pragma surface surf Toon - LightingToon`\n- `#pragma surface surf SimpleLambert - LightingSimpleLambert`\n- `#pragma surface surf Phong - LightingPhong`\n- `#pragma surface surf CustomBlinnPhong - LightingCustomBlinnPhong`\n- `#pragma surface surf Anisotropic - LightingAnisotropic`\n- `…`\n\nhttps://docs.unity3d.com/Manual/SL-SurfaceShaderLighting.html\n\n8. Unity Surface Shader的管线\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.6gz2yh2yo800.webp\" alt=\"image\" /\u003e\n\n# Shader效果\n\n## Border (Rim Effect) - Silhouette\n\n```c\nfloat border = 1 - (abs(dot(IN.viewDir, IN.worldNormal)));\nfloat alpha = (border * (1 - _DotProduct) + _DotProduct);\no.Alpha = c.a * alpha;\n```\n\n点乘拿到视角边缘的过渡值，然后使用`_DotProduct`控制边缘的效果强弱\n\n## Lambert\n\n```c\nhalf4 LightingSimpleLambert (SurfaceOutput s, half3 lightDir, half atten) {\n    half NdotL = dot (s.Normal, lightDir);\n    half4 c;\n    c.rgb = s.Albedo * _LightColor0.rgb * (NdotL * atten);\n    c.a = s.Alpha;\n    return c;\n}\n\nvoid surf (Input IN, inout SurfaceOutput o)\n{\n    o.Albedo = tex2D (_MainTex, IN.uv_MainTex).rgb;\n}\n```\n\n模型法线与灯光的点乘\n\n## Toon\n\n```c\nfixed4 LightingToon (SurfaceOutput s, fixed3 lightDir, fixed atten)\n{\n    half NdotL = dot(s.Normal, lightDir);\n    NdotL = tex2D(_RampTex, fixed2(NdotL, 0.5));\n\n    fixed4 c;\n    c.rgb = s.Albedo * _LightColor0.rgb * NdotL * atten;\n    c.a = s.Alpha;\n    return c;\n\n}\n\nvoid surf (Input IN, inout SurfaceOutput o)\n{\n    o.Albedo = tex2D(_MainTex, IN.uv_MainTex).rgb;\n}\n```\n\n使用了一张ToonRamp贴图，再根据法线与灯光的点乘值来采样这张贴图\n\n## Phone Specular\n\n```c\n// I = D + S\n// D = N·L\n// S = (R·V)^p\n// R = 2N(N·L) - L\nfixed4 LightingPhone(SurfaceOutput s, fixed3 lightDir, half3 viewDir, fixed atten)\n{\n\tfloat NdotL = dot(s.Normal, lightDir);\n\tfloat3 reflectionVector = normalize(2.0 * s.Normal * NdotL - lightDir);\n\tfloat spec = pow(max(0, dot(reflectionVector, viewDir)), _SpecPower); \n\tfloat3 finalSpec = _SpecularColor.rgb * spec;\n\t\n\tfixed4 c;\n\tc.rgb = (s.Albedo * LightColor0.rgb * max(0, NdotL) * atten) + (LightColor0.rgb * finalSpec);\n\tc.a = s.Alpha;\n\t\n\treturn c;\n}\nvoid surf (Input IN, inout SurfaceOutput o)\n{\n    fixed4 c = tex2D(_MainTex, IN.uv_MainTex) * _Color;\n    o.Albedo = c.rgb;\n    o.Alpha = c.a;\n}\n```\n\n[Implementing a Phong Shader in Unity - Jan's Place](https://janhalozan.com/2017/08/12/phong-shader/)\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.2pj57hmwnrg0.webp\" alt=\"image\" /\u003e\n\n首先，我们知道投影的计算，但是我们不知$cos(\\theta)$,但通过点乘我们可以替换掉得到下方的投影计算。\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.39rhduioys60.webp\" alt=\"image\" /\u003e\n\n再去计算反射向量，代入投影的值，其中法线一般是unit vertor，所以最终可得`r = n * 2(l·n) - l`也就是Phone中计算的反射。\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.1slfvpca6k68.webp\" alt=\"image\" /\u003e\n\n[3d - How to prove r = n \\* 2(l·n) - l in specular reflection? - Mathematics Stack Exchange](https://math.stackexchange.com/questions/4335380/how-to-prove-r-n-2l-n-l-in-specular-reflection)\n\n\u003e 在LearnOpenGL中，也是一样的，https://learnopengl.com/Lighting/Basic-Lighting，是调用的reflect函数计算的反射方向\n\n```c\nvec3 viewDir = normalize(viewPos - FragPos); \nvec3 reflectDir = reflect(-lightDir, norm);\nfloat spec = pow(max(dot(viewDir, reflectDir), 0.0), 32); vec3 specular = specularStrength * spec * lightColor;\n\nvec3 result = (ambient + diffuse + specular) * objectColor;\n```\n\n## Blinn-Phong\n\n```c\nvec3 lightDir   = normalize(lightPos - FragPos);\nvec3 viewDir    = normalize(viewPos - FragPos);\nvec3 halfwayDir = normalize(lightDir + viewDir);\n\nfloat spec = pow(max(dot(normal, halfwayDir), 0.0), shininess);\nvec3 specular = lightColor * spec;\n```\n\n与Phong模型思路上是一样的，不过这里用的是halfDir，而没有去计算反射方向。\n\n[LearnOpenGL - Advanced Lighting](https://learnopengl.com/Advanced-Lighting/Advanced-Lighting)\n\n## Anisotropic Specular Shader\n\n```c\nProperties{\n\t_MainTint(\"Diffuse Tint\", Color) = (1,1,1,1)\n\t_MainTex(\"Base(RGB)\", 2D) = \"white\" {} \n\t_SpecularColor(\"Specular Color\", Color) = (1,1,1,1)\n\t_Specular(\"Specular Amount\", Range(0,1)) = 0.5 \n\t_SpecPower(\"Specular Power\", Range(0,1)) = 0.5\n\t_AnisoDir(\"Anisotropic Direction\", 2D) = \"\" {}\n\t_AnisoOffset(\"Anisotropic Offset\", Range(-1,1)) = -0.2\n}\n\nstruct Input{\n\tfloat2 uv_MainTex;\n\tfloat2 uv_AnisoDir;\n}\n\nstruct SurfaceAnisoOutput{\n\tfixed3 Albedo;\n\tfixed3 Normal;\n\tfixed3 Emission;\n\tfixed3 AnisoDirection;\n\thalf Specular;\n\tfixed Gloss;\n\tfixed Alpha;\n};\n\nfixed4 LightingAnisotropic(SurfaceAnisoOutput s, fixed3 lightDir, half3 viewDir, fixed atten){\n\tfixed3 halfVector = normalize(normalize(lightDir) + normalize(viewDir)); \n\tfloat NdotL = saturate(dot(s.Normal, lightDir));\n\t\n\t// Anisotropic:\n\t//// HdotA is 0 when perpendicular to the Anisotropic normal map, 1 when parallel.\n\tfixed HdotA = dot(normalize(s.Normal + s.AnisoDirection), halfVector); \n\n\t//// modify the value with sin() so that we get a darker\n\t//// middle highlight and a ring effect based off of the halfVector.\n\tfloat aniso = max(0, sin(radians((HdotA + _AnisoOffset) * 180)));\n\t\n\t// Specular:\n\t//// scale the aniso value by taking it to a power of s.Gloss,\n\t//// then globally decrease its strengthby multiplying it by s.Specular.\n\tfloat spec = saturate(pow(aniso, s.Gloss * 128) * s.Specular);\n\t\n\tfixed4 c;\n\tc.rgb = ((s.Albedo * _LightColor0. rgb * NdotL) + (_LightColor0.rgb * _SpecularColor.rgb * spec)) * atten;\n\tc.a = s.Alpha;\n\treturn c;\n}\nvoid surf(Input IN, inout SurfaceAnisoOutput o){\n\thalf4 c = tex2D(_MainTex, IN.uv_MainTex) * _MainTint;\n\tfloat3 anisoTex = UnpackNormal(tex2D(_AnisoDir, IN.uv_AnisoDir));\n\t\n\to.AnisoDirection = anisoTex;\n\to.Specular = _Specular;\n\to.Gloss = _SpecPower;\n\to.Albedo = c.rgb;\n\to.Alpha = c.a;\n}\n```\n\n其中最主要的效果来自sin那里，用sin()修改这个值，我们就可以得到一个更暗的中间高光和一个基于halfVector的环形效果。\n\n[Shader Programming, Volume 8. Anisotropic Specular Lighting | by Sebastian Monroy | Medium](https://medium.com/@smokelore/shader-programming-volume-8-cfc8c2fe3659)\n\n## Wave (Vertices Animation)\n\n```c\nvoid vert(inout appdata_full v, out Input o){\n    UNITY_INITIALIZE_OUTPUT(Input, o);\n    float time =_Time * _Speed;\n    float waveValueA = sin(time + v.vertex.x * _Frequency) * _Amplitude;\n    v.vertex.xyz = float3(v.vertex.x, v.vertex.y + waveValueA, v.vertex.z);  \n    v.normal = normalize(float3(v.normal.x + waveValueA, v.normal.y, v.normal.z));\n    o.vertColor.rgb = float3(waveValueA, waveValueA, waveValueA);\n}\n\nvoid surf (Input IN, inout SurfaceOutput o)\n{\n    half4 c = tex2D(_MainTex, IN.uv_MainTex);\n    float3 tintColor = lerp(_ColorA, _ColorB, IN.vertColor).rgb;\n    o.Albedo = c.rgb * (tintColor *_tintAmount);\n    o.Alpha = c.a;\n}\n```\n\nsin(pos.x)得到一个振幅波，加到vertex.y的上面。\n\n## Snow\n\n```c\nfixed4 _Color;\nvoid vert(inout appdata_full v)\n{\n    // Wrong?\n    // float4 sn = mul(UNITY_MATRIX_IT_MV, _SnowDirection);\n    float4 sn = _SnowDirection;\n    if (dot(v.normal, sn.xyz) \u003e= _Snow)\n        v.vertex.xyz += (sn.xyz + v.normal) * _SnowDepth * _Snow;\n}\n\nvoid surf (Input IN, inout SurfaceOutputStandard o)\n{\n    half4 c = tex2D(_MainTex, IN.uv_MainTex);\n    o.Normal = UnpackNormal(tex2D(_Bump, IN.uv_Bump));\n\n    if (dot(WorldNormalVector(IN, o.Normal), _SnowDirection.xyz) \u003e= _Snow)\n        o.Albedo = _SnowColor.rgb;\n    else\n        o.Albedo = c.rgb * _MainColor;\n    o.Alpha = 1;\n}\n```\n\n通过snowDir与Normal方向点乘与snow的阈值控制哪些区域产生雪，以及在vertex中朝着法线+snowDir的方向偏移顶点位置，来实现一个非常简单的雪的效果。\n\n\n## Parallax\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.27jn8epa5um8.webp\" alt=\"image\" /\u003e\n\nParallax(视差)是移动当前视角，画面中的效果还是一直朝向摄像机不产生变化，这个效果可以使用AmplifyShaderEditor中的Parallax Node或者把Screen Position作为UV去采样Texture，两者方法都可以使用。\n热扭曲：屏幕空间位置 + 采样纹理（使用Panner节点(随时间流动的UV值)）\n边缘光：Fresnel效果 + 纹理扰动\n\nhttps://www.bilibili.com/video/BV1YL4y1b7bB/?vd_source=ce02e1fd8ede3b92cc4f879b568541e2","lastmodified":"2024-06-05T09:48:57.367223771Z","tags":[]},"/adv/graphics_dynamical_simulation":{"title":"Graphics Dynamical Simulation","content":"\n![image](https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.5i1ljd6rdmk0.webp)\n\n\n[[computer_graphics]]","lastmodified":"2024-06-05T09:48:57.367223771Z","tags":[]},"/adv/graphics_geometry":{"title":"Graphics Geometry","content":"\n![image](https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.3dohebvhfy00.webp)\n\n[[computer_graphics]]","lastmodified":"2024-06-05T09:48:57.367223771Z","tags":[]},"/adv/graphics_rendering":{"title":"Graphics Rendering","content":"\n![image](https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.152uiessl800.webp)\n\n[[computer_graphics]]\n","lastmodified":"2024-06-05T09:48:57.367223771Z","tags":[]},"/adv/homogenous_coordinates":{"title":"Homogenous coordinates","content":"\n**齐次坐标**\n\n以二维为例，在平移变换中我们新增一个**坐标分量**叫$w$，让其先等于$1$\n\n则平移的矩阵可以表示为\n$$\\left ( \\begin{matrix} x' \\\\ y' \\\\ 1 \\end{matrix} \\right ) = \\left ( \\begin{matrix} 1\u00260\u0026t_x \\\\ 0\u00261\u0026t_y \\\\ 0\u00260\u00261 \\end{matrix} \\right ) \\left ( \\begin{matrix} x \\\\ y \\\\ 1 \\end{matrix} \\right ) = \\left ( \\begin{matrix} x+t_x\\\\ y+t_y \\\\ 1 \\end{matrix} \\right )$$\n再来看一下用齐次坐标是否可以表示之前的那些变换,均匀缩放\n$$\\left ( \\begin{matrix} x' \\\\ y' \\\\ 1 \\end{matrix} \\right ) = \\left ( \\begin{matrix} s\u00260\u00260 \\\\ 0\u0026s\u00260 \\\\ 0\u00260\u00261 \\end{matrix} \\right ) \\left ( \\begin{matrix} x \\\\ y \\\\ 1 \\end{matrix} \\right )$$\n以及旋转\n$$\\mathbf{R}_\\theta = \\left ( \\begin{matrix} cos\\theta \u0026 -sin\\theta\u00260 \\\\  sin\\theta \u0026 cos\\theta\u00260 \\\\ 0\u00260\u00261 \\end{matrix} \\right )$$\n都是可以的\n\n[^1]: 可以认为齐次坐标是对一个点的缩放. 用数学表示就是增加一个维度. 该维度表示缩放值. 当该值为0的时候会把所有点汇集到一个相同的点上, 即0点","lastmodified":"2024-06-05T09:48:57.367223771Z","tags":[]},"/adv/houdini_hello":{"title":"Hello Houdini","content":"## 常用命令\n\n```c\nopscript -r -o /obj/* \u003e C:/temp/nodes.cmd\ncmdread C:/temp/nodes.cmd\n\n// https://www.patreon.com/posts/quick-tip-using-23451468\n```\n\n## Houdini 引擎\n\nCurve 2.0 在Unreal与Unity目前不起作用，需要切换到1.0 https://www.youtube.com/watch?v=rN4Y6ucy_hY\n\n## 几何属性\n\nw - vec3 - Angular speed of the particle. This can be thought of as a vector giving the rotation axis with its magnitude being the spin rate. Spin rate is in radians per second.\n\n[VEX Attribute Glossary - kunz](https://wiki.johnkunz.com/index.php?title=VEX_Attribute_Glossary)\n\n## 仓库\n\nGithub上分享的Houdini相关的资源 [GitHub - ribponce/particula](https://github.com/ribponce/particula)\n\n## 效果制作\n\n树木吹动模拟 https://vimeo.com/420539635 (Solaris) [来源](https://www.sidefx.com/tutorials/solaris-workshop/)\n\n\n---\n\n\u003e 看到一种感觉比较好的讲课方式，照着已经做好的文件进行讲解，但在开始前，先将主要的部分内容，进行简单的原理讲解。然后再切换到文件顺着去讲解下去。\n\n## Houdini FX\n\n### 效果思路\n\n* **效果思路**\n\t* Pyro发射源\n\t\t* ①pyro trail path, pyro burst source ②当发射源巨大时例如宇宙飞船，可以用Ray节点到表面。再挤出厚度后转VDB。将源物体抽象为一个point，计算出v，再使用VolumeWrangle节点，(`v@collsionVel = point(1, 'v', 0)`) 传递v到vdb上。\n\t* 自定义曲线旋转力场\n\t\t* 创建一个bound VDB vel场，曲线计算curveu和N属性，在volumevop中，使用pcopen filter曲线P,再减去vel的P，得到指向曲线的向量，再与pcopen filter曲线N，叉乘，得到旋转向量，再与曲线N mix就可得到沿曲线方向运动的旋转力场。\n\t* 蜡烛火焰效果\n\t\t* ①在pyro bake volume中，使用Fuel作为Fire的Intensity Volume, temperature做为Color Volume。调节Fire Color Ramp为底部蓝色火焰效果。②\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/picx-images-hosting@master/e/image.4xubfxmii0.webp\" alt=\"image\" width=100/\u003e可以在火焰底部创建一个橙色区域所示的球型volume作为Fire的Color Volume，其中蓝色区域所示为Density可以做为Mask剔除多余的球型区域。③只有temperature与fuel, 使用Volume blur节点，将temperature模糊一下作为Fire的Color Volume输入调节Color Ramp。\n\t* 冲击环效果\n\t\t* 可以使用Line + Resample，与curveu属性。再使用`attribute remap`节点控制`curveu`分别为`pscale`与`startframe`作为pyroburstsource的输入控制。pyroburstsource的Brust Type设置为Shockwave并调整成为冲击波形态。\n\t* 冲击波效果 (Axiom)\n\t\t* 火焰燃烧中突然爆炸，爆炸会对火焰产生影响，可以创建一个Sphere去Key大小，然后使用pointvelocity节点，增加v属性，再使用vdbfrompolygon节点，类型为Fog Vdb，名字叫做influence,再增加一个Surface Attribute，Attribute为point.v，名字叫做influenceVel。\n\t* 随机的动画路径\n\t\t* 使用Line，头尾固定在原点，noise影响除了头尾的点。\n\t* 打击效果\n\t\t* guideprocess: ①可以使用guideprocess处理毛发引导线的节点来控制类似冲击光束从天空打击地面的效果。Operation设置为Set Length,key帧Scale Factor。②其实应该也可以使用Transform，调整Pivot到线段的顶部，再控制缩放。\n\t* 打碎爆炸的整齐技巧\n\t\t* 当发射源不好更改，AxiomSolver的参数也无法调出时的一个技巧 (注：仅限救命时使用)。首先使用Time Shift将发射源固定某帧，scatter撒点，Bound求出边界，rbdmaterialfracture制作碎块，Sort节点使用Random将Point Order打散，assemble转成pack。delete节点使用Delete by range删除一些碎块。convert成polygon再Remesh，然后Mountain节点制作一些不规则表面。explodedview将碎块散开用于遮挡，将其放置到爆炸的上方用于阻挡爆炸形成的形态。最后用vdbfrompolygons转成axiom识别的collision。\n\n### 高级技巧\n\n* **高级技巧**\n\t* VEX\n\t\t* primuv: 例如有一条Line，想要让某个点沿着Line的起始位置移动到结束位置，可以使用像`@P = primuv(1, \"P\", 0, vector(anim));` 其中anim是`float anim = fit(@Frame, startframe, startframe + duration, 0, 1);`\n\t* LPE\n\t\t* Refraction Only\n\t\t\t* `C\u003cTG\u003e+L` C(Camera)从摄像机出发，碰到T(Surface Transmission) G(Glossy scatter), 碰到了+(One Or More preceding event) 最后到达了L(Light)光路，结束了。\n\t\t* Reflection within refraction 折射内的反射\n\t\t\t* `C\u003cTG\u003e[\u003cTG\u003e\u003cRG\u003e]*\u003cRG\u003e+[\u003cTG\u003e\u003cRG\u003e]*L` C(Camera)从摄像机出发,碰到了`\u003cTG\u003e`(折射)，*尖括号表示匹配尖括号里的所有事件*，`[\u003cTG\u003e\u003cRG\u003e]`再次可能碰到折射或反射，*方括号表示匹配方括号里的任意一个事件*,这种情况类似穿过了一个玻璃，又碰到了玻璃容器里的水。`*`表示可能碰到也可能不碰到。`\u003cRG\u003e+` RG(反射 R:Surface Reflection, G:Glossy scatter) `+`表示至少碰到一次。然后往光路回时，可能碰到0次或多次`[\u003cTG\u003e\u003cRG\u003e]` 反射与折射。最后到达L(Light)。\n\t\t* Direct Volume\n\t\t\t* `CVL` Houdini默认的Direct Volume的LPE是`CVL`，表示默认C相机出发，碰到V(Volume)，最后到达L。但如果V的中间被遮挡则可能什么都不显示。\n\t\t\t* `CT+VL` 如果是只考虑玻璃容器内的Volume。则需要`T+`。\n\t\t\t* `CT*VL` 如果需要同时考虑玻璃容器内和外的Volume，可以`T*`。\n\t\t* Indirect Volume\n\t\t\t* `CV.+L` 碰到V至少一次后，然后再至少一次或多次碰到V，最终到达灯光。因为第一次碰到V是Direct，后面才是Indirect。如果想要Indirect of indirect Volume。可以再加一个`.`。同理可以往后推，但一般不考虑。\n\t\t\t* `CT+V.+L`: T+同理与Direct Volume中的一样。\n\t\t* Indirect Diffuse\n\t\t\t* `C\u003cRD\u003e.+L` RD(R:Surface Reflection, D:Diffuse scatter)\n\t\t* Emission (direct) within refraction 折射内的自发光(直接)\n\t\t\t* `C\u003cTG\u003e[\u003cTG\u003e\u003cRG\u003e]+O` C出发，经过一次TG折射，然后只要经过一次或多次的TG折射与RG反射，最终到O(Emissive Object)。\n\t\t* Refract without emission 不带自发光的折射\n\t\t\t* `C\u003cTG\u003e[^O]*L` 摄像机出发，经过一次TG折射，然后排除O(Emissive Object)任意次，最后到灯光。\n\t\t* Emission through reflect\n\t\t\t* `C.*R+.*O` `.*`表示任意事件，发生了任意次。R:Surface Reflection发生了至少一次，然后再是任意事件发生任意次，最后到O发光物体上。\n\t\t* Emission through refract\n\t\t\t* `CT+O` 通过折射看到的自发光层。\n\t* 渲染火焰影响场景层\n\t\t* 使用Render Geometry Setting节点，Primitives参数设置为场景，Shading-\u003eHoldout Mode设置为Background，使用另一个Render Geometry Setting节点，Primitives参数设置为火焰,Shading -\u003e Render Visibility 选项为Invisible to primary rays (Phantom)。最后创建一个Render Var, Source Type为LPE，Format 为Color3f，Source Name为 `holdouts;C.+\u003cL.'voll'\u003e` (Treat as light source)或者`holdouts;C.O` (emissive)\n\t* 渲染Deep遮罩\n\t\t* 使用Render Geometry Setting节点，将场景的Render Visibility 设置为 (Phantom) ，因为要考虑到场景对特效的间接影响。然后在Karma Render Setting中打开Deep，再正常渲染特效即可。\n\t\t* 或使用Prune节点将所有灯光关闭，在Karma Render Setting中打开Deep，同时使用渲染引擎为CPU，此时不考虑光照，渲染Deep会快很多。\n\t\n\t* Solaris USD\n\t\t* Matte\n\t\t\t* 创建节点 rendergeometrysettings，在Primitives中可以填如`%type:Mesh`, 在Shading-\u003eHoldout Mode 选择Matte\n\t\t* Matte Primvar\n\t\t\t* 在`karmarendersettings`节点-\u003eExtra Render Vars中添加一个新的Render Var，Format为color3h,Source Type为Primvar。`matte`的设置可以是①节点editproperties，点击Edit Properties，新建名为`primvars:matte`，类型为`color3f`的一个属性。②在sopcreate中创建名为`matte`的vector属性。这样也会被识别为primvars。\n\t\t* Matte Smoke AOV\n\t\t\t* 在karmapyromaterial材质节点中，使用 mtlxgeompropvalue读入density，再连接Karma AOV节点导出aov。\n\t\t* LPE Lights Tag\n\t\t\t* 可以在创建的灯光节点上，Karma选项面板，LPE Tag 填入想要命名的名称，再在Karma Render Settings-\u003e Image Output -\u003e AVOs (Render Vars) -\u003e Beatuy 勾选 Split per LPE Tag\n\t\t* Alpha\n\t\t\t* 1)Edit Properties节点，Primitives为`%type:Boundable`, 编辑属性，name为`primvar:alpha`,值为1.0，类型为float。2)Karma Render Settings节点-\u003e Image Output -\u003e AVOs (Render Vars) -\u003e Extra Render Vars，新建一个Source Type为primvar,Source Name为alpha的Render Var就可以渲染出Alpha了。\n\n### 辅助技巧\n\n* **辅助技巧**\n\t* 体积可视化\n\t\t* vel 使用vdb analysis节点，operator属性设置为length，再使用volume visualization可视化。\n\t\t* temperature: 使用primitive properties，在Volume选项卡勾选Adjust Visialization。\n\t* 将Volume置于慢动作\n\t\t* 使用Retime节点，Speed调慢，例如0.5，在Volumes选项卡里，将Blend Mode改为Advected。再用Timeshift,使Frame $FF+0.25，这样避免整数帧。因为Blend中间帧会使Volume稍微模糊一点，而在整数帧时又恢复原始的。\n\t* Wedging\n\t\t* 使用Labs File Cache，设置好Attribute后，使用`@\u003cattr_name\u003e`到属性栏中。\n\t* Viewport更好的可视化Volume\n\t\t* 1.工具架sky light。2.取消勾选Display Options-\u003eBackground-\u003eDisplay Environment Lights as Backgrounds。3.增加Display Options-\u003eTexture-\u003e3D Textures Limit Resolution分辨率。\n\t* gl_spherepoints pscale\n\t\t* 想要预览pscale属性，可以创建detail属性gl_spherepoints,类型为Integer，值为1。这样就可在窗口中预览。\n\t* Key动画\n\t\t* ①key axiom sourceShape节点中的Density，Fuel这些控制发射源。②key axiom Solver中的Turbulence控制扰乱的作用。③key 材质pyro back volume中的Intensity，Color控制最后渲染效果。\n\t* Trail的技巧\n\t\t* 在trail运动的点时，可以使用timewarp节点,Mode为Fit Range，Input Frame Range与Output Frame Range相同，开启Interpolate Between Input Frames。这样可以插值小数帧，使产生类似火焰中小火花的效果。\n\t* LOP ffmpeg 视频-\u003e图片序列\n\t\t* 在lop net 中使用ffmpeg extract images节点，在Source-\u003eInput Source选择Custom File Path，填入视频路径。或者在外部使用`ffmpeg -i res_source.mp4 -start_number 1001 -vf fps=24 out/output_%04d.jpg` 命令。\n\t* 注意比例\n\t\t* 在制作烟火爆炸时，可以使用一个Cube来比较尺寸大小，来调节Distubance的Size与Turbulence的Size。而不是使用默认的根据精度控制的Size大小。\n\t* MeshLight输出\n\t\t* 注意三点：1.注意不要与场景穿插(否则渲染会慢且有白点) 2.尺寸要Invert回原来的尺寸(这样去Maya中才正确) 3.面数不要过多(10万左右)\n\t\t* 面片考虑Alpha与实际的照明程度。粒子转成vdb再转回Polygon。体积先用vdbresample降低精度，再使用转成Polygon。\n\t\t* 穿插可以将场景导入，选择特效影响的区域，如果面数过多，可以使用For-Each Connected Piece，For内部使用convexhull转成壳，再通过Group Bounding Box选择的方式，将穿插的特效Mesh删除掉。\n\n### 节点参数\n\n* **节点参数**\n\t* Houdini\n\t\t* Attrib from volume: 传递Volume中属性到点上，例如vel场到点的v属性上。\n\t\t* VDB\n\t\t\t* VDB Smooth SDF: 使用convert vdb将vdb转换成SDF，Convert To设置为VDB，VDB Class设置为Convert Fog to SDF。\n\t\t\t* VDB Advect: 使用vdb的速度场去影响输入的vdb，例如用vel影响一下输入的density场。\n\t\t\t* VDB Resample: 参数Define Transform选择Using Voxel Scale Only，再调整Voxel Scale可以增加或减少体素数量。\n\t\t* Pyro \n\t\t\t* Pyro Bake Volume\n\t\t\t\t* 在Pyro Bake Volume节点中的Quick Setups中有Sharpen Volume会创建出一个Subnet去锐化体积。\n\t\t\t* pyro post process: 当有多个Volume体积时，例如两个density场，可以使用这个节点合并。转换为VDB。转为16bit操作。\n\t* Solaris\n\t\t* Karma Render Settings\n\t\t\t* 多个通道降噪: Image Output -\u003eFilters -\u003eAOVs 中可以选择多个通道进行降噪。\n\t* Axiom\n\t\t* Axiom Source:\n\t\t\t1. Temperature: ①可以自定义Temperature同时存在正值与负值，产生同时往上与往下的效果。②可以用attrib noise float调整temperature增加animate，做出蜡烛火焰底部青色闪烁的效果。\n\t\t\t2. Axiom Source naming: Burn -\u003e Fuel, Divergence-\u003e pressure, v-\u003evel\n\t\t\t3. Sourcing 中的场可以使用Add,Pull,Replace,Blend: 其中Pull会尝试匹配传递进来的场。Add是增加上去。Replace将会完全采用输入的场。\n\t\t\t4. Sourcing Fuel的输入强度可以使用 fit(rand($F), 0, 1, 0.8, 1.5) 完全随机，可以产生蜡烛火焰往上一冲一冲的效果。\n\t\t\t5. Sourcing influence: 可以将pyro burst source节点或者只要有v和density的输入，将density命名成influence，将v命名成influenceVel产生不同效果。\n\t\t* Axiom Combustion:\n\t\t\t1. Emission: 当Fuel达到温度燃点时，分别创建的Density,Temperature,Pressure场。\n\t\t\t2. Ignition: Temperature 阈值，仅当温度大于这个值才燃烧。默认为0表示所有都燃烧。\n\t\t\t3. Fuel Burn: 每个Step控制燃烧多少燃料。如果这个值很大，表示所有东西立即燃烧。模拟火球同时可设置为Frame Step。\n\t\t\t4. Fuel Inefficiency:控制百分之多少的无用燃烧。降低燃烧的效果。\n\t\t\t5. Fuel Advect: 是否让fuel流动。小型燃烧中，fuel一般是不流动的。\n\t\t* Axiom Houdini:\n\t\t\t1.  Axiom influence：可自定义 influencePressure, influenceTemperature，在Axiom Solver-\u003eSourcing-\u003eInfluence中取负的Temperature可做出类似干冰效果。\n\t\t\t2. Axiom collision: 添加collision，collisionVel控制碰撞速度。也可添加collisionTemperature。或collision物体key动画运动。\n\t\t\t3. Axiom sink: axiom sourceShape节点中，类型选为sink，添加消失的地方。\n\t\t\t4. Axiom Camera Frustum: axiom sourceShape节点中,使用摄像机裁切解算区域。节省空间。\n\t\t\t5. Axiom Step: ①Frame Step相比于Time Step会比较快。但这两者不与Time Scale有关。②Solver Step会与Time Scale有关。相乘关系。\n\t\t\t6. Axiom Control Field: 使用哪个场控制行为。例如Y-Axis， Range是5-15，则效果会在5-15之间产生，且强度根据Ramp。\n\t\t\t7. Axiom collision: Axiom中VDB命名collision作为碰撞体。带有动画可以加上collisionVel。\n\t\t\t8. Axiom influence: Axiom中使用influenceVel与influence控制场的影响。influence控制范围，influenceVel控制速度。两者需要都存在。\n\t\t\t9. Axiom source: 复制同一发射源多次Merge一起可以在小空间下解算时也产生较浓的烟雾。\n\t\t* Axiom Simulation\n\t\t\t1. Velocity Force: 与风相似，不同的是会根据时间加速。\n\t\t\t2. Velocity Turbulence: Turbulence中的Scale Field默认是Density，按照密度扩大，所以当Density非常浓时，Turbulence会非常强烈。\n\t\t\t3. Velocity Disturbance: Disturbance中Cut off Field控制中断，默认是Density，当密度非常淡时受到的Disturbance就会弱。同时Control Field可以选择例如Velocity(Speed)，Range在5-10,这样当速度在5-10区间时才影响Disturbance效果。\n\t\t\t4. Velocity Viscosity: 粘度，当数值很大时可以模拟出类似香烟的烟雾。\n\t\t\t5. Time Scale: 与Time Scale相关的参数Turbulence, 当TimeScale非常大时，变得非常混乱，这时可以用 例如 `5.0*(1.0 / ch(\"timescale\"))`这样参数去控制。\n\t\t* Axiom Settings\n\t\t\t1. Sparse - Max Velocity Margin: 当发射源速度非常快时，可以加大这个值扩张计算的边界。\n\t\t\t2. Sparse - Activation Fields: 当不需要Density，纯火时，可以将其改为Density+Temperature, 同时再将 Output -\u003e Compression -\u003e Mask Field 改为Temperature或者Off。\n\t\t\t3. Project Non Divergent: 当你的碰撞不起作用时，可以增加Steps。\n\n### Nuke节点\n\n* **Nuke节点**\n    * Keylight\n\t    * 如果天空与主体区分明显，可以用此节点产生Alpha通道。\n\t* ColorCorrect Mask\n\t\t*  用Mask控制ColorCorrect的调整范围，例如产生辉光范围。\n\t* LayerContactSheet\n\t\t* 可以排列出一个exr文件中所有的通道。\n\t* Camera Tracker\n\t\t* 创建节点后，先点击Track，再点击Solve，选择Export中的`Scene+`,点击Create。\n\t\t* 创建WriteGeo节点，连接到Scene1节点后，填上输出路径与文件名.abc即可导出场景。\n\n## Lessons 课程\n* Axiom Fundamentals \u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/picx-images-hosting@master/e/image.58h5hno41a.webp\" alt=\"image\" width=200/\u003e\n* lessons/realistic-explosions \u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/picx-images-hosting@master/e/image.7awxsrtg5u.webp\" alt=\"image\" width=200/\u003e\n\n* lessons/big-fire \u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/picx-images-hosting@master/e/image.7egk3fhzwz.webp\" alt=\"image\" width=200/\u003e\n\n* lessons/anime-impact-fx\n\n\n## VFX参考网站\n\n1. [ActionVFX | The Best Stock Footage for Visual Effects](https://www.actionvfx.com/)\n2. [ArtStation - All Channels](https://www.artstation.com/)","lastmodified":"2024-06-05T09:48:57.367223771Z","tags":[]},"/adv/linear_and_nonlinear_depth":{"title":"Linear and nonlinear depth","content":"\n**深度**\n\n**线性深度**\n$$F_{depth}=\\frac{z-near}{far-near}$$\n\n接近近平面的时值为$0$，远平面时为$1$，但我们通常不使用这个深度，因为我们的投影特性导致插值不是线性的(由于在投影平面上的相同步长随着三角形面与相机之间的距离增加而在三角形面上产生更大的步长-《Mathematics for 3D Game Programming and Computer Graphics-P107) (正交投影与透视投影的视锥不同，所以不存在透视投影中的近大远小效果，在这样的情况下，正交投影中的深度可以使用线性深度)\n\n**非线性深度**\n\n\u003eIn detail see `WorldGrid.fs.glsl`\n$$\\begin{aligned} F_{depth} = \\frac{\\frac{1}{z}-\\frac{1}{near}}{\\frac{1}{far}-\\frac{1}{near}} \\end{aligned}$$\n\n\n\u003cdiv align=center\u003e\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/graphics/x分之1的函数图像.1wcc3u4z1sow.webp\"\u003e\u003c/div\u003e\n\n观察$\\frac{1}{x}$的图像我们可以知道，将$x$看做$z$，透视变换中我们也比上了$z$，所以最终总体的结果与这个函数的图像是类似的，通过观察我们可以看到$[0,0.5]$之间的区域占了总共了的$\\frac{4}{5}$还多，这也就意味着，**距离屏幕越近的模型将会获得越高的精度，反之，越远精度越低，而线性则是非常平均的，无论远近，精度一致**，这只是一个观察结果\n\n在[[perspective_transformation]]透视变换矩阵除以$w(w=-z)$分量进入NDC空间之前，它们是线性的，除以了$w$分量之后进入了NDC空间，就变为了非线性\n\n函数图像链接: https://www.geogebra.org/m/zqnpanc7\n\nSee. MVP_Understanding.hip","lastmodified":"2024-06-05T09:48:57.367223771Z","tags":[]},"/adv/linear_transforms_and_translation":{"title":"Linear transforms and translation","content":"\n**线性变换Linear Transforms**\n\n**缩放Scale**\n$$\\left ( \\begin{matrix} x'\\\\ y' \\end{matrix} \\right ) = \\left ( \\begin{matrix} s\u00260\\\\ 0\u0026s \\end{matrix} \\right ) \\left ( \\begin{matrix} x\\\\ y \\end{matrix} \\right )$$\n\n  \n\n[UniformScale](https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/mathematics/UniformScale.mp4 ':include :type=video controls width=100% height=360px')\n\n  \n\n**非均匀缩放 Scale (Non-Uniform)**\n$$\\left ( \\begin{matrix} x'\\\\ y' \\end{matrix} \\right ) = \\left ( \\begin{matrix} s_1\u00260\\\\ 0\u0026s_2 \\end{matrix} \\right ) \\left ( \\begin{matrix} x\\\\ y \\end{matrix} \\right )$$\n\n  \n\n[NonUniformScale](https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/mathematics/NonUniformScale.mp4 ':include :type=video controls width=100% height=360px')\n\n  \n\n**反射Reflection**\n$$\\left ( \\begin{matrix} x'\\\\ y' \\end{matrix} \\right ) = \\left ( \\begin{matrix} -1\u00260\\\\ 0\u00261 \\end{matrix} \\right ) \\left ( \\begin{matrix} x\\\\ y \\end{matrix} \\right )$$\n\n  \n\n[Reflection](https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/mathematics/Reflection.mp4 ':include :type=video controls width=100% height=360px')\n\n  \n\n**错切Shear**\n$$\\left ( \\begin{matrix} x'\\\\ y' \\end{matrix} \\right ) = \\left ( \\begin{matrix} 1\u0026a\\\\ 0\u00261 \\end{matrix} \\right ) \\left ( \\begin{matrix} x\\\\ y \\end{matrix} \\right )$$\n\n  \n\n[ShearMatrix](https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/mathematics/ShearMatrix.mp4 ':include :type=video controls width=100% height=360px')\n\n  \n\n[Shear](https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/mathematics/Shear.mp4 ':include :type=video controls width=100% height=360px')\n\n  \n\n**旋转Rotate**\u003cdiv align=center\u003e\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/mathematics/手绘-Rotate.3lljascgw0k0.webp\" width=\"790\"\u003e\u003c/div\u003e\n\n$$\\mathbf{R}_\\theta = \\left ( \\begin{matrix} \\color{teal}{cos\\theta} \u0026 \\color{black}{-sin\\theta} \\\\  \\color{teal}{sin\\theta} \u0026 \\color{black}{cos\\theta} \\end{matrix} \\right )$$\n\n  \n\n[Rotation](https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/mathematics/Rotation.mp4 ':include :type=video controls width=100% height=360px')\n\n  \n\n**平移Translation\n\n**平移**\n\n平移不是一个线性变换，它是一个**仿射变换**，因为线性变换其中的一个特性就是变换前后坐标系的原点保持不变，显然平移不满足这个特性；或者还可以说我们无法用一个矩阵去描述这个变换，不像之前的旋转缩放等变换我们都可以用一个矩阵就可以描述。再从另外一个角度来描述就是我们\"无法通过只使用乘法来描述这个变换\"\n\n我们假设一个场景，在一维情景下，我们有一个数轴，还有三个点在\n$$a=1,\\ b=2,\\ c=3$$\n处，我们想要将这三个点往右移动一个单位,也就是\n$$a'=a+1;\\ b'=b+1,\\ c'=c+1$$\n这是对这三个点都使用\"+1\"这个一个同样的操作我们做到了，那么我们可不可以使用乘法呢？我们观察到，$a'=2,\\ a=1$，要想使用乘法就需要乘以$2$，因为之间相差$2$倍，也就是$a'=2a$,但是对于另外两个点，$2b$和$2c$则不是我们想要的结果，问题我们是否可以找到一个像\"+1\"这么一个统一又优美的操作，使乘法也可以作用于变换呢？答案是，我们暂时找不到\n\n所以，Translation我们需要使用这种方式来表示\n$$\\left ( \\begin{matrix} x'\\\\ y' \\end{matrix} \\right ) = \\left ( \\begin{matrix} a\u0026b\\\\ c\u0026d \\end{matrix} \\right ) \\left ( \\begin{matrix} x\\\\ y \\end{matrix} \\right ) + \\left ( \\begin{matrix} t_x\\\\ t_y \\end{matrix} \\right )$$\n可这样表示后面会多出\n$$\\left ( \\begin{matrix} t_x\\\\ t_y \\end{matrix} \\right )$$\n使得偏偏平移变换与其它的变换**不同**，那有没有其它的方法呢？答案是: [[homogenous_coordinates]] 齐次坐标\n\n\n**变换复合**\n\n[[complex_transformation]]变换复合，很容易就理解\n\n$$\n\\mathbf{T} \\quad\n\\mathbf{R} = \n\\left ( \n\\begin{matrix} 1 \u0026 0 \u0026 1 \\\\ 0 \u0026 1 \u0026 0 \\\\ 0 \u0026 0 \u0026 1 \n\\end{matrix} \n\\right ) \n\\left ( \n\\begin{matrix} \\cos45^\\circ \u0026 -\\sin45^\\circ \u0026 0 \\\\ \\sin45^\\circ \u0026 \\cos45^\\circ \u0026 0 \\\\ 0 \u0026 0 \u0026 1 \n\\end{matrix} \n\\right )\n$$\n\nHere[^1]\n\n3维下\n$$\\left ( \\begin{matrix} x' \\\\ y' \\\\ z' \\\\ 1 \\end{matrix} \\right ) = \\left ( \\begin{matrix} 1\u00260\u00260\u0026t_x \\\\ 0\u00261\u00260\u0026t_y \\\\ 0\u00260\u00261\u0026t_z \\\\ 0\u00260\u00260\u00261 \\end{matrix} \\right ) \\left ( \\begin{matrix} x \\\\ y \\\\ z \\\\ 1 \\end{matrix} \\right ) = \\left ( \\begin{matrix} x+t_x \\\\ y+t_y \\\\ z+t_z \\\\ 1 \\end{matrix} \\right )$$\n\n[^1]: For math render, we use `\\mathbf{T}\\_{x} ` instead of `\\mathbf{T}_{x} `, But some doesn't support.","lastmodified":"2024-06-05T09:48:57.367223771Z","tags":[]},"/adv/mathematics_function":{"title":"Mathematics Function","content":"\n\n函数是把一个集 \"A\" 的元素与另一个集 \"B\" 的元素配对的方法\n\n\n\n\n\n\n[^1]: 数学乐： [函数是什么](https://www.shuxuele.com/sets/function.html)","lastmodified":"2024-06-05T09:48:57.367223771Z","tags":[]},"/adv/mathematics_geometry":{"title":"Mathematics Geometry","content":"\n几何最初是为了建立物理世界的模型而发展起来的\n\n\n## 3D Projection and Geometric Transformation\n\n三维投影（或图形投影）是一种在二维（2D）表面上显示三维（3D）物体的设计技术。\n\n在数学中,几何变换是指一个集合到它本身(或到另一个这样的集合)的任何双射 [[bijection_injection_surjection]]。\n\n\n[[space_and_transformation]]\n\n## Two ears theorem\n\n[[two_ears_theorem]]\n","lastmodified":"2024-06-05T09:48:57.367223771Z","tags":[]},"/adv/my_develop":{"title":"Development","content":"\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.1fo75js2vjj4.webp\" alt=\"image\" width=600/\u003e\n\n# CG\n\n## Dreamworks animation (DWA) usd-manager\n\nhttps://github.com/dreamworksanimation/usdmanager\n\n```bash\n# virtualenv\npython310 -m virtualenv venv\n.\\venv\\scripts\\activate\n\n#  branch: python3\n\npython setup.py install\npip install PySide2\n\npython .\\build\\scripts-3.10\\usdmanager\n```\n\n## AYON\n\n### AYON Frontend\n\n```bash\nREM\nREM ayon-frontend\nREM If you don,t have yarn, you can install it by `npm install -g yarn`\nREM\n\ncd C:\\src\\ayon\\ayon-frontend\n\nyarn install\nyarn build\n```\n\n### AYON launcher\n\n```powershell\n#\n# ayon-launcher\n# 1. On Windows, You need install iscc.exe by scoop install inno-setup\n# 2. python39 -m virtualenv ./venv\n# \n\ncd c:\\src\\ayon\\ayon-launcher\n\n# proxy setup if needed.\n\n.\\venv\\scripts\\activate\n\n./tools/manage.ps1 create-env\n./tools/manage.ps1 install-runtime-dependencies\n./tools/manage.ps1 build\n./tools/manage.ps1 make-installer\n```\n\n### AYON Dependencies Tools\n\n```bash\n# 创建.env文件, 这个apiKey是从项目文件，找一张有图片的，在浏览器按F12，定位元素到这种图片，在url中会显示token，将token填入下方\n: AYON_API_KEY=\n: AYON_SERVER_URL=http://\u003caddr\u003e:\u003cport\u003e\n\ncd C:\\src\\ayon\\ayon-dependencies-tool\n\n# Change python version same as your project, for me for now, it's python3.9.13, my system has 3 versions of python, 3.9,3.10,3.11, and installed by scoop, commonly I use virtualenv, but I removed the default scoop-shims of python.exe,python3.exe, and only keep the python39,python310,python311 on my system.\n\n.\\start.ps1 install\n.\\start.ps1 create -b \u003cbundle_name\u003e\n```\n\n### AYON addons\n\n```bash\n# from self\n# 1. use https://github.com/ynput/ayon-addon-template to create your own addon or clone the official addon repository\n# 2. create a python virtualenv that version compatibility with your project (for now 24.01.17, needs python3.9.13), after create it, activate it. then run\npoetry run python create_package.py\n```\n\n```bash\n# from openpype (all)\ncd c:\\src\\ayon\\openpype\n./.poetry/bin/poetry run python ./server_addon/create_ayon_addons.py\n```\n\n### AYON Documentation\n\n```bash\n# Install yarn if needed\n# npm install -g yarn\nyarn add docusaurus --dev\ncd website\nyarn start\n```\n\n### AYON Docker\n\n#### (for windows Docker Desktop) - **Recommand**\n\n```powershell\n# powershell\ncd C:\\src\\ayon\\ayon-docker\n\n# If you have one, you can speed it up\n$env:http_proxy = \"http://localhost:10809\"\n$env:https_proxy = \"http://localhost:10809\"\n\n# from template.json to server\n#  exection only once need.\n.\\manage.ps1 setup\n\n# Use official docker image\n.\\manage.ps1 update\n\n# build whole things (from local)\n.\\manage.ps1 build\n```\n\n### AYON Backend\n\n#### (for windows WSL)\n\n```bash\n#!/bin/bash\n\n# Windows (WSL)\n\n#\n# On Windows (Outside WSL) - Port Forward\n# - Use `wsl -- ifconfig eth0` get wsl-ip, then:\n# netsh interface portproxy add v4tov4 listenport=5000 listenaddress=0.0.0.0 connectport=5000 connectaddress=\u003cwsl-ip\u003e\n# netsh interface portproxy show all\n# netsh interface portproxy delete v4tov4 listenport=5000 listenaddress=0.0.0.0\n#\n\n#\n# On WSL - Install Project (user environment, root is ok.)\n# - If you have better network for pip, You don't need this line.\n# export http_proxy=http://\u003caddress\u003e:\u003cport\u003e\n# export https_proxy=http://\u003caddress\u003e:\u003cport\u003e\n# pip install -U pip\n# pip install poetry\n# poetry config virtualenvs.create false\n# python3 -m virtualenv /home/\u003cuser\u003e/venv-ayon\n# source /home/\u003cuser\u003e/venv-ayon/bin/activate\n# cd /mnt/c/src/ayon/ayon-backend\n# poetry install --no-interaction --no-ansi\n#\n\n#\n# On noth (Manual)\n# - Windows\n# wsl --shutdown -d Ubuntu-22.04\n# wsl -d Ubuntu-22.04\n# - WSL (ayon.pid, backend-server need, for non-root user only.)\n# sudo touch /var/run/ayon.pid\n# sudo chown \u003cuser\u003e /var/run/ayon.pid\n#\n\n#\n# ! Need yarn build frontend first.\n#\n\n# sh /mnt/c/src/ayon/ayon-backend.sh\n\n. /home/\u003cuser\u003e/venv-ayon/bin/activate\n\necho \u003cpassword\u003e | sudo -S touch /var/run/ayon.pid\necho \u003cpassword\u003e | sudo -S chown \u003cuser\u003e /var/run/ayon.pid\n\n# host_ip=$(cat /etc/resolv.conf |grep \"nameserver\" |cut -f 2 -d \" \")\n# export ALL_PROXY=\"http://$host_ip:\u003cport\u003e\"\n\nexport AYON_postgres_url=postgres://\u003cusername\u003e:\u003cpassword\u003e@\u003caddr\u003e:\u003cport\u003e/ayon\nexport AYON_redis_url=redis://\u003cusername\u003e:\u003cpassword\u003e@\u003caddr\u003e:\u003cport\u003e\n\nexport AYON_frontend_dir=/mnt/c/src/ayon/ayon-frontend/dist\nexport AYON_addons_dir=/mnt/c/src/ayon/ayon-addons/dist\nexport AYON_log_file=/mnt/c/src/ayon/log-backend.log\nexport AYON_SETTINGS_TEMPLATE=/mnt/c/src/ayon/template.json\nexport AYON_force_create_admin=1\nexport AYON_auth_pass_pepper=\u003csecure_password\u003e\n\nexport PYTHONBUFFERED=1\nexport LOGLEVEL=info\n\ncd /mnt/c/src/ayon/ayon-backend\n\ngunicorn \\\n  -k uvicorn.workers.UvicornWorker \\\n  --log-level ${LOGLEVEL} \\\n  --timeout 120 \\\n  -b :5000 \\\n  ayon_server.api.server:app\n```\n\n\n\n### AYON Openpype (Deprecated)\n\n更详细: [[cg_pipeline|CG Pipeline]]\n\n[GitHub - ynput/OpenPype: Main OpenPype repository and AYON openpype addon codebase](https://github.com/ynput/OpenPype)\n\n开源Pipeline管理工具。\n\n```bash\n# python version 3.9.13\n$Env:http_proxy = \"http://localhost:10809\"\n$Env:https_proxy = \"http://localhost:10809\"\n.\\tools\\create_env.ps1\n.\\tools\\fetch_thirdparty_libs.ps1\n.\\tools\\build.ps1\n```\n\n## Armory\n\n### ArmorCore\n\n```bash\ncd armorcore\n# Unpack `v8\\libraries\\win32\\release\\v8_monolithz` using 7-Zip - Extract Here (exceeds 100MB)\n.\\Kinc\\make.bat -g direct3d11\n```\n\n### ArmorPaint\n\n[GitHub - armory3d/armortools: 3D Content Creation Tools](https://github.com/armory3d/armortools)\n\n贴图绘制软件。\n\n```bash\n# 解压 `..\\armorcore\\v8\\libraries\\win32\\release\\v8_monolithz` using 7-Zip - Extract Here (exceeds 100MB)\n\n# 生成工程\ncd c:/src/armortools/armorpaint\n..\\armorcore\\Kinc\\make --from ..\\armorcore -g direct3d11\n\n# 在\"build\\ArmorPaint.sln\"中打开生成的 Visual Studio 项目针对 x64 和Release进行构建和运行\n\n# Copy build\\x64\\Release\\ArmorPaint.exe to build\\krom to run ArmorPaint.exe directly\n```\n\n### Armory3D\n\n[GitHub - armory3d/armory: 3D Engine with Blender Integration](https://github.com/armory3d/armory)\n\n一个游戏引擎，可以在 Blender 中构建游戏。\n\n### ArmorLab\n\nAI驱动的纹理创作工具，图片或文字-\u003e贴图。\n\n```bash\ncd armortools/armorlab\ngit clone https://github.com/armory3d/onnx_bin onnx\n# Unpack `models.zip` from https://github.com/armory3d/armorai/releases into `Assets/models` using 7-Zip - Extract Here\n\n# Unpack `..\\armorcore\\v8\\libraries\\win32\\release\\v8_monolithz` using 7-Zip - Extract Here (exceeds 100MB)\n..\\armorcore\\Kinc\\make --from ..\\armorcore -g direct3d11\n```\n\n## OpenUSD\n\n[GitHub - PixarAnimationStudios/OpenUSD: Universal Scene Description](https://github.com/PixarAnimationStudios/OpenUSD)\n\n数据交换格式。\n\n**构建**\n\n```bash\n# python version 3.10.11\n# run `x64 Native Tools Command Prompt for VS 2022`\n# for download usd-src\nset http_proxy=http://localhost:10809\nset https_proxy=http://localhost:10809\n# venv\npython -m pip install virtualenv\npython -m virtualenv C:/src/OpenUSD/venv\ncall C:/src/OpenUSD/venv/Scripts/activate\n# for usdview\npip install PyOpenGL\npip install PySide6\npip install opencolorio\npip install numpy\n# for usdSchemaGen\npip install jinja2\n# build dry run, to build remove -n option\npython .\\build_scripts\\build_usd.py --materialx --draco --alembic --hdf5 --openimageio --opencolorio --embree --openvdb --ptex --prman --test --build-variant=relwithdebuginfo --src=c:\\data\\build\\usd-src --build-args=USD,\"-DPXR_ENABLE_VULKAN_SUPPORT=FALSE -DRENDERMAN_LOCATION=C:/data/plugins/RenderManProServer-25.2\" c:\\data\\build\\usd-build –n\n```\n\n**Schema**\n\n```\nusdGenSchema [schemaPath] [codeGenPath]\n```\n\n## Blender\n\n[Blender Developer Wiki](https://wiki.blender.org/wiki/Main_Page)\n\n开源全功能的DCC软件。\n\n```bash\ngit clone https://projects.blender.org/blender/blender.git\ncd C:\\src\\blender-git\\blender\nmake update\nmake full nobuild\n```\n\n## QuiltiX\n\n[GitHub - PrismPipeline/QuiltiX: QuiltiX is a graphical node editor to edit, and author MaterialX based materials of 3D assets](https://github.com/PrismPipeline/QuiltiX)\n\n基于节点的MaterialX材质编辑。\n\npython version 3.9.13\n\n```bash\n# via pypi (install)\npip install QuiltiX\npip install git+https://github.com/PrismPipeline/OpenUSD_build.git@23.11-win-mtlx-1.38.8\n\n# run\npython -m QuiltiX\n```\n\n## gatling\n\n[GitHub - pablode/gatling: Hydra-enabled GPU path tracer that supports MaterialX and MDL](https://github.com/pablode/gatling)\n\nHydra光追渲染器。\n\n```bash\ncmake -B build -Wno-dev -DUSD_ROOT=%E_USD_LOCATION% -DMDL_ROOT=%E_MDLSDK_DIR% -DCMAKE_INSTALL_PREFIX=C:/data/build/gatling -DCMAKE_BUILD_TYPE=Release\ncmake --build build --config Release --target INSTALL -- /M:8\n```\n\n## xComp\n\n[GitHub - gugenstudio/xComp: best render comparing software in town!](https://github.com/gugenstudio/xComp)\n\n```bash\ncmake -B build -DCMAKE_TOOLCHAIN_FILE=\"%E_VCPKG_DIR%\\scripts\\buildsystems\\vcpkg.cmake\"\n\ncmake --build build --target xcomp --config Release\n\n# Working-dir on \n#   C:/src/xComp/apps/xcomp/../debug_dir\n# Copy _bin/Release/* to Working-dir\n```\n\n# AI\n\n## SD-WebUI-EasyPhoto\n\n[GitHub - aigc-apps/sd-webui-EasyPhoto: 📷 EasyPhoto | Your Smart AI Photo Generator.](https://github.com/aigc-apps/sd-webui-EasyPhoto)\n\n输入了一些右下方的图片训练出Lora后，就可以扩散风格到人物肖像上。\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/1702548443361.webp\" alt=\"1702548443361\" width=700/\u003e\n\n## ComfyUI\n\n[GitHub - comfyanonymous/ComfyUI: The most powerful and modular stable diffusion GUI with a graph/nodes interface.](https://github.com/comfyanonymous/ComfyUI)\n\nSD的图形用户界面，具有节点图。\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/1702519000724.webp\" alt=\"1702519000724\" width=500/\u003e\n\n## Stable-diffusion-Webui\n\n[GitHub - AUTOMATIC1111/stable-diffusion-webui: Stable Diffusion web UI](https://github.com/AUTOMATIC1111/stable-diffusion-webui)\n\n```bash\n# python version 3.10.11\ngit clone https://github.com/AUTOMATIC1111/stable-diffusion-webui.git\n\n.\\webui-user.bat\n```\n\n**config**\n\nwebui-user.bat\n\n```bash\nset COMMANDLINE_ARGS=--ckpt-dir \u003cpath\u003e --lora-dir \u003cpath\u003e\n```\n\n\n## Krita-ai-diffusion\n\n[GitHub - Acly/krita-ai-diffusion: Streamlined interface for generating images with AI in Krita. Inpaint and outpaint with optional text prompt, no tweaking required.](https://github.com/Acly/krita-ai-diffusion)\n\n在 Krita 中使用AI生成图像的一个插件。\n\n## MiniGPT-4\n\n[GitHub - Vision-CAIR/MiniGPT-4: Open-sourced codes for MiniGPT-4 and MiniGPT-v2 (https://minigpt-4.github.io, https://minigpt-v2.github.io/)](https://github.com/Vision-CAIR/MiniGPT-)\n\n1.我使用的Vicuna-7B，`low_resource=False`, 最少GPU显存 16GB。如果是`True`，我这里使用了10GB。\n2.安装CUDA Toolkit 12/11。\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/1702518989918.webp\" alt=\"1702518989918\" width=650/\u003e\n\n**Windows的支持**\n\n[Windows not supported · Issue #28 · Vision-CAIR/MiniGPT-4 · GitHub](https://github.com/Vision-CAIR/MiniGPT-4/issues/28)\n\n```bash\n# 也许可以不用conda，使用virtualenv\ngit clone https://github.com/Vision-CAIR/MiniGPT-4.git\ncd MiniGPT-4\n##conda env create -f environment.yml\n##conda activate minigptv\n\n# 卸载不支持GPU版本的包\npip uninstall bitsandbytes\npip uninstall torch\n# 重新安装torch与bitsandbytes\n##这个不更新啦，使用下面那个\n##pip install git+https://github.com/Keith-Hon/bitsandbytes-windows.git\npip install scipy\npip install bitsandbytes==0.41.2 --index-url=https://jllllll.github.io/bitsandbytes-windows-webui\n\npip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121\n\n---\n\npython demo_v2.py --cfg-path eval_configs/minigptv2_eval.yaml  --gpu-id 0\n```\n\n\n## FastChat\n\n[GitHub - lm-sys/FastChat: An open platform for training, serving, and evaluating large language models. Release repo for Vicuna and Chatbot Arena.](https://github.com/lm-sys/FastChat)\nGPU16GB显存，加载了vicuna-7b和vicuna-13b。\n\n```bash\ngit clone https://github.com/lm-sys/FastChat.git\ncd FastChat\n# use venv\npip3 install --upgrade pip  # enable PEP 660 support\npip3 install -e \".[model_worker,webui]\"\n\n---\n\n# cli\npython -m fastchat.serve.cli --model-path lmsys/vicuna-7b-v1.5-16k --load-8bit --cpu-offloading\n\n# gradio\npython -m fastchat.serve.controller\npython -m fastchat.serve.model_worker --model-path lmsys/vicuna-7b-v1.5-16K --load-8bit --cpu-offloading\npython -m fastchat.serve.gradio_web_server\n```\n\n\n\n# Ye\n\n## ub\n\npython开发环境\n\n```bash\npython310 -m virtualenv C:\\src\\Ye\\src\\ub\\venv\n# pip install dependenties with requirements.txt\n```\n\n\n# Dev\n\n## (Tools)\n\n### pyside-setup\n\n### vcpkg\n\n```bash\n# download \u0026 install\ngit clone https://github.com/microsoft/vcpkg\n.\\vcpkg\\bootstrap-vcpkg.bat\n\n# qt6\n...\n```\n\n## (Python)\n\n### conda \n\n```bash\n# Shell Register\nconda init cmd.exe\n# Shell Unregister\nconda init cmd.exe --reverse\n\n# Update\nconda update -n base -c defaults conda\n## Or minimize update use\nconda install conda=23.11.0\n```\n\n### pyenv \n\n\u003e [!ERROR] Till the 2023-12-08，Using scoop install pyenv causing error `core` compoment install error.  So we use this command `Invoke-WebRequest -UseBasicParsing -Uri \"https://raw.githubusercontent.com/pyenv-win/pyenv-win/master/pyenv-win/install-pyenv-win.ps1\" -OutFile \"./install-pyenv-win.ps1\"; \u0026\"./install-pyenv-win.ps1\"` from [Installing and setting up Python - Everything I Know](https://jonathansoma.com/everything/setup/install-python/#__tabbed_3_2)\n\n在这之后，需要执行 pyenv update 去更新仓库。\n\n\u003e [!WARNING] Building Ye and blender warning. say python not found.\n### pipx\n\n[GitHub - pypa/pipx: Install and Run Python Applications in Isolated Environments](https://github.com/pypa/pipx)\n\n```bash\n# python version 3.10.11\npython -m pip install --user pipx\n\n# add executable to environment path\npython -m pipx ensurepath\n\npipx install pycowsay\n\n```\n\n### poetry\n\n[GitHub - python-poetry/poetry: Python packaging and dependency management made easy](https://github.com/python-poetry/poetry)\n\nInstall and Upgrade\n\n```bash\npython -m pipx install poetry\npython -m pipx upgrade poetry\n\n# Or\n# create virtualenv, then (Recommand)\npip install poetry\n\n# Or\n\npip install pipx\npipx install poetry\npipx upgrade poetry\n```\n\n## (Version Control)\n\n\n1. gitbucket\n\n```bash\nscoop bucket add java\nscoop install temurin11-jdk\n\nset GITBUCKET_PORT=12122\nset GITBUCKET_HOST=0.0.0.0\nset GITBUCKET_HOME=\u003cyour_data_path\u003e # The default is $HOME/gitbucket\njava -jar gitbucket.war\n```\n\nhttps://github.com/gitbucket/gitbucket\n\n1. git\n2. SnowFS\n\n---\n\n1. TortoiseSVN\n\n```bash\n# 重置当前仓库\nsvn revert --recursive .\n# 忽略文件(项目级)\n图形界面 TortoiseSVN -\u003e Properties -\u003e New -\u003e Other -\u003e svn:global-ignores\n# 忽略文件(目录级)\n选中一个文件/目录 -\u003e TortoiseSVN -\u003e Properties -\u003e New -\u003e Other -\u003e svn:ignore\n```\n\n2. VisualSVN Server\n\n\u003e [!INFO]\n\u003e SVN -\u003e Import 可以将当前目录的所有文件上传项到SVNServer的版本库。\n\u003e SVN -\u003e Checkout 输入仓库地址与路径可以检出。\n\n\u003e [!ERROR]\n\u003e 1.SVN连接不到VisualSVN服务，检查是不是开启了代理。`%appdata%\\Subversion\\servers` 编辑这个文件，注释掉下方两行。\n\n```config\n#http-proxy-host = 127.0.0.1\n#http-proxy-port = 10809\n```\n\n\u003e [!ERROR] 2.SVN图标在Winodws11下不显示。原因是SVN的图标在注册表中靠后了。（Windows按照空格来排），(Explorer空白处右键 ) -\u003e TortoiseSVN -\u003e Settings -\u003e Icon Overlays -\u003e Overlay Handles -\u003e Start registry Editor进行编辑，增加多几个空格使其排名靠前。\n\n## (Database Connection)\n\nMongosh - https://www.mongodb.com/try/download/compass\nMysqlsh - https://dev.mysql.com/downloads/shell/\n\nfor database install on Linux, see [[os_linux|OS-Linux]]\n\n## (Cloud Services)\n\n**我们缺少的不是工具，而是真正产生价值的点子。**\n\nVercel\nCloudflare\nfly.io\n\n# (AI)\n\n### 概念\n\n* pytorch: [Start Locally | PyTorch](https://pytorch.org/get-started/locally/)\n* tensorflow: [GitHub - tensorflow/tensorflow: An Open Source Machine Learning Framework for Everyone](https://github.com/tensorflow/tensorflow)\n* ONNX：Open Neural Network Exchange（开放式神经网络交换）[ONNX | Home](https://onnx.ai/)\n* OpenVINO - 从框架中优化深度学习模型。\n\n* Gradient descent 梯度下降 - （鞍点，局部最优）\n\t* derivate - 求导，learning rate 学习速率\n\t* sgd 随机梯度下降，Momentum动量，Adam (替代随机梯度下降算法)\n\t* partial derivate 偏微分\n\t* gradient 梯度 - 所有的偏微分的向量 e.g. $\\nabla f=\\left({\\frac{\\partial f}{\\partial x_{1}}};{\\frac{\\partial f}{\\partial x_{2}}};\\cdot\\cdot;{\\frac{\\partial f}{\\partial x_{n}}}\\right)$\n\t* Convex function 凸函数 - 全局最优解\n\t* 梯度离散/爆炸 - 误差积累导致，前层得不到更新\n* Backpropagation 反向传播\n* Activation Functions 激活函数 - 阈值响应机制\n\t* Sigmoid - $f(x)=\\sigma(x)={\\frac{1}{1+e^{-x}}}$\n\t* Tanh - $2 sigmoid (2x)-1$\n\t* Rectified Linear Unit  (ReLU) - $f(x)={\\left\\{\\begin{array}{l l}{0}\u0026{{\\mathrm{for~}}x\u003c0}\\\\ {x}\u0026{{\\mathrm{for~}}x\\geq0}\\end{array}\\right.}$\n\t* Leaky ReLU\n\t* SELU - 两个函数的合并\n\t* Softmax - [Logits Scores -\u003e Softmax -\u003e Probabilities], 概率和为1\n\t* Softplus - ReLU函数的平滑版本\n* Typical Loss\n\t* Mean Squared Error (MSE) 均方误差\n\t* Cross Entropy Loss 交叉熵\n\t* Hinge Loss\n* Himmelblau Function函数 - 数学家构造的特殊函数，用来测试深度学习算法是否能够收敛到局部最小值。\n* Chain rule链式法则 - \u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/1702375241410.webp\" alt=\"1702375241410\" width=300/\u003e 求解过程是 ${\\frac{\\partial E}{\\partial w_{j k}^{1}}}={\\frac{\\partial E}{\\partial{\\sigma_{k}^{1}}}}{\\frac{\\partial{\\sigma_{k}^{1}}}{\\partial{w_{j k}^{1}}}}={\\frac{\\partial E}{\\partial{\\sigma_{k}^{2}}}}{\\frac{\\partial{\\sigma_{k}^{2}}}{\\partial{\\sigma_{k}^{1}}}}{\\frac{\\partial{\\sigma_{k}^{1}}}{\\partial{w_{j k}^{1}}}}$\n* Dropout regularization - 为了防止过拟合。Dropout的思想是对于网络的每一层，随机的丢弃一些单元。\n* PCA - 主元分析，用于提取数据的主要特征分量。主要用于数据降维。例如两维数据房价与面积，房价与面积的正相关性很大，其中一维的数据是冗余的。\n* Sequence 序列\n\t* Word Embedding\n\t* Word2vec\n\t* GloVe\n\t* One-hot: `[0,1,0,0,…]` - 稀疏，高维\n* AutoEncoders - \u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/1702399346359.webp\" alt=\"1702399346359\" width=300/\u003e 中间是Neck，可以升/降维。\n\t* Denoising AutoEncoders 去噪自编码器\n\t* Dropout AutoEncoders\n\t* Adversarial AutoEncoders  对抗自编码器\n\t* Variational AutoEncoder (VAE) 变分自编码器\n* Gradient Clipping - 用于缓解梯度爆炸。\n* Zeno/One/Few-Shot Learning 零/一/少样本学习。例如，当我们只有一张狮子的照片时，一次样本学习可以帮助我们将新的狮子图像正确分类。\n* **RLHF**（Reinforcement Learning from Human Feedback，人类反馈强化学习）。是GPT-4/ChatGPT与GPT-3.5的主要区别。\n* Anomaly Detection 异常侦测\n* LoRA，英文全称Low-Rank Adaptation of Large Language Models，直译为大语言模型的低阶适应，这是微软的研究人员为了解决大语言模型微调而开发的一项技术。\n* PGNet是一种新颖的框架，用于通过点收集操作实时阅读文本。 基于多任务学习的单步文本检测识别器。\n\n---\n* AGI（通用人工智能）1.人工智慧是我们的目标。2.人类的能力是本能与学习。\n\t* Machine Learning - 1.是达成目标的手段。2.就是让机器找到一个函式（找到函式三步骤- a.设定范围(订出候选函式集合-Model)，b.设定标准(评量函式好坏-Loss)，c.达成目标(找出最好的函式-最佳化Optimization)）。\n\t\t* Deep Learning 深度学习 1.是机器学习的其中一种方法\n* Supervised Learning\n\t* Linear Regression 线性回归 $wx+b$\n\t* Logistic Regression 逻辑回归 - 线性回归的基础上加了一个激活函数（压缩函数）\n\t* Classification 分类问题\n\t* Semi-supervised Learning - 半监督学习。\n* Unsupervised Learning\n* Reinforcement Learning - 增强学习。游戏例如Dota，与环境交互反馈。\n* Representation Learning - 表征学习。\n* Structured (Generative) Learning - 结构(生成式)学习。\n* Meta Learning - 元学习，也叫做学会学习，learn to learn。人类学习新东西时会用到之前学的东西，比如你会玩LOL，那么对玩王者荣耀会很快。目前的深度学习遇到的问题是在遇到新的问题，即使比较类似的情况下，也要重新学习，这一差异就是MetaLearning的动机。\n* Transfer Learning 迁移学习 一种神经网络学习到了识别Cat这种物体，再使用这部分知识或者部分知识去识别X-Ray扫描。（Pre Training 预训练, Fine Turning 微调）\n* Multitask Learning - 神经网络同时执行多项任务，每个任务都会影响其他任务\n\n---\n\n* Feedforward neural network (前馈神经网络) 也叫做感知机（Perceptron） - 二分类线性模型\n* SVM (Support vector machine) 支持向量网络 - \u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/1702374445464.webp\" alt=\"1702374445464\" width=150/\u003e\n\n* 卷积神经网络：局部感知 - $y(t)=x(t)*h(t)=\\int_{-\\infty}^{\\infty}x(\\tau)h(t-\\tau)d\\tau$\n\t* Weight sharing 权值共享 \u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/1702379993258.webp\" alt=\"1702379993258\" width=260/\u003e\n\t* 池化 - Max pooling, Avg polling\n\t\t* Downsample, Upsample, Subsampling\n\n* RNN 循环神经网络  - (Hard to parallel) 语境信息上下文，引入memory的机制， \u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.67dklaknt5c0.webp\" alt=\"image\" width=300/\u003e, 问题是很容易造成梯度离散或梯度爆炸。\n\t- LSTM - (Long Short-Term Memory) 长短时记忆 - 解决了记忆长度的问题。引入\"闸门\"的机制。\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/1702394510046.webp\" alt=\"1702394510046\" width=300/\u003e 闸门就是Sigmoid函数。输入门，遗忘(记忆)门。\n* CNN 卷积神经网络  - Using CNN to replace RNN (CNN Can parallel)\n* GAN 生成对抗性网络  \n\t* Train 训练 $\\begin{array}{l l}{{\\operatorname*{min}\\operatorname*{max}L(D,G)=\\mathbb{E}_{x\\to p_r(x)}[\\log D(x)]+\\mathbb{E}_{z\\to p_z(z)}[\\log(1-D(G(z)))]}} \\end{array}$\n\t* Generator 生成\n\t* Discriminator 鉴别 [一文看懂「生成对抗网络 - GAN」基本原理+10种典型算法+13种应用](https://easyai.tech/ai-definition/gan/)\n* Self-Attention Layer - Transformer\n\t- q:query (to match other)\n\t- k:key (to be matched)\n\t- v:information to be extracted\n\t- -\n\t- Positional Encoding ($e^i$)\n* Multi-head Self-Attention (MHSA)\n\t- Norm (Layer Norm, Batch Norm, Instance Norm, Group Norm)\n* **Transformer** \u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/1702297659308.webp\" alt=\"1702297659308\" width= 260/\u003e 这是一个seq2seq的model，左半部是Encoder，右半部是Decoder。\n\t* Universal Transformer - (横轴Positions使用Transformer，纵轴Depth使用RNN)\n\t* Vision Transformer - 是Google提出的基于Transformer的图片分类模型。\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/1702523427973.webp\" alt=\"1702523427973\" width=300/\u003e\n* Self-attention GAN - 用于影像处理的Transformer，一个pixel考虑全部pixel信息。\n* 扩散模型\n\t* Noising Process \u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.xi3onj9rqjk.webp\" alt=\"image\" width=200/\u003e\n* 多模态模型架构 \u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/1702558622286.webp\" alt=\"1702558622286\" width=300/\u003e\n\t* 1）**合并注意力架构**（Merge-attention）\n\t* 2）**共同注意力架构**（Co-attention）\n\t* 3）**交叉注意力架构**（Cross-attention）\n\t* 4）**三角Transformer架构**（Tangled-transformer）\n\t* 5）**模态间对比学习架构**（Inter-Modality Contrastive Learning）\n\n\n### 模型\n\n* 大型语言模型（LLM）- 文字接龙..\n\t* ChatGPT\n\t* [nanoGPT](https://github.com/karpathy/nanoGPT) 是一个用于对中等规模的生成式预训练 Transformer（GPT）进行训练和调优的框架。\n\t* Llama2\n\t* Mistral-7B\n\t* Mixtral 8x7B - MoE（Mixture of Experts）\n\t* WizardCoder\n\t* 羊驼系列\n\t\t* Vicuna -Based On LLaMa-13B\n\t\t* Alpaca -Based On LLaMa-7B\n\t\t* Guanaco - Based On QLoRA quantification\n\t* LaMDA (Language Models for Dialog Applications)\n\n* 多模态模型\n\t* GPT 生成式预训练变换模型\n\t* Macaw-LLM：具有图像、视频、音频和文本集成的多模态语言建模\n\t* CLIP ViT-L (Vision Transformer - Low resolution): Connecting text and images。\n\t* Stable Diffusion\n\t* SVD (Stable Video Diffusion)\n\t* Flamingo\n\t* LLaVA\n\n* 扩散模型\n\t* 连续型扩散模型\n\t\t* DDPM 去噪扩散概率模型（Denoising Diffusion Probabilistic Models）\n\t\t* DDIM 去燥扩散隐式模型 （Diffusion Denoising Implicit Model）\n\t\t* Improved Diffusion\n\t\t* Classifier Guidance 亦被称为Guided Diffusion\n\t\t* Classifier Free Guidance\n\t\t* DALL-E-2 - AI图形生成器\n\t\t* Google Imagen\n\t\t* LCM (Latent Consistency Model)\n\t\t\n\t* 离散型扩散模型\n\t\t* Multinomial Diffusion\n\t\t* D3PM\n\t\t* ImageBART\n\n* 语言表征模型\n\t* BERT\n\t* GPT\n\t* ELMO\n\n* 视觉模型\n\t* MiDaS - 通过单张图像计算相对深度。\n\t* Next-ViT - [[2207.05501] Next-ViT: Next Generation Vision Transformer for Efficient Deployment in Realistic Industrial Scenarios](https://arxiv.org/abs/2207.05501)\n\t* VI-Depth\n\n* 卷积神经网络模型\n\t* ResNet (深度残差网络):  短路层(Skip to shortcut)\n\t* AlexNet\n\t* GoogLeNet - 22 layers\n\t* VGGNet-11/16/19 - 更小型的卷积核心。1x1 convolutions.\n\t* LeNet - 80年代\n\t* UNet - 为生物医学图像分割开发的卷积神经网络。\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/1702522306435.webp\" alt=\"1702522306435\" width=400/\u003e\n\n* 其它模型\n\t* SMPL - A Skinned Multi Person Linear Model，用于人体动作捕捉。\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/1704342182177.webp\" alt=\"1704342182177\" width=400/\u003e\n\n**有哪些数据集**\n\n* MNIST - 手写数字\n* ImageNet\n* CIFAR10/100 - 10类6000张照片。\n\n## 资料\n\n谷歌研究论坛[Google Research Blog](https://blog.research.google/)\n词嵌入数据可视化[Embedding projector - visualization of high-dimensional data](https://projector.tensorflow.org/)\nLLM可视化 [https://bbycroft.net/llm](https://bbycroft.net/llm)\n\n李宏毅\n吴恩达 Andrew NG\n\n## 学习路径\n\n1. 10分鐘了解RNN的基本概念 [6AW80qmaAOk]\n2. Let's build GPT： from scratch, in code, spelled out. [kCc8FmEb1nY]\n3. Multitask Learning (C3W2L08) [UdXfsAr4Gjw]\n4. Transfer Learning (C3W2L07) [yofjFQddwHE]\n5. 扩散模型是如何工作的-系列 [oSmlciqXOaU]\n6. PyTorch深度学习框架-龙良曲\n\n## 应用\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/1702620460693.webp\" alt=\"1702620460693\" width=500/\u003e\n\n* GPT\n\t* 文字冒险游戏 (ChatGPT) \u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/1702572278800.webp\" alt=\"1702572278800\" width=300/\u003e \n\t* 解决数学问题(FunSearch)\n* Diffusion\n\t* 可控的图像生成 (ControlNet) \u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/1702572357330.webp\" alt=\"1702572357330\" width=300/\u003e\n\t* 图像编辑(概念转换) (DreamBooth) \u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/1702572462628.webp\" alt=\"1702572462628\" width=300/\u003e\n\t* 图像编辑(文本驱动)\n\t* 图像修复/扩展\n\t* 图像的风格迁移 (BLIP-Diffusion) \u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/1702572827664.webp\" alt=\"1702572827664\" width=300/\u003e\n\t* 图像的交互式编辑 (DragGAN,DragDiffusion)\n\n# (Graphics)\n\n## 概念\n\n* 场\n\t* 标量场 - 符号距离场(SDF)， 密度场(Density Field)， 散度场(描述一点是汇聚还是扩散)\n\t\t* 符号距离场 - 梯度即法线，大小即距离\n\t* 向量场 - 速度场，涡度场，加速度场\n* 场的操作\n\t* 标量场 - 梯度(输出：向量场)，曲率，拉普拉斯（作用，平滑，算子：热扩散）\n\t* 向量场 - 散度(输出：标量场)，旋度，归一化\n\t* RenormalizeSDF - 包面的几何只有表示内外而没有距离。需要做Eikonal equation(程函方程)得到带有距离的SDF\n* 场，几何，粒子\n\t* 场实际上是任意的几何与粒子的中间介质（中间表达）\n* 自由表面 （free surface），包面后的几何\n* Eikonal equation(程函方程) - 程函方程的一般形式为$|\\nabla u(x)|=F(x), x∈Ω$，  约束条件：边界$u(x)$为$0$；$F(x)$是位置的函数， $|·|$  是欧几里得范数，$u(x)$是从边界到Ω内部x的所需要的最短时间，F(x)是在x处耗费的时间。\n  \u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/1702320461230.webp\" alt=\"1702320461230\" width=400/\u003e\n","lastmodified":"2024-06-05T09:48:57.367223771Z","tags":[]},"/adv/my_finder":{"title":"Finder","content":"# 订阅\n\n1. 作者分享Github上有趣好玩的项目，爱捣鼓者的福音 [HelloGitHub](https://hellogithub.com/) \n\t\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.632zeltq1d00.webp\" alt=\"image\" width=500/\u003e\n2. 科技爱好者周刊，分享了很多有趣的内容 [weekly/issue-246 (ruanyf-weekly.vercel.app)](https://ruanyf-weekly.vercel.app/weekly/) \n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.5jdxzoihxy00.webp\" alt=\"image\" width=500/\u003e\n3. 哲学电子书，包含了法家，墨家等等相关的著作 [中国哲学书电子化计划](https://ctext.org/zhs) \n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.13j7r93ht43g.webp\" alt=\"image\" width=500/\u003e\n4. 另一种维基百科，可以搜索你想了解的方方面面的知识 [英文-wikiHow: How-to instructions you can trust.](https://www.wikihow.com/Main-Page) [中文-wikiHow：你可以信赖的万事指南](https://zh.wikihow.com/%E9%A6%96%E9%A1%B5)\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.4gy89hr8e520.webp\" alt=\"image\" width=500/\u003e\n5. 另一个科技周刊，也是很不错的 [1Link.Fun 科技周刊](https://1link.fun/) \n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.73f6cf89tsg0.webp\" alt=\"image\" width=500/\u003e\n6. Python 潮流周刊，包括精品文章、教程、开源项目、工具、视频和热门话题等 - [GitHub - chinesehuazhou/python-weekly: Python 潮流周刊，分享文章、教程、开源项目、软件工具、播客和视频、热门话题等内容](https://github.com/chinesehuazhou/python-weekly)\n7. 独立开发产品变现周刊，每周五发布。[GitHub - ljinkai/weekly: 独立开发产品变现周刊，每周五发布。](https://github.com/ljinkai/weekly)\n\n# 论坛\n\n1. 创意工作者社区，讨论编程，设计，硬件，游戏等话题 [Way to explorer](https://v2ex.com/) \n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.1kl4zjoa0o00.webp\" alt=\"image\" width=500/\u003e\n2. 骇客新闻，很大的一个讨论社区，各种新奇的想法与事物 [Hacker News (ycombinator.com)](https://news.ycombinator.com/news)\n   \u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.3dh73d18qnk0.webp\" alt=\"image\" width=500/\u003e\n\n# 博客\n\n1. 中文独立博客 [GitHub - timqian/chinese-independent-blogs: 中文独立博客列表](https://github.com/timqian/chinese-independent-blogs)\n   \u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.1xg7qbg4lnfk.webp\" alt=\"image\" width=500/\u003e\n\n2. 一个博客网站，有作者研究的一些算法，其中有些与Unity相关 - [Habrador: Open Source Projects, Elon Musk biography, Tesla Simulator, Unity Tutorials, and much more | Habrador](https://www.habrador.com/) \n   \u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.720kd7tqmjo0.webp\" alt=\"image\" width=500/\u003e\n3. 关于视效的学习与分享 [凌云的个人博客 (lingyunfx.com)](https://lingyunfx.com/)\n\n4. 开源的学习程序的网站，包括了Python,C++,Docker,机器学习等等等的资料 [Open Source: 2021 - Python/Docker/Kubernetes/DevOps/BigData/Machine Learning/](https://www.bogotobogo.com/index.php)\n5. 与程序开发有关的博客网站，包含了作者的一些思考[P.J. Onori’s blog (pjonori.blog)](https://pjonori.blog/)\n6. 一个英文博客网站，可以去阅读作者写的一些文章 [James Clear](https://jamesclear.com/)\n   \u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.2rqep181azo0.webp\" alt=\"image\" width=500/\u003e\n7. 知识网站，包含了健康，技术，社会等等等的类别[Knowable Magazine](https://knowablemagazine.org/)\n8. 他的网络日志，记录了开发日常问题，知识想法等等 [Home - wuxinhua.com](https://wuxinhua.com/)\n   \u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.4sl3fnyuoxk0.webp\" alt=\"image\" width=500/\u003e\n9. 经济，技术，社会等等想法的博客 [诺亚皮尼翁 |诺亚·史密斯 |子堆栈 (noahpinion.blog)](https://www.noahpinion.blog/) [The Convivial Society | L. M. Sacasas | Substack](https://theconvivialsociety.substack.com/) [The Map is Mostly Water | Simon Sarris | Substack](https://map.simonsarris.com/)\n10. 新闻网站 [Nice News (nicenews.com)](https://nicenews.com/)\n11. 个人博客网站，作者自己的想法 [Robert Birming](https://robert.bearblog.dev/)\n12. 个人博客网站，作者的知识卡片 [AboutTheGarden](https://garden.oldwinter.top/)\n13. 个人博客网站，开源作者的创造 [GitHub - zenorocha/zenorocha.com: My personal website ❤️](https://github.com/zenorocha/zenorocha.com)\n\n\n# 工具\n\n## 备份\n\n1. restic go语言写的备份工具 [GitHub - restic/restic: Fast, secure, efficient backup program](https://github.com/restic/restic)\n\n## 笔记\n\n1. 做笔记工具 (Obsidian + Obsidian Plugin(Digital Garden)) [[digital_garden|Digital Garden]]\n2. Notion [[my_notion|My Notion Share]]\n\n## 合作\n\n1.支持多人编辑的白板[GitHub - tldraw/tldraw: a very good whiteboard](https://github.com/tldraw/tldraw)\n\n## 流程\n\n\u003e 影视动画游戏\n\n1. Royal Render 渲染管理工具\n\n## 建站\n\n1. Halo 非常容易上手的一个建站工具。丰富的插件与主题。[GitHub - halo-dev/halo: 强大易用的开源建站工具。](https://github.com/halo-dev/halo)\n2. 专为作家打造的基于 Markdown 的简洁出版平台。[GitHub - writefreely/writefreely: A clean, Markdown-based publishing platform made for writers. Write together and build a community.](https://github.com/writefreely/writefreely)\n3. Hexo [GitHub - hexojs/hexo: A fast, simple \u0026 powerful blog framework, powered by Node.js.](https://github.com/hexojs/hexo)非常简单的命令就可以搭建起一个简单博客网站。\n```\n- npm install hexo-cli -g\n- hexo init blog\n- cd blog\n- npm install\n- hexo server\n```\n4. BookStack 一个用PHP和Laravel建立的创建文档/wiki内容的平台。[GitHub - BookStackApp/BookStack: A platform to create documentation/wiki content built with PHP \u0026 Laravel](https://github.com/BookStackApp/BookStack)。windows下的安装稍微麻烦点。需要参考视频 [Manual BookStack Installation on Windows 10 - YouTube](https://www.youtube.com/watch?v=_v-4BhVz7OI)\n5. Hugo+Netlify 轻松创建任何类型网站，无依赖  https://github.com/HugoBlox/hugo-blox-builder\n\n## 游戏\n\n1. 开源的跨平台多人游戏引擎框架， 由Rust、WebAssembly (WASM) 和 WebGPU 提供支持。 [GitHub - AmbientRun/Ambient: The multiplayer game engine](https://github.com/AmbientRun/Ambient)\n\n## 未分类\n\n1. 可以查看地球上的天气信息，种类很多 [GitHub - cambecc/earth: a project to visualize global weather conditions](https://github.com/cambecc/earth) \n   \u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.2jpt613sv5k0.webp\" alt=\"image\" width=500/\u003e\n\n2. 表白代码收藏馆，用了保证找不到女朋友 (●'◡'●) [GitHub - sun0225SUN/Awesome-Love-Code: 表白代码收藏馆\\~谁说程序猿不懂浪漫❤️](https://github.com/sun0225SUN/Awesome-Love-Code) \n   \u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.2zjmdc3dubk0.webp\" alt=\"image\" width=500/\u003e\n3. Mastodon instances 搜索[Mastodon instances](https://instances.social/) IOS上可以下载Ice Cubes使用\n4. Online WebDAV Client 在线的WebDAV客户端，可以连接远程的WebDAV服务，但localhost好像不行。[WebDAV Client | An online WebDAV Client tool](https://www.filestash.app/webdav-client.html)\n5.  Vim在线编辑器 [https://www.vimonlineeditor.com/](https://www.vimonlineeditor.com/) **Vim Online Editor**\n6. 不需要注册就可以使用的在线工具，有[https://www.nosignup.tools/](https://www.nosignup.tools/) \n7. [https://offsec.tools/](https://offsec.tools/) 安全相关的软件工具\n8. [https://crypto-online.cn/playground/hash/](https://crypto-online.cn/playground/hash/) 密码学工具，比如MD5 Hash\n9. [https://jiangteng2019.github.io/satellite-track/](https://jiangteng2019.github.io/satellite-track/) 卫星轨道可视化\n10. 月球地图[https://ce2.greensea.org/#/@0.0000000,0.0000000,2z,lowlat](https://ce2.greensea.org/#/@0.0000000,0.0000000,2z,lowlat) \n11. [https://passer-by.com/relationship/](https://passer-by.com/relationship/) 亲戚关系计算器\n12. 可以搜索Arxiv 的论文。[All You Need Is Arxiv Search](https://www.arxiv.dev/) \n13. [https://mathb.in/](https://mathb.in/) 数学公式分享网站，可以输入一段LaTex，生成数学公式后分享给其他人。\n14. [Terrain2STL (jthatch.com)](https://jthatch.com/Terrain2STL/) 地形2STL，在网站上选择一块地形，导出成stl格。下面是在blender中打开的效果。 \u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.4w7d2u3w9ag0.webp\" alt=\"image\" width=500/\u003e\n15. [Cable Map](https://cablemap.info/_default.aspx) 世界海底光缆分布图查看。\n16. [https://openinframap.org/](https://openinframap.org/) 电力设施地图。（😄别问我为啥又是海底光缆，又是电力设施的）\n    \u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.4lej1ijy4js0.webp\" alt=\"image\" width=500/\u003e\n17. 安全地传输数据从一台计算机到另一台计算机 - https://github.com/magic-wormhole/magic-wormhole\n18. Sharing是一种命令行工具，用于从CLI向iOS和Android设备共享目录和文件，无需额外的客户端应用程序 - https://github.com/parvardegr/sharing, 只需要简单`npm install -g easy-sharing` ，`sharing Documents`，但我用的时候扫不出来二维码。\n19. Krita，Photoshop的平替，该有的功能都有。一直在用。[GitHub - KDE/krita: Krita is a free and open source cross-platform application that offers an end-to-end solution for creating digital art files from scratch built on the KDE and Qt frameworks.](https://github.com/KDE/krita)\n20. 在Windows上统计软件使用时长，可以看看自己把时间用哪了。 https://github.com/Planshit/Tai\n21. 用于演示文稿的简单放大镜（以便人们能够阅读微小的文本） - https://github.com/hugoattal/milky-warp, 在Release页面下载.exe,点击后会在后台运行，按下Alt+Shift+A，唤出。再按下关闭。\n22. 适用于Windows的平铺窗口管理器 - https://github.com/LGUG2Z/komorebi, 执行`scoop install komorebi`即可安装。然后在命令行输入komorebi即可启动。你可以试试。\n23. 全新的智能剪贴板管理器 - https://github.com/Slackadays/Clipboard, 执行`scoop install clipboard`, 然后在命令行就可以执行cb操作啦\n    \u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.1hkxcvf69tmo.webp\" alt=\"image\" width=500/\u003e\n24. 下一代ls命令 - https://github.com/lsd-rs/lsd, 也是可以通过`scoop install lsd`，就可以在Windows下用`lsd -alh`查看文件了。\n25. 文本编辑器，类似于Vim，[GitHub - helix-editor/helix: A post-modern modal text editor.](https://github.com/helix-editor/helix)\n26. cpix2tex - LaTeX OCR 识别图片的Latex数学公式，需要搭配一个截图工具，截图后复制到memory中，安装`pip install \"pix2tex[gui]\"` 最好是有个虚拟环境 [GitHub - lukas-blecher/LaTeX-OCR: pix2tex: Using a ViT to convert images of equations into LaTeX code.](https://github.com/lukas-blecher/LaTeX-OCR)\n    \u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/1702310448042.webp\" alt=\"1702310448042\" width=500/\u003e\n27. 调色板软件 [GitHub - eigenmiao/Rickrack: Generate harmonious colors freely.](https://github.com/eigenmiao/Rickrack)\n28. 图像查看器用 Rust 编写(简约跨平台) https://github.com/woelper/oculante\n29. Markdown转成简历模板 - https://github.com/i5heu/Faultier-CV\n\n\n## AI相关\n\n1. AI搜索与提问。[Perplexity.AI](https://www.perplexity.ai/)\n2. AI求职信生成器 [AI Cover Letter: Just Paste Your Resume, And The Job Post](https://www.careered.ai/tool/cover-letter)\n3. 创建分享 Prompt[Open Prompt](https://openprompt.co/)\n4. [https://kagi.com/summarizer/index.html](https://kagi.com/summarizer/index.html) 文章总结器，给一篇文章的url，生成总结和摘要,例如这篇文章：https://blog.csdn.net/xixiaoyaoww/article/details/130981702#\n   \u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.2r1asnfuj3i0.webp\" alt=\"image\" width=500/\u003e\n   5. [AI 法律助手 (ai2045.com)](https://law.ai2045.com/) 法律助手,进去的时候提示服务器繁忙。有时候不够准确，还是要以专业人士为准。\n   6. [ClipDrop - Relight](https://clipdrop.co/relight) (AI) Relight for photo，可以对照片中的灯光重新调整，我试了一下，感觉没有达到自己想要的效果。,,ԾㅂԾ,,\n   7. [andreasjansson/blip-2 – Run with an API on Replicate](https://replicate.com/andreasjansson/blip-2) (AI 回答有关图像的问题)\n   8. [https://bard.google.com/](https://bard.google.com/) 谷歌 BARD网页聊天机器人。\n   9. [https://beta.character.ai/](https://beta.character.ai/)  角色聊天机器人，应该是预训练了不同角色的一些属性在内。\n   10. [https://play.vercel.ai/](https://play.vercel.ai/) AI • Compare their results，提问之后比较不同AI模型输出的答案。\n   11. [Poe - Fast, Helpful AI Chat](https://poe.com/) 网站将多个ChatBot集成进来，可以选择非常多不同的机器人去提问。\n   12. [ChatGPT Free - PromptBoom](https://www.promptboom.com/)聊天机器人。\n   13. NewBing AI助手 [Bing AI - Search](https://www.bing.com/search?q=Bing+AI\u0026showconv=1\u0026FORM=hpcodx)\n   14. [ChatRWKV - a Hugging Face Space by BlinkDL](https://huggingface.co/spaces/BlinkDL/ChatRWKV-gradio)支持多种语言。100% attention-free的RNN RWKV-LM。RWKV-LM/ChatRWKV是基于RWKV预训练的非Transformer架构的百亿级参数语言基础模型/对话模型，具有与Transformer架构LLM相当的能力并且计算效率更高。\n   15. [https://godmode.space/](https://godmode.space/) 网页聊天机器人。\n   16. Claude聊天机器人。 [Home | Anthropic](https://www.anthropic.com/)\n   17. [Hugging Chat](https://huggingface.co/chat) 网页聊天机器人。 （天呐，不知道从哪里看到的这么多聊天机器人。）\n   18. [https://open-assistant.io/](https://open-assistant.io/) Open Assistant 聊天机器人。\n   19. [https://chat.openai.com/](https://chat.openai.com/) OpenAI ChatGPT。都不让访问的。\n   20. 使用LLMs自动生成代码库文档的实验性工具箱。 [GitHub - context-labs/autodoc: Experimental toolkit for auto-generating codebase documentation using LLMs](https://github.com/context-labs/autodoc)\n   21. AI控制Linux容器。[GitHub - fafrd/aquarium: AI-controlled Linux Containers](https://github.com/fafrd/aquarium)\n   22. 一个人工智能翻译工具，使用ChatGPT帮助用户创建epub/txt/srt文件和书籍的多语言版本。[GitHub - yihong0618/bilingual_book_maker: Make bilingual epub books Using AI translate](https://github.com/yihong0618/bilingual_book_maker)\n       \u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.1v1guhd5ndq8.webp\" alt=\"image\" width=500/\u003e\n   23. 一款由人工智能驱动的，可增强、放大和减少照片和视频中的噪点。[GitHub - Djdefrag/QualityScaler: QualityScaler - image/video AI upscaler app](https://github.com/Djdefrag/QualityScaler)\n\n# 艺术\n\n1. 插画网站，高质量插画集合 [Transhumans: Open Source Punk Sci-Fi Art Collection by Pablo Stanley](https://www.transhumans.xyz/) \n   \u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.diiziew8o2w.webp\" alt=\"image\" width=500/\u003e\n2. 查尔斯·狄更斯插图画廊 Charles Dickens Illustrated Gallery [The Charles Dickens Illustrated Gallery](https://www.charlesdickensillustration.org/) \n   \u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.36ib6qmrcgi0.webp\" alt=\"image\" width=500/\u003e\n\n# 智能\n\n1. AI工具合集网站 [AI研究所 – 国内外AI工具首发站 (aiyjs.com)](https://www.aiyjs.com/) \n   \u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.6wjfpp74ovk.webp\" alt=\"image\" width=500/\u003e\n2. 开源AI学习网站，包含AI框架，大模型等等 [GitHub - chenzomi12/DeepLearningSystem: Deep Learning System core principles introduction.](https://github.com/chenzomi12/DeepLearningSystem)\n   \u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.7h7todtae8g.webp\" alt=\"image\" width=500/\u003e\n3. AIGC（人工智能生成内容）相关的教程和资源，包含大型语言模型、人工智能绘画和相关领域。 [GitHub - luban-agi/Awesome-AIGC-Tutorials: Curated tutorials and resources for Large Language Models, AI Painting, and more.](https://github.com/luban-agi/Awesome-AIGC-Tutorials)\n   \u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.3gf8qmqge8a0.webp\" alt=\"image\" width=500/\u003e\n4. 一组神经网络和相关算法的简单 PyTorch 实现。都有文档说明。[GitHub - labmlai/annotated\\_deep\\_learning\\_paper\\_implementations: 🧑‍🏫 60 Implementations/tutorials of deep learning papers with side-by-side notes 📝; including transformers (original, xl, switch, feedback, vit, ...), optimizers (adam, adabelief, sophia, ...), gans(cyclegan, stylegan2, ...), 🎮 reinforcement learning (ppo, dqn), capsnet, distillation, ... 🧠](https://github.com/labmlai/annotated_deep_learning_paper_implementations)\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.68tgnevfww00.webp\" alt=\"image\" width=500/\u003e\n5. 神经网络：从零到英雄，系列视频讲座。[GitHub - karpathy/ng-video-lecture](https://github.com/karpathy/ng-video-lecture)\n6. 学习AIGC的Prompt的教程网站，号称永久免费。[👋Welcome | LearnPrompt](https://www.learnprompt.pro/about)\n\n# 冻手\n\n\u003e 动手~\n\n1. Github上超牛的Build-Your-Own-X （构建你自己的XXX）,包含了许多技术相关的，例如3D渲染，聊天机器人，操作系统等等 [GitHub - codecrafters-io/build-your-own-x: Master programming by recreating your favorite technologies from scratch.](https://github.com/codecrafters-io/build-your-own-x)\n   \u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.18h8kyfsdfcw.webp\" alt=\"image\" width=500/\u003e\n\n# 资源\n\n1. 英语外刊杂志，经济学人、纽约客等 [GitHub - hehonghui/awesome-english-ebooks: 经济学人(含音频)、纽约客、卫报、连线、大西洋月刊等英语杂志免费下载,支持epub、mobi、pdf格式, 每周更新](https://github.com/hehonghui/awesome-english-ebooks)\n2. 掘金翻译计划，翻译了很多技术文章。 [GitHub - xitu/gold-miner: 🥇掘金翻译计划，可能是世界最大最好的英译中技术社区，最懂读者和译者的翻译平台：](https://github.com/xitu/gold-miner)\n3. Maspeak是一个学习新语言单词的平台。搭配有图片。[Learn vocabulary in any language !](https://maspeak.com/)\n4. 唐库学习 -  [世界名著在线阅读，英汉对照，双语逐句朗读，适合影子跟读法学习。](http://www.tanglib.com/read/tanglibhelp/shadowing)\n5. 视频（Digital Video）技术讲解（面向开发人员） https://github.com/leandromoreira/digital_video_introduction/blob/master/README-cn.md\n6. 中国历朝历代视频讲解 [中国历朝代视频讲解](https://www.historyline.online/)\n7. 开源的CG-Pipeline（管道）工具 [GitHub - cgwire/awesome-cg-vfx-pipeline: List of open-source technologies that help in the process of building a pipeline for CG and VFX productions](https://github.com/cgwire/awesome-cg-vfx-pipeline)\n8. 开源的图形引擎和游戏引擎开放源代码列表 [GitHub - Gforcex/OpenGraphic: Graphic Engine \u0026 Game Engine lists](https://github.com/Gforcex/OpenGraphic)\n9. Vulkan® 的开源 C++ 示例合集 [GitHub - SaschaWillems/Vulkan: Examples and demos for the new Vulkan API](https://github.com/SaschaWillems/Vulkan)\n10. 收集了国内开发者的项目集合 [GitHub - 1c7/chinese-independent-developer: 👩🏿‍💻👨🏾‍💻👩🏼‍💻👨🏽‍💻👩🏻‍💻中国独立开发者项目列表 -- 分享大家都在做什么](https://github.com/1c7/chinese-independent-developer)\n11. 开源**灵感**数据库,包含设计，游戏，摄影，壁纸等等，链接集合。[GitHub - zhaoolee/ins: 🍭互联网从业者的灵感数据库，无广告，Github Actions自动检测网站访问速度](https://github.com/zhaoolee/ins)\n12. 概率机器学习书籍（第二部） - [probml.github.io/pml-book/book2.html](https://probml.github.io/pml-book/book2.html)\n\n# 游戏\n\n1. 一个开源的重制版的回合制游戏 [GitHub - yairm210/Unciv: Open-source Android/Desktop remake of Civ V](https://github.com/yairm210/Unciv)\n   \u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.5235qjp345s0.webp\" alt=\"image\" width=500/\u003e\n2. 基于浏览器的响应式游戏，很多都是经典。[webЯcade](https://www.webrcade.com/)\n3. 通过神经网络识别你的涂鸦。看能识别多少个。[Quick, Draw!](https://quickdraw.withgoogle.com/)\n4. [Go Inside the Great Pyramid of Giza in 3D | Digital Giza](https://giza.mused.org/en/guided/266/inside-the-great-pyramid)走近金字塔。\n5. 在浏览器中构建、编程和模拟硬件。可以模拟简单的二极管。 [Diode — Build, program, and simulate hardware](https://www.withdiode.com/)\n   \u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.6r8iortcu9c0.webp\" alt=\"image\" width=500/\u003e\n6. 尼尔的小网站，这里有知识，小游戏，当时是在玩Can you draw a PERFECT CIRCLE? 发现的 https://neal.fun/\n   \u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.njhvdyr2ykw.webp\" alt=\"image\" width=500/\u003e\n7. ChatGPT写的小游戏。可以玩玩。[Sumplete](https://sumplete.com/)\n8. Duelyst 是一款数字收藏卡牌游戏和回合制策略混合游戏，由 Counterplay Games 开发。[GitHub - open-duelyst/duelyst: Duelyst is a digital collectible card game and turn-based strategy hybrid, developed by Counterplay Games.](https://github.com/open-duelyst/duelyst)\n9. 微软模拟飞行的历史版本 [GitHub - s-macke/FSHistory: Play and Enjoy the History of Microsoft Flight Simulator](https://github.com/s-macke/FSHistory)\n   \u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.smn0s1537kw.webp\" alt=\"image\" width=500/\u003e\n   10. 合作博弈论互动指南，以游戏的形式学习博弈论。[GitHub - ncase/trust: An interactive guide to the game theory of cooperation](https://github.com/ncase/trust)\n   11. 一款开源沙盒 MMORPG 游戏。采用 React+Next.js+TypeScript 和 WebAssembly 等技术，构建的大型多人在线角色扮演游戏。玩家可以在游戏里探索世界、建造房子、交易、社交等。 [GitHub - ill-inc/biomes-game: Biomes is an open source sandbox MMORPG built for the web using web technologies such as Next.js, Typescript, React and WebAssembly.](https://github.com/ill-inc/biomes-game)\n   12. Ren'Py视觉小说[The Ren'Py Visual Novel Engine](https://www.renpy.org/) \u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/1702717319162.webp\" alt=\"1702717319162\" width=500/\u003e","lastmodified":"2024-06-05T09:48:57.367223771Z","tags":[]},"/adv/my_notion":{"title":"Notion Link","content":"观看的纪录片，书籍，电影等。\n[Reading List | All](https://aaaronli.notion.site/aaaronli/2b3634e48e8a4af7989d903cc915b901)\n\n\n收录的Github仓库。\n[Repository](https://aaaronli.notion.site/5296bf74264e47b7b1d39790c442ff63)","lastmodified":"2024-06-05T09:48:57.367223771Z","tags":[]},"/adv/my_thinking":{"title":"Thinking","content":"# 阅读\n\n\u003e [从零开始的预积分次表面散射 - 知乎](https://zhuanlan.zhihu.com/p/444091986)\n\u003e tql\n\n\u003e [视频 - 微博 - 饺子小品](https://h5.video.weibo.com/show/1034:4972031910019137)\n\u003e 其中有一评论，说终于明白为什么有人能听懂宝可梦说话了，这里面所讲的小品真的很似曾相识，就像是一种模板。我想，这就是一种意识形态的灌输吧，这种灌输不论好坏，无非是想要灌输什么东西。\n\n\u003e [不把人当人，就是恶](https://mp.weixin.qq.com/s/WBtcWNuUQFf1cV51RiSLmw)\n\u003e 把人不当人，就是恶，从这个角度去理解恶似乎是可以的，还可以补充一下，把任何事物不当事物，也是一种恶。对于人，只去考虑\"是否有用\"，\"是否有价值\"，这就是把人往工具的角度去思考，这会形成一种思维链，在他人角度，也会去思考你本身的\"价值\",\"有用\"程度，这会造成\"恶\"的传播。\n\n\u003e [关于彩票的一些基本常识](https://mp.weixin.qq.com/s/cyTMKk55zsBPs72saqstlw)\n\u003e 彩票不是赌博，它比赌博黑多了。不管你玩什么项目，你进去的那一刻起，就已经在输钱了。\n\n\u003e [中国式审美，正在被毁掉](https://mp.weixin.qq.com/s/stfgHl9GrwWwe9pHsEVJCg)\n\u003e \u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.74z06xb9kqk0.webp\" alt=\"image\" width=500/\u003e\n\u003e 苍白，匮乏，低俗。美景在渐渐消失，取代的尽是垃圾。\n\n\u003e [GitHub的榜一大佬晒出存款后，大家却想给他捐钱。 (qq.com)](https://mp.weixin.qq.com/s/y2AYcC83KCv2Pi060n_MZg)\n\u003e 过出了大多数人都想过的生活。像Sindre所说的：**我只是喜欢做东西，** 不太在乎钱\n\n\u003e [情人如期相爱直到分开 - 「ONE · 一个」](http://wufazhuce.com/article/6141)\n\u003e 在理想和现实的交错间，最好还是有柴米油盐作为基础的亲密关系。\n\n\u003e [左耳朵耗子的话](https://mp.weixin.qq.com/s/bOnW8gDJ-dXp4KbAjhDw9A)\n\u003e 去想方法，找更好的解，而不是蛮力。\n\u003e 关注你的重点。去找长(未来)风口。\n\u003e 互相成就。\n\u003e 一件事情-\u003e抽象化-\u003e简化-\u003e标准化-\u003e自动化-\u003e规模化。\n\u003e Never Say No. Say Yes, but always a conditional Yes.\n\u003e 基于问题去学，而不是记忆。\n\u003e **美丽的东西都是肤浅的。**\n\u003e 条件受限是个好事”，因为条件受限可以倒逼你抓重点，倒逼你做自动化，倒逼你简化。\n\u003e **能改变世界的人，一定是不能忍的人**\n\u003e **人不是因为变老了才没有热情，而是因为没有热情才会变老。**\n\n\u003e [什么才是真正爱孩子，说的很透彻！](https://m.weibo.cn/detail/4901791285645834)\n\u003e 多鼓励，多认可，多支持，多理解。 不要把自己的认知，焦虑，恐惧，愤怒委屈转移给孩子。就是对孩子最好的爱与教育。\n\n\u003e [尽早告诉孩子，跟同学相处的原则～](https://m.weibo.cn/detail/4901751808859026)\n\u003e 不用讨好的方式结交朋友。对不合理的要求勇敢说不。不替坏人保守秘密。远离消耗你的人。守住身体的底线。强大自己。\n\n\u003e [荷兰国家博物馆-每1分钟解读一幅画](https://m.weibo.cn/detail/4903540612399888)\n\u003e 让画面动起来的方式讲述画中的细节与情感表达。很牛。\n\n\u003e [出海合集](https://m.weibo.cn/status/N25MQAwq2?jumpfrom=weibocom)\n\n\u003e [世界的参数倒影：为何GPT通过Next Token Prediction可以产生智能](https://zhuanlan.zhihu.com/p/632795115?utm_id=0)\n\u003e 章鱼测试。（Next Token Prediction） NTP\n\u003e 数据压缩。最小描述长度原理（Minimum Description Length，MDL）。\n\u003e 一种描述 2,3,5,7,11....   或者描述输出从2开始的1万个连续质数。明显后面的数据压缩更明显。但模型需要知道质数这种抽象的概念。\n\n\u003e [福大工艺美院视传系本科毕设](https://www.douyin.com/video/7236810403307638077)\n\u003e 美。\n\n\u003e [央视的文案才是顶级文案!!!](https://m.weibo.cn/detail/4908865961596013)\n\u003e 是微风，是晚霞，是心跳，是无可替代。读这种句子让人非常情绪高涨。\n\u003e 日落跌入昭昭星野，人间忽晚，山河以秋。\n\n\u003e [一天伙食费4块钱，如何保证营养？](https://dig.chouti.com/pic/show?nid=b71636aafc23a0f82364d7281de01762\u0026lid=38902046)\n\u003e 可以试试的。\n\n\u003e [当年明月活的太通透了，怪不得能写出《明朝那些事儿》](https://m.weibo.cn/detail/4912269177656665)\n\u003e 平平安安的过完一辈子。读书充实自己，才能更好的了解这个世界。\n\n\u003e [水居然有这么多种叫法，中文真博大精深……](https://m.weibo.cn/detail/4912140831687748)\n\u003e 中华文化。\n\n\u003e [海姆立克急救法的正确打开方式，这是我迄今为止见过的最清晰演示](https://m.weibo.cn/detail/4914474408741985)\n\u003e 肚脐上两指，然后另一手握拳拇指向内，另一支手相抱于拳上，用力往内挤压。\n\n\u003e [抑郁会传染吗？](http://wufazhuce.com/question/3823)\n\u003e 抑郁会传染。传染的是情绪，行为和思维方式。同样，积极的情绪和思维方式也是能传染的。所以你身边有人不小心抑郁的时候，记得用你的积极去温暖那个人的灵魂。\n\n\u003e [七种高效休息方法，应对不同状态](https://m.weibo.cn/detail/4914979537420511)\n\u003e 其中第六条，当看他人不顺眼时，还祝福希望他人身体健康，安心自在。我是觉得能做到这点的人时真的牛。\n\n\u003e [原来我们用电风扇的方式一直是错的？……一个物理老师做了个试验，验证伯努利定律，顺便教大家怎么放电风扇最能让房间凉爽起来……](https://dig.chouti.com/pic/show?nid=9dbc7317c7c073109e4780f2f826ba09\u0026lid=39033271)\n\u003e 看完觉得电风扇从以来我们都用错了。是要对着窗户外吹O(∩_∩)O。\n\n\u003e [中国地理：中学常用地图合集](https://dig.chouti.com/pic/show?nid=2cf31673a824890d3bd2e375707b1318\u0026lid=39150647)\n\n\u003e [语不惊人死不休（320）光锥里有既定的命运，我的碗里有一整条清蒸的鲈鱼。](http://www.zreading.cn/archives/9130.html)\n\u003e 毕竟几人真得鹿，不知终日梦为鱼。\n\n\u003e [来回翻越了十几次喜马拉雅，我终于整明白了麦线](https://mp.weixin.qq.com/s/zDhADE6Tm4uBjQ4fjRQlEA)\n\n\u003e [和生活握手言和](http://wufazhuce.com/article/6065)\n\n\u003e [在亲人临终前，我们应该怎么做？](https://m.thepaper.cn/newsDetail_forward_24474033)\n\u003e 好的临终关怀很重要。\n\n\u003e [为什么我们不想生孩子了？｜谢晶 一席第1030位讲者](https://mp.weixin.qq.com/s/P9kUO6ANPUTfQ_W9v34olQ)\n\u003e 作者分析了生育率下降的原因，觉得分析的很好。\n\n\u003e [这位奶奶太棒了！](https://m.weibo.cn/detail/4953786018169582)\n\u003e 这教育方式真的非常棒！\n\n\u003e [这，就是可以拿去传家开店的万能卤水配方！](https://mp.weixin.qq.com/s/6seLu_fNJ9H8b8X3Xg4vmA)\n\u003e 这文章中的卤水看的非常馋人，一定要自己试试\n\n# 发现\n\n\u003e [NixOS](https://github.com/ryan4yin/nixos-and-flakes-book)\n\u003e 声明式系统，任意回滚，感觉很不错。\n\n\n\u003e [Transformer - YouTube](https://www.youtube.com/watch?v=ugWDIIOHtPA\u0026list=PLJV_el3uVTsOK_ZK5L0Iv_EQoL1JefRL4\u0026index=61)\n\u003e 在看Transformer视频时，下面这张图中，机器两次都学习到了`it`所指示的含义。\n\u003e \u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/1702299321458.webp\" alt=\"1702299321458\" width=500/\u003e","lastmodified":"2024-06-05T09:48:57.367223771Z","tags":[]},"/adv/orthographic_transformation":{"title":"Orthographic transformation","content":"\n**正交变换Orthographic Transformation**\n\n什么是正交变换？[图片](https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/graphics/orthographic.24gyysktzse8.webp) 正交变换也是一个投影过程，这里则不像透视变换中那样是一个椎体了，而是一个方体，所以在正交变换中，近大远小这种情况则不存在，相反，你会看到所有的物体无论远近，在投影平面上都是有相仿的大小\n\n**步骤**\n\n创建一个能够包含的下场景内所有物体的一个BoundingBox, $(l:left, r:right, t:top, b:bottom, f:front, b:back)$,然后将其映射到$(-1,-1,-1)$到$(1,1,1)$范围内；$x$坐标映射到$(l, r) \\Rightarrow (-1,1)$, $y$坐标映射到$(t,b) \\Rightarrow (1,-1)$，然后将内容投射到投影平面上\n\n**资料**\n\n1. 正交矩阵计算过程\n\nhttps://www.scratchapixel.com/lessons/3d-basic-rendering/perspective-and-orthographic-projection-matrix/orthographic-projection-matrix\n\n**正交变换矩阵**\n$$\\begin{aligned} M_{ortho} \\left [ \\begin{matrix} \\frac{2}{r-l} \u0026 0 \u0026 0 \u0026 -\\frac{r+l}{r-l} \\\\ 0 \u0026 \\frac{2}{t-b} \u0026 0 \u0026 -\\frac{t+b}{t-b} \\\\ 0 \u0026 0 \u0026 \\frac{2}{n-f} \u0026 - \\frac{n+f}{n-f} \\\\ 0\u00260\u00260\u00261 \\end{matrix}\\right ] \\end{aligned}$$\n\n计算并验证一下，首先场景中那个包含所有物体的那个BoundingBox的值我们需要知道，这里假设场景中有一个正方体尺寸为$1x1x1$,并且放置在世界中心原点处，那么它的左右上下边界值分别为\n$$(l:-0.5,　r:0.5,　t:0.5,　b:-0.5)$$\n然后再设置远近平面我们假设为\n$$(n:0.01,　f:100)$$\n则我们有\n$$left=-0.5,　right=0.5,　top=0.5,　bottom=-0.5,　near=0.01,　far=100$$\n根据这些我们最终可以计算出矩阵\n$$\\begin{aligned} M_{ortho} \\left [ \\begin{matrix} 2 \u0026 0 \u0026 0 \u0026 0 \\\\ 0 \u0026 2 \u0026 0 \u0026 0 \\\\ 0 \u0026 0 \u0026 -0.02 \u0026 -1.002 \\\\ 0\u00260\u00260\u00261 \\end{matrix}\\right ] \\end{aligned}$$ \n正方体其中一个顶点$(-0.5, -0.5, -0.5)$经过正交变换后有\n$$\\begin{aligned}  \\left [ \\begin{matrix} -0.5\u0026-0.5\u0026-0.5\u00261 \\end{matrix}\\right ] \\end{aligned} \\begin{aligned}  \\left [ \\begin{matrix} 2 \u0026 0 \u0026 0 \u0026 0 \\\\ 0 \u0026 2 \u0026 0 \u0026 0 \\\\ 0 \u0026 0 \u0026 -0.02 \u0026 0 \\\\ 0\u00260\u0026-1.002\u00261 \\end{matrix}\\right ] \\end{aligned}\\begin{aligned}  \\left [ \\begin{matrix} -1\u0026-1\u0026-0.992\u00261 \\end{matrix}\\right ] \\end{aligned}$$ \n再举一个例子\n$$\\begin{aligned}  \\left [ \\begin{matrix} -0.6\u0026-0.5\u0026-100.1\u00261 \\end{matrix}\\right ] \\end{aligned} \\begin{aligned}  \\left [ \\begin{matrix} 2 \u0026 0 \u0026 0 \u0026 0 \\\\ 0 \u0026 2 \u0026 0 \u0026 0 \\\\ 0 \u0026 0 \u0026 -0.02 \u0026 0 \\\\ 0\u00260\u0026-1.002\u00261 \\end{matrix}\\right ] \\end{aligned}\\begin{aligned}  \\left [ \\begin{matrix} -1.2\u0026-1\u00261.002\u00261 \\end{matrix}\\right ] \\end{aligned}$$\n可以看到，后者超出了$(-1,1)$范围会被裁切掉","lastmodified":"2024-06-05T09:48:57.367223771Z","tags":[]},"/adv/os_linux":{"title":"OS - Linux","content":"# Frp 快速反向代理\n\n如果你有一台独立主机，同时你想暴露自己本地的服务到外部，可以在独立主机上部署frp的服务端，本地部署frp的客户端，这样当外部访问你独立主机的frp就会转发到本地。\n\n## Install\n\n[GitHub - fatedier/frp: A fast reverse proxy to help you expose a local server behind a NAT or firewall to the internet.](https://github.com/fatedier/frp)\n\n在Release页面下载对应的版本。\n## Config\n\n服务端\n\n```bash\n[common]\n\nbind_port = 12031  // 客户端和服务端连接的端口\ntoken = \u003cyour-token: number\u003e\n\ndashboard_port = 12032\ndashboard_user = \u003cusername\u003e\ndashboard_pwd = \u003cpassword\u003e\nenable_prometheus = true  // 普罗米修斯运维服务,可以关闭\n\nlog_file = /var/log/frps.log\nlog_level = info\nlog_max_days = 3\n\nvhost_http_port = 13040  // 是内部映射到外部的对外端口\nvhost_https_port = 13043 // 暂时未用，而是通过nginx配置ssl转发走http\n\n;Bidirectional verification  // 双向验证\ntls_only = true\ntls_enable = true\ntls_cert_file = /root/frp/ca2/server.crt\ntls_key_file = /root/frp/ca2/server.key\ntls_trusted_ca_file = /root/frp/ca2/ca.crt\n```\n\n客户端\n\n```bash\n[common]\n\nserver_addr = \u003cyour-address-ip\u003e\nserver_port = 12031\ntoken = \u003cyour-token: number\u003e  // 与服务端一致\n\n;Bidirectional verification  // 双向验证\ntls_enable = true\ntls_cert_file = C:/src/ub/frp/ca1/client.crt\ntls_key_file = C:/src/ub/frp/ca1/client.key\ntls_trusted_ca_file = C:/src/ub/frp/ca1/ca.crt\n\n// 一个配置示例，转发本地的15060端口\n//   这样当外部访问域名`sub.xyzzyxwz.top`时就会转发到本地这个端口。\n[httpname1-pre]  \ntype = http\nlocal_port = 15060\nlocal_ip = 127.0.0.1\ncustom_domains = sub.xyzzyxwz.top\n```\n\n双向验证密钥生成\n\n文件 `my-openssl.cnf`，这文件我是不懂的，也不知道从哪拿来的了(●ˇ∀ˇ●)\n\n```bash\n[ ca ]\ndefault_ca = CA_default\n[ CA_default ]\nx509_extensions = usr_cert\n[ req ]\ndefault_bits        = 2048\ndefault_md          = sha256\ndefault_keyfile     = privkey.pem\ndistinguished_name  = req_distinguished_name\nattributes          = req_attributes\nx509_extensions     = v3_ca\nstring_mask         = utf8only\n[ req_distinguished_name ]\n[ req_attributes ]\n[ usr_cert ]\nbasicConstraints       = CA:FALSE\nnsComment              = \"OpenSSL Generated Certificate\"\nsubjectKeyIdentifier   = hash\nauthorityKeyIdentifier = keyid,issuer\n[ v3_ca ]\nsubjectKeyIdentifier   = hash\nauthorityKeyIdentifier = keyid:always,issuer\nbasicConstraints       = CA:true\n```\n\n进入到与`my-openssl.cnf`文件的同一目录下，执行下方命令，一条一条的执行，注意同时把域名和IP改成自己的。\n\n\u003e [!WARNING] 注意如果在Windows下需要用cygwin的shell去执行。\n\n```bash\n# TODO Frp TLS https://www.bookstack.cn/read/frp-0.36-zh/cf470b39f615dd74.md\n\n# 1.Generating a ca Certificate\n## Generate the ca key file\nopenssl genrsa -out ca.key 2048\n## Generating a ca Certificate\nopenssl req -x509 -new -nodes -key ca.key -subj \"/CN=xyzzyxwz.top\" -days 5000 -out ca.crt\n\n# 2.Generate a server certificate\n## Generate the server key file\nopenssl genrsa -out server.key 2048\n## Generate the server CSR file\nopenssl req -new -sha256 -key server.key \\\n    -subj \"/C=XX/ST=DEFAULT/L=DEFAULT/O=DEFAULT/CN=xyzzyxwz.top\" \\\n    -reqexts SAN \\\n    -config \u003c(cat my-openssl.cnf \u003c(printf \"\\n[SAN]\\nsubjectAltName=DNS:localhost,IP:127.0.0.1,IP:80.251.217.246,DNS:xyzzyxwz.top\")) \\\n    -out server.csr\n## Generate a server certificate\nopenssl x509 -req -days 365 -sha256 \\\n\t-in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial \\\n\t-extfile \u003c(printf \"subjectAltName=DNS:localhost,IP:127.0.0.1,IP:80.251.217.246,DNS:xyzzyxwz.top\") \\\n\t-out server.crt\n\n# 3.Generate a client certificate\n## Generate the client key file\nopenssl genrsa -out client.key 2048\n## Generate the client CSR file\nopenssl req -new -sha256 -key client.key \\\n    -subj \"/C=XX/ST=DEFAULT/L=DEFAULT/O=DEFAULT/CN=client.com\" \\\n    -reqexts SAN \\\n    -config \u003c(cat my-openssl.cnf \u003c(printf \"\\n[SAN]\\nsubjectAltName=DNS:localhost,DNS:example.client.com\")) \\\n    -out client.csr\n## Generate a client certificate\nopenssl x509 -req -days 365 -sha256 \\\n    -in client.csr -CA ca.crt -CAkey ca.key -CAcreateserial \\\n\t-extfile \u003c(printf \"subjectAltName=DNS:localhost,DNS:example.client.com\") \\\n\t-out client.crt\n\n```\n\n如果成功了，应该是以下几个文件。然后配置文件里会指向这几个文件。\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.3dc6baa8low0.webp\" alt=\"image\" width=500/\u003e\n\n# 申请免费 SSL\n\n## Install\n\n使用Let's Encrypt免费的SSL证书。\n\nLinux下安装使用certbot命令行工具，`sudo apt install certbot` 。\n\n我这里的服务机器配置已经有了一个caddy，所以nginx没有去占用80个443端口，所以cerbot我使用的是独立模式。\n\n还有其它的选项比如--nginx，会自动配置好nginx相关的。\n\n```bash\n// 有多个域名和子域名使用-d添加多个\ncertbot certonly --standalone -d xyzzyxwz.top -d server1.xyzzyxwz.top\n\n// 再根据提示一步一步操作，这里等DNS解析需要一段时间\n...\n\n//成功后重启nginx服务\nsystemctl restart nginx\n```\n\n## Renew\n\n```bash\ncrontab -e\n\n0 0,12 * * * python -c 'import random; import time; time.sleep(random.random() * 3600)' \u0026\u0026 systemctl stop caddy \u0026\u0026 certbot renew \u0026\u0026 systemctl start caddy\n\n//有时候这个定时任务不起作用，需要在到期前手动执行一下上述命令\n```\n\n## Config\n\n因为在申请SSL时我们用的standalone模式。所以这里我们手动配置SSL。\n\n```\n// 第一个服务 （用于frp反向代理）\n//   暴露12030端口给外部访问\n//   代理内部的端口13040，这个端口是设置在frp服务端的配置文件中的vhost-http\n// -----\n// `listen 12034 ssl http2;` 同时暴露了12034端口\n//     可以给内部的ub-api服务做转发\n\nserver {\n    listen       12030 default_server;\n    listen       [::]:12030 default_server;\n    server_name  xyzzyxwz.top;\n\n    underscores_in_headers on;\n\n    listen 12034 ssl http2;\n    ssl on;\n    ssl_certificate /etc/letsencrypt/live/xyzzyxwz.top/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/xyzzyxwz.top/privkey.pem;\n\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers \"ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384\";     \n    #ssl_prefer_server_ciphers on;\n    ssl_session_cache shared:le_nginx_SSL:10m;\n    ssl_session_timeout 1440m;\n    ssl_session_tickets off;\n    ssl_prefer_server_ciphers off;\n\n    error_page 497  https://$host$request_uri;\n\n    #limit_conn perserver 300;\n    #limit_conn perip 25;\n    #limit_rate 512k;\n\n    # Load configuration files for the default server block.\n    include /etc/nginx/default.d/*.conf;\n\n    location / {\n        proxy_redirect off;\n        #proxy_set_header Host $host;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Forwarded-Protocol $scheme;\n        proxy_set_header X-Url-Scheme $scheme;\n\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n\n        proxy_pass http://127.0.0.1:13040;\n\n            add_header Access-Control-Allow-Origin *;\n            add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';\n            add_header Access-Control-Allow-Headers 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';\n    }\n\n    # If the page is static and does not contain a redirection, this method is OK, or how to change the redirection url with this prefix?\n    location ^~ /n1/ {\n        proxy_pass http://localhost:8001/;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection keep-alive;\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n\n    # …\n\n    error_page 404 /404.html;\n        location = /40x.html {\n    }\n\n    error_page 500 502 503 504 /50x.html;\n        location = /50x.html {\n    }\n}\n\n// 第二个服务（自己serve一些的服务，也可以走ssl），\n//   像下面就是暴露9001给外部，监听转发内部8001端口\n\nserver{\n\n    listen       9001 default_server;\n    listen       [::]:9001 default_server;\n    server_name  xyzzyxw.top;\n\n    ssl on;\n    ssl_certificate /etc/letsencrypt/live/xyzzyxw.top/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/xyzzyxw.top/privkey.pem;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers \"ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384\";\n    ssl_session_timeout 1440m;\n    ssl_session_tickets off;\n    ssl_prefer_server_ciphers off;\n\n    location / {\n            proxy_pass http://localhost:8001/;\n            proxy_http_version 1.1;\n            proxy_set_header Upgrade $http_upgrade;\n            proxy_set_header Connection keep-alive;\n            proxy_set_header Host $host;\n            proxy_cache_bypass $http_upgrade;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n\n# 常用命令\n\n有时候我们SSH远程连接到主机后，想执行一个命令，并且在终端意外退出后仍然继续运行。这就需要到screen啦。\n```bash\n# screen run\nyum install screen\nscreen -S ssl  # start new\nscreen -r [id] # attach one\n  # Ctrl+A D  - will detach\n  # Ctrl+D    - will terminate\n```\n\nmysql相关。😂🤣😄\n\n```bash\n# mysql\nmysql -u root -p\n\n-- Re-Increment id\n// table_bak是备份出的表\ncreate table table_bak like \u003ctable_name\u003e;\ninsert into table_bak select * from \u003ctable_name\u003e;\nalter table table_bak drop id;\nalter table table_bak add id int(11) primary key auto_increment first;\n\n-- Change Password\nALTER USER 'root'@'%' IDENTIFIED BY '\u003cyourpasswd\u003e'; \nflush privileges;\n\n-- Query users\nSELECT User, Host, Grant_priv, Super_priv\nFROM mysql.user;\n\n\n-- Create user with super grant\nCREATE USER 'username'@'%' IDENTIFIED BY 'password';\nGRANT ALL ON *.* TO 'username'@'%' WITH GRANT OPTION;\n#GRANT ALL PRIVILEGES ON *.* TO 'aaron'@'%' WITH GRANT OPTION; \nFLUSH PRIVILEGES;\n\n\n-- Remove user\nDROP USER 'username'@'%';\nFLUSH PRIVILEGES;\n\n\n-- Create database\nCREATE DATABASE testdb;\n```\n\n# Ubuntu22-04 安装Mongodb\n\n[How to Install MongoDB on Ubuntu 22.04 | Cherry Servers](https://www.cherryservers.com/blog/install-mongodb-ubuntu-22-04)\n\n```bash\n# 安装安装过程中所需的先决条件包。\nsudo apt install software-properties-common gnupg apt-transport-https ca-certificates -y\n\n# 要安装最新的 MongoDB 软件包，需要将 MongoDB 软件包仓库添加到 Ubuntu 的源代码列表文件中。在此之前，你需要使用 wget 命令在系统中导入 MongoDB 的公钥\ncurl -fsSL https://pgp.mongodb.com/server-7.0.asc |  sudo gpg -o /usr/share/keyrings/mongodb-server-7.0.gpg --dearmor\n\n# 在 /etc/apt/sources.list.d 目录中添加 MongoDB 7.0 APT 代码库\necho \"deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-7.0.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list\n\n# 检查它 cat /etc/apt/sources.list.d/mongodb-org-7.0.list\nsudo apt update\t\n\n# 安装Mongodb\nsudo apt install mongodb-org -y\n\n# 启用MongoDB在启动时启动\nmongod --version\nsudo systemctl status mongod\nsudo systemctl start mongod\nsudo systemctl enable mongod\n\n# 检查端口是否监听\nsudo ss -pnltu | grep 27017\n\n# 创建账号 (这个时候还不需要密码访问)\nmongosh\nshow dbs\nuse admin\n---\ndb.createUser(\n  {\n    user: \"root\",\n    pwd: passwordPrompt(),\n    roles: [ { role: \"userAdminAnyDatabase\", db: \"admin\" }, \"readWriteAnyDatabase\" ]\n }\n)\n---\nexit\n\n# 配置外部访问 （这个时候就需要密码访问了）\n\nsudo nano /etc/mongod.conf\n\nChange `bindIp: 127.0.0.1` to `bindIp: 0.0.0.0`\nChange `port: 27017` to `port: 27070`\nAdd security:\n    authorization: enabled\n\nsudo systemctl restart mongod\n\nmongosh -u \u003cusername\u003e -p \u003cpassword\u003e\n```\n\n# Ubuntu22-04 安装postgresql\n\n\n```bash\n# INSTALL postgresql\n\nsudo apt install postgresql\nsystemctl status postgresql\n\nnano /etc/postgresql/\u003cversion\u003e/main/postgresql.conf\n\n: listen_addresses = '*'\n: port = \u003cnew_port\u003e\n\nsudo -u postgres psql template1\nALTER USER postgres with encrypted password '\u003cpassword\u003e';\n\nnano /etc/postgresql/\u003cversion\u003e/main/pg_hba.conf\n\n: host  all  all 0.0.0.0/0 scram-sha-256\n\nsu - postgres\npsql\n\n\\l   # list database\n\\du  # list users\ndrop user IF EXISTS \u003cuasername\u003e;\ncreate database ayon;\ncreate user \u003cusername\u003e WITH PASSWORD '\u003cpassword\u003e';\ngrant ALL PRIVILEGES ON DATABASE \u003cdatabase\u003e TO \u003cusername\u003e;\nalter USER \u003cusername\u003e WITH SUPERUSER;\nalter USER \u003cusername\u003e WITH NOSUPERUSER;\nalter USER \u003cusername\u003e CREATEDB;\n```\n\n# Ubuntu22-04 安装redis\n\n```bash\n# INSTALL redis\n\nsudo apt install lsb-release curl gpg\n\ncurl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg\n\necho \"deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/redis.list\n\nsudo apt-get update\nsudo apt-get install redis\nsystemctl status redis-server\n\nnano /etc/redis/redis.conf\n\n: supervised systemd\n: #bind 127.0.0.1 -::1\n: port \u003cnew-port\u003e\n\n# test\n-----\nredis-cli\nping\nset test \"It's working!\"\nget test\nexit\n-----\n\nsystemctl restart redis-server\n\n# Generate a password (with `openssl rand 60 | openssl base64 -A`)\n\nnano /etc/redis/redis.conf\n\n: requirepass \u003cpassword\u003e\n\nsystemctl restart redis-server\n\n# test\n-----\nredis-cli\nset key1 10\nauth \u003cpassword\u003e\nset key1 10\nget key1\nquit\n-----\n\n# more secure info: https://www.digitalocean.com/community/tutorials/how-to-install-and-secure-redis-on-ubuntu-20-04\n\n# ACL\ntouch /root/users.acl\nnano /etc/redis/redis.conf\n: aclfile /root/users.acl\n: protected-mode no\nsystemctl restart redis-server\n\n-----\nredis-cli\nauth \u003cpassword\u003e\n\nacl users\nacl whoami\nacl setuser \u003cusername\u003e     # 创建\nacl setuser \u003cusername\u003e on  # 启用\nacl list\nacl seruser \u003cusername\u003e \u003e\u003cpassword\u003e # 设置密码\nacl setuser \u003cusername\u003e \u003c\u003cpassword\u003e # 取消密码\nacl deluser \u003cusername\u003e\nacl cat   # 查看集合\nacl setuser \u003cusername\u003e on \u003e\u003cpassword\u003e allkeys allcommands\nacl setuser \u003cusername\u003e on \u003e\u003cpassword\u003e ~* \u0026* +@all\n\nacl save  # 持久化\n-----\n```\n# SSH禁用密码登录\n\n发现Mongodb数据库被勒索了，虽然里面没有特别重要的数据，但那些关于Pipeline配置就都没有了~ 如果这是生产环境，后果不堪设想，要定期备份，加强安全性~\n\n```bash\nnano /etc/ssh/sshd_config\n\n# 将下面这句话移到sshd_config文件的开头（如果不起作用的话）\nPasswordAuthentication no\n\n# 再开启这两句话\nPubkeyAuthentication yes\nAuthorizedKeysFile      .ssh/authorized_keys .ssh/authorized_keys2\n\n#重启SSH服务\nsystemctl restart sshd.service\n```","lastmodified":"2024-06-05T09:48:57.367223771Z","tags":[]},"/adv/os_mac":{"title":"OS - Mac","content":"\n## Useful Command\n\n```bash\nbrew --cache \nbrew install --cask alt-tab\n```","lastmodified":"2024-06-05T09:48:57.367223771Z","tags":[]},"/adv/os_windows":{"title":"OS - Windows","content":"\n这里打算长久更新这篇，去记录与OS-Windows相关的东西\n\n## Windows激活\n\n发现一个非常方便的Windows激活工具，但可能需要科学上网才行~\n\n[https://github.com/massgravel/Microsoft-Activation-Scripts](https://github.com/massgravel/Microsoft-Activation-Scripts)\nhttps://github.com/TGSAN/CMWTAT_Digital_Edition/releases/tag/2.6.4.0\n\n## Windows优化\n\n这个工具下载下来后可以直接运行，里面有非常多的选项，比如开启关闭Windows更新，禁用一些缓存等等~\n\n[https://github.com/hellzerg/optimizer](https://github.com/hellzerg/optimizer)\n\n## Windows 禁用Defender\n\n忘记了是用哪一个去关闭的Windows的Defender，感觉其实只要不下载来路不明的app一般都不需要这个，或者除非黑客盯上你了，就是要攻击你~\n\n[https://github.com/ionuttbara/windows-defender-remover](https://github.com/ionuttbara/windows-defender-remover)\n\n[https://github.com/swagkarna/Defeat-Defender-V1.2.0](https://github.com/swagkarna/Defeat-Defender-V1.2.0)\n\nhttps://github.com/qtkite/defender-control\n\n\u003e [!WARNING] （windows-defender-remover）在移除时一定要选择Safe的选项，这样可以Rollback。但不知为何，会使默认的windows-cmd变成管理员权限的，这样导致一些软件不能正常使用。\n## Windows 磁盘映射\n\n有时候你有个WebDAV或者OneDrive，但是Windows自带的磁盘映射似乎很容易卡死，在查找对应的替代方案是，找到了RaiDrive，可以映射很多很多种服务~\n\n[https://www.raidrive.com/](https://www.raidrive.com/)\n\n## Windows 磁盘检测工具\n\n**SpaceSniffer** 可以分析磁盘上的文件大小占用空间情况~\n\n**CrystalDiskMark** 磁盘读写速度测试~\n\n**CrystalDiskInfo** 查看磁盘健康情况~\n\n\n## Windows下的sudo与服务管理\n\n今天在测试alist的windows本地部署时，发现了nssm这个工具（在alist的官方文档中提到的[Manual installation | AList Docs](https://alist.nn.ci/guide/install/manual.html#get-alist)），我使用的是scoop去管理win上面的程序安装和卸载\n\nscoop install nssm\nscoop install sudo\n\n还有一个gsudo，不知这两个有何区别。\n\n## Windows下的开发工具\n\n开发人员的瑞士军刀 [GitHub - veler/DevToys: A Swiss Army knife for developers.](https://github.com/veler/DevToys)\n\nscoop install devtoys-np\n\n## Windows 美化Shell\n\noh-my-posh是适用于任何外壳的提示主题引擎。\n\n1.安装clink 使用 `scoop install clink` 执行`clink autorun install`,这样默认启动cmd就是clink的界面了。\n\n2.执行clink info, 找到scripts目录，进入目录后新建一个`oh-my-posh.lua`文件,内容如下\n\n```lua\nload(io.popen('oh-my-posh init cmd'):read(\"*a\"))()\n```\n3.administrator打开cmd，执行`oh-my-posh font install`下载字体,需要开启代理。\n\n4.安装方式 `scoop install https://github.com/JanDeDobbeleer/oh-my-posh/releases/latest/download/oh-my-posh.json`\n\n## Windows 空间清理\n\n[GitHub - SFYYH/cPanClear: C盘清理教程](https://github.com/SFYYH/cPanClear) 这个仓库中的README介绍了如何清理Windows的C盘去释放空间，这里面提到了Dism++这个软件，用它可以清理到一些更深层次的不需要的文件。\n\n## Windows 关闭更新\n\n[GitHub - WereDev/Wu10Man: Enable/Disable Windows 10 Automatic Updates](https://github.com/WereDev/Wu10Man)\n\n这个项目的作者已经不维护了。┭┮﹏┭┮\n\n## Visual Studio Extension - Viasfora\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.6j7x5r3wq840.png\" alt=\"image\" width=\"500\"  /\u003e\n\n一个非常好看的Code Style，比起之前只是一片蓝色要好很多。\n\n## Windows 文件搜索\n\nEverything - [voidtools](https://www.voidtools.com/)\nListary - [Listary – File Search \u0026 App Launcher](https://www.listary.com/)\n\n自带的资源管理器中的资源搜索比较慢。可以使用everything。\n\n## Windows 下文件解锁\n\n有时候想要删除某个文件发现被占用，无法删除掉，这时候可以使用IObit Unlocker去解锁文件，这个软件安装完成后是个右键菜单。\n\n[IObit Unlocker, Solution for \"undelete files or folders\" Problems on Windows 8, 7, Vista, XP, 10 - IObit](https://www.iobit.com/en/iobit-unlocker.php)\n\n\n## Windows 下的代理\n\nProxifier - https://www.proxifier.com/download/\n\n## Windows 鼠标键盘共享\n\n1.可以以某台电脑为Server，其它电脑为Client，一套鼠标键盘控制多台电脑 barrier - [GitHub - debauchee/barrier: Open-source KVM software](https://github.com/debauchee/barrier)测试之后发现鼠标对不准，会在另外一边屏幕消失。Github上的也有提Issue。\n\n2.Mouse without Borders\n 下载网址  https://www.microsoft.com/en-us/download/details.aspx?id=35460 \n 参考视频：[同时操控 2 台电脑，只需一个鼠标和键盘！完全免费，由微软官方提供 | 零度解说 - YouTube](https://www.youtube.com/watch?v=bcsZzhdrccs) 这个鼠标在某些地方上也会消失，比如开始菜单。\n\n## Windows 开机启动\n\n只需要把快捷方式放到 `%appdata%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup` 这个目录下，即可。\n\n## Windows 更改文件夹所有者\n\n`\u003cdirectory\u003e 右键 -\u003e Properties -\u003e Security -\u003e Advanced -\u003e Owner (Change)`\n\n## Windows 下截图工具\n\n1. Snipaste [Snipaste Downloads](https://www.snipaste.com/download.html)\n2. FastStone Capture \n\n```bash\nFSCapture 10.2:\n\nusername: Abuela Juana\nReg code: KYOQT-RXMFA-GVHKK-TAXPC\nusername: J3ud1/YouTube\nReg Code: GXFQN-RAMXF-RUBND-JNHGA\nusername: Mi mama Senayda\nReg Code: PPDNN-JEEGY-ARPNV-ESMXI\n\nFSCapture 9.9:\n\nusername: Free Software \nSerial: BXRQE-RMMXB-QRFSZ-CVVOX\n```\n\n## Windows 安装Optional features\n\n如果安装的Windows是Pro N版本，是不带Media Feature Pack的，这样在安装Camtasia录屏软件时会出错。\n安装Media Feature Pack，在Windows设置 -\u003e Apps -\u003e Optional features -\u003e Add a feature (搜索 Media Feature Pack)。\n\n\u003e [!NOTE] 如果不显示需要使用Administrator启动cmd，执行`sfc /scannow`如果这个命令执行失败，则可能是服务被关闭，需要执行`sc config trustedinstaller start= auto`再执行`net start trustedinstaller` , 再去执行sfc。参考[sfc /scannow \"Windows Resource Protection could not start the repair service\"](https://answers.microsoft.com/en-us/windows/forum/all/sfc-scannow-windows-resource-protection-could-not/3dabeaa4-269d-4c65-ab42-a3cf5ef1092d)\n\n\n## Windows下比较两份(多份)文件(目录)不同\n\nWinMegre。比较文件内容不同，比较目录不同。堪称神器。\n\n## Windows 下任务栏统计数据显示\n\n开源的小工具可以在任务栏显示当前网速，CPU使用率等等[Taskbar Stats is an open source tool that displays your computer's resource usage on the Windows Taskbar - gHacks Tech News](https://www.ghacks.net/2020/11/30/taskbar-stats-is-an-open-source-tool-that-displays-your-computers-resource-usage-on-the-windows-taskbar/)好像只支持Win10且已经不更新了。\n\n## Windows 常用命令\n\n```bash\n## List All Shares\nnet share\n \n## Stop Sharing a Folder\nnet share sharename /delete\n```\n\n# Windows下的常用软件代理\n\npip: `%APPDATA%\\pip\\pip.ini` \n\n```bash\n[global]\nproxy = http://user:password@proxy_name:port\n```\n\ngit: `C:\\Users\\\u003cusername\u003e\\.gitconfig`\n\n```bash\n[http]\n\tproxy = http://127.0.0.1:10809\n[https]\t\n\tproxy = http://127.0.0.1:10809\n```\n\n如果某个仓库不需要走代理，例如仓库是本地局域网的，可代理中又是全局，这时可以在那个本地仓库的config文件中增加:\n\n```\n[http]\n\tproxy = \n[https]\n\tproxy =\n```\n\nnpm:\n\n```bash\n# 设置代理\nnpm config set proxy=http://\u003cserver\u003e:\u003cport\u003e\nnpm config set registry=http://registry.npmjs.org\nnpm config set https-proxy http://\u003cserver\u003e:\u003cport\u003e\n\n# 移除代理\nnpm config delete proxy\nnpm config delete https-proxy\n```\n# Windows CMD 中文显示\n\n在CMD的顶部空白处右键，打开属性，选择字体，在字体选项栏中，将默认字体(我这里是`Consoles`)改为`KaiTi`，就可以显示中文了。\n\n# Windows 设置系统级别代理\n\n软件Proxifier可以做到程序级别，像Google浏览器插件Proxy SwitchySharp做到浏览器级别的代理。系统级别可以做到底层的代理，虽然不知道下方的设置是否正确，但起到了效果。\n\n控制面板 -\u003e Internet Options -\u003e Connections -\u003e Proxy server\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.7cx1k4pe9fgg.webp\" alt=\"image\" width=600/\u003e\n\n# Windows 使用rsync同步文件\n\nrsync是在linux下运行的程序，windows下使用cygwin查询了一下，是有rsync这个包的。遂尝试一下\n\n最开始时根据查到的文章需要ssh，所以在windows下开启了features里面的OpenSSH-server/client。这一步也许不需要。\n\n```bash\n# 安装cygwin\nscoop install cygwin\n# cygwin setup 安装 rsync和nano (文本编辑器)\n--- (这一步需要手动)\n# 配置rsync配置文件,见下面\nnano /etc/rsyncd.conf\n# 启动守护进程\nrsync --daemon\n# 查看端口是否监听，默认是873\nnetstat -ano | findstr 873\n```\n\n```bash\n#uid = 0 # 注释了，默认是nobody\n#gid = 0 #\nuse chroot = false\nstrict modes = false\nhosts allow = *\nlog file = rsyncd.log\n\n# Module definitions\n# Remember cygwin naming conventions : c:\\work becomes /cygwin/c/work\n#\n[localsync]\npath = /cygdrive/d/mount\nread only = false\ntransfer logging = yes\n```\n\n```bash\n# 同步Windows下F:/mount/library到服务端配置的D:/mount目录下\nrsync -avr /cygdrive/f/mount/library 192.168.31.200::localsync\n# 反过来，将服务端配置的D:/mount下的文件同步到F:/mount\nrsync -avr 192.168.31.200::localsync /cygdrive/f/mount\n```","lastmodified":"2024-06-05T09:48:57.367223771Z","tags":[]},"/adv/os_wsl":{"title":"OS - WSL","content":"\n## Install WSL\n\n```bash\n# Install WSL\nwsl.exe --list --online\nwsl --install -d Ubuntu-22.04\nwsl --set-default Ubuntu-22.04\nwsl --unregister Ubuntu-22.04\nwsl --update\nwsl -l -v\n\n# Bash\nsudo passwd root\nsu root\n\nsudo apt update \u0026\u0026 sudo apt upgrade -y\nsudo add-apt-repository ppa:deadsnakes/ppa\nsudo apt install x11-apps net-tools cpu-checker gimp nautilus gnome-text-editor vlc gcc-9 g++-9 -y\nsudo apt install glmark2 mesa-utils libgl1-mesa-dev xorg-dev libglu1-mesa-dev -y\nsudo apt install python3.9 python3.9-dev python3.9-distutils python-is-python3 nasm libssl-dev -y\nsudo apt install qtscript5-dev qtbase5-dev flex bison libcurl4-openssl-dev python3-pip -y\nsudo apt install build-essential freeglut3-dev libglfw3-dev freeglut3-dev libglew-dev -y\nsudo apt install qtwayland5 weston glslang-tools libvulkan1 libglm-dev libfmt-dev vulkan-tools -y\nsudo apt install vulkan-validationlayers-dev doxygen doxygen-gui graphviz -y\n\npip3 install cmake\n```\n\n## Install Google Chrome\n\n```bash\ncd /tmp\nsudo wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb\nsudo dpkg -i google-chrome-stable_current_amd64.deb\nsudo apt install --fix-broken -y\nsudo dpkg -i google-chrome-stable_current_amd64.deb\ngoogle-chrome\n```\n\n## Install Docker\n\n```bash\n\n# Docker\ndistribution=$(. /etc/os-release;echo $ID$VERSION_ID)\ncurl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -\ncurl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list\ncurl -s -L https://nvidia.github.io/libnvidia-container/experimental/$distribution/libnvidia-container-experimental.list | sudo tee /etc/apt/sources.list.d/libnvidia-container-experimental.list\n\nsudo apt-get update\nsudo apt-get install -y nvidia-docker2\nsudo service docker stop\nsudo service docker start\ndocker run --gpus all nvcr.io/nvidia/k8s/cuda-sample:nbody nbody -gpu -benchmark\n```\n\n## Port forwarding\n\n```bash\n# 端口转发 虚拟机-\u003e宿主机\n\nwsl -- ifconfig eth0  # 外部调用命令获取wsl的ip (! 注意必须要先set-default是Ubuntu才行)\n\n# netsh interface portproxy add v4tov4 listenport=[win10端口] listenaddress=0.0.0.0 connectport=[虚拟机的端口] connectaddress=[虚拟机的ip]\nnetsh interface portproxy add v4tov4 listenport=8080 listenaddress=0.0.0.0 connectport=8080 connectaddress=\u003cip\u003e\n\nnetsh interface portproxy show all\n\nnetsh interface portproxy delete v4tov4 listenport=8080 listenaddress=0.0.0.0\n\n# 获得宿主机 IP\ncat /etc/resolv.conf | grep nameserver | awk '{ print $2 }'\n# 获得WSL自己IP\nhostname -I | awk '{print $1}'\n```\n\n## root login default\n\n```bash\n# 用everything搜索ubuntu2204.exe，注意需要是WindowsApps下面的,例如我的\nC:\\Users\\\u003cyour-username\u003e\\AppData\\Local\\Microsoft\\WindowsApps\\ubuntu2204.exe config --default-user root\n```\n## Fix Broken Package\n\n```bash\n# Fix Boken package\nsudo apt-get install --reinstall command-not-found\nsudo ln -s /usr/sbin/update-command-not-found /usr/lib/cnf-update-db\nsudo apt autoremove\n\nsudo ln -s /usr/bin/python3.9 /usr/bin/python\nsudo ln -s /usr/bin/python3.9 /usr/bin/python3\nsudo ln -s /usr/bin/python3.9-config /usr/bin/python3-config\n\nsudo ln -s /usr/bin/python3.9 /usr/local/bin/python\nsudo ln -s /usr/bin/python3.9 /usr/local/bin/python3\nsudo ln -s /usr/bin/python3.9 /usr/local/bin/python3.9\nsudo ln -s /usr/bin/python3.9-config /usr/local/bin/python3-config\n```\n\n## WSL GUI 1\n\n```bash\n\n# GUI\n.wslconfig\n\nsudo apt install gedit fcitx fcitx-config-gtk fcitx-sunpinyin fcitx-pinyin fcitx-googlepinyin xfonts-intl-chinese\nsudo apt install xfonts-wqy xfonts-unifont fonts-wqy*\nsudo apt install language-pack-gnome-zh-hans language-pack-kde-zh-hans language-pack-zh-hans\nsudo apt install linux-tools-generic\nsudo apt install daemonize gdm3 gnome\n\nmkdir /opt/WSL \u0026\u0026 cd /opt/WSL\n\ngit clone https://github.com/nufeng1999/WSL_GNOME.git --recurse-submodules\ncd WSL_GNOME/cygwin-auto-install\ngit checkout master\ncd ../\nchmod +x ./install.sh\nsudo ./install.sh\nwsl --shutdown\nstartgnome2\n\n# Docker\ndocker container ls -a\ndocker container rm -f \u003cname\u003e\n\n# VSCode\nwget -q https://packages.microsoft.com/keys/microsoft.asc -O- | sudo apt-key add -\nsudo add-apt-repository \"deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main\"\nsudo apt install code -o Acquire::http::Proxy=\"http://172.24.96.1:10811\"\n\nsudo shutdown -h now\n```\n\n## WSL GUI 2\n\n```bash\n# GUI 2\nsudo apt update \u0026\u0026 sudo apt upgrade -y\nsudo vi /etc/wsl.conf\n\n[boot]\nsystemd=true\n\n%USERPROFILE%\\.wslconfig\n[wsl2]\nguiApplications=false\n\n\nwsl.exe --shutdown\nsystemctl list-units --type=service\nsudo apt install x11-apps\n\nxdg-user-dirs-update\nsudo systemctl set-default multi-user.target\nsudo apt install acpid -y\nsudo systemctl disable --now acpid.service acpid.socket acpid.path\n\nsudo apt install ubuntu-desktop-minimal -y\nwsl.exe --shutdown\n\nsource /mnt/c/src/exec/wsl/Desktop.sh \nexport DISPLAY=$(cat /etc/resolv.conf | grep nameserver | awk '{print $2; exit;}'):0.0\ngnome-session --session=ubuntu\n\nsudo apt install -y xrdp\nsudo systemctl status xrdp\nsudo adduser xrdp ssl-cert\nsudo systemctl restart xrdp\nip addr | grep eth0\n\n# Linux Install Houdini \u0026 Moonray for Houdini\ntar -xzvf houdini-19.5.493-linux_x86_64_gcc9.3.tar.gz\ncd houdini-19.5.493-linux_x86_64_gcc9.3/\nchmod +x houdini.install\nsudo ./houdini.install\n\ncd /opt/hfs19.5\nsource houdini_setup\nsudo /etc/init.d/sesinetd stop\nsudo cp /mnt/d/Houdini/sesinetd /usr/lib/sesi/\nsudo chmod 755 /usr/lib/sesi/sesinetd\nsudo /etc/init.d/sesinetd start\nhkey\nsudo /mnt/d/Houdini/Houdini-Tools\n\nadd HOUDINI_PATH=\"/home/aaron/openmoonray/release/houdini;/home/aaron/openmoonray/release/plugin/houdini;\u0026\" to houdini.env\nuse export HOUDINI_USE_HFS_OCL=0 on wsl\n\n```\n\n\nhttps://github.com/microsoft/WSL/issues/10032\n\nhttps://github.com/sickcodes/Docker-OSX#initial-setup\n\nhttps://github.com/microsoft/wslg\n\nhttps://github.com/nufeng1999/WSL_GNOME\n\nhttps://github.com/neutrinolabs/xrdp\n\n\n## WSL2 Docker Desktop Memory Limit\n\nCreate  `%UserProfile%\\.wslconfig` if not exists. then edit it.\n\n```bash\n[wsl2]\nmemory=8GB\n```\n\n```\n wsl --shutdown\n```","lastmodified":"2024-06-05T09:48:57.367223771Z","tags":[]},"/adv/perspective_transformation":{"title":"Perspective transformation","content":"\n**透视变换Perspective Transformation**\n\n什么是透视变换？[图片](https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/graphics/Perspective.4ihgtm58l9u0.webp) 透视变换是一个投影过程，其中透视变换就像将人的眼睛当做一个中心点，外部世界是一个大平面，在眼睛与这个平面之间形成一个椎体，然后将这个平面上的内容投射到眼睛内。\n\n为什么变换之后的空间被称为裁切空间？裁切就是把不需要的部分去除掉，就是这幅图片中一样，投影平面在左侧\n\n\u003cdiv align=center\u003e\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/graphics/projection.1onr15yp0sv4.webp\" width=\"490\"\u003e\u003c/div\u003e\n\n而在投影中心另一侧的右侧的点我们是不需要的，假设这个点的坐标为\n\n$$(2,5,10)$$\n\n应用计算之后是\n\n$$x'=\\frac{2}{-10}=-0.2$$ \n$$y'=\\frac{5}{-10}=-0.5$$\n$$z'=\\frac{10}{-10}=-1$$ \n\n那么这个计算过程是如何进行的呢？根据相似三角形\n\n\u003ccenter\u003e\u003cimg style=\"border-radius: 0.3125em; box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);\" src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/graphics/projection.5bbo6m777gs0.webp\"\u003e\u003cbr\u003e\u003cdiv style=\"color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;\"\u003eFigure 1 (从P投射到P')\u003c/div\u003e\u003c/center\u003e\n\n我们有\n\n$$\\frac{BA=\\color{blue}{z_{blue}}=1}{EA=\\color{green}{z_{green}}=3}=\\frac{BC=y'}{EF=y}$$ \n$$y'=\\frac{y*\\color{blue}{z_{blue}}}{\\color{green}{z_{green}}}$$\n\n其中，由于我们的摄像机是看向$-z$方向的，所以$\\color{green}{z_{green}}$在计算的时候前面要加$-$号，这就是式子$y'=\\frac{5}{-10}=-0.5$中$z$的值为$10$，计算是为$-10$\n\n\u003ccenter\u003e\u003cimg style=\"border-radius: 0.3125em; box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);\" src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/graphics/透视校正插值.3imenutihfe0.webp\" width=\"490\"\u003e\u003cbr\u003e\u003cdiv style=\"color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;\"\u003eLook at the projection from another aspect\u003c/div\u003e\u003c/center\u003e\n\n**步骤**\n\n假设我们有一个矩阵 \n\n$$\\begin{aligned} \\left [ \\begin{matrix} 1\u00260\u00260\u00260 \\\\ 0\u00261\u00260\u00260 \\\\ 0\u00260\u00261\u00260 \\\\ 0\u00260\u00260\u00261 \\end{matrix}\\right ] \\end{aligned}$$\n\n我们先让$z$坐标分量等于$-1$,这样计算后的$z'$就等于$1$,就可以满足如Figure 1中的\n\n$$z'=z=1$$\n\n接下来，再调整$w$分量从\n\n$$[0,0,0,1] \\rightarrow [0,0,-1,0]$$\n\n这样一来,当除以$w$分量从齐次转三维中的点时，除以$w$分量相当于除以了$-z$分量，经过这样调整后我们有\n\n$$\\begin{aligned} \\left [ \\begin{matrix} 1\u00260\u00260\u00260 \\\\ 0\u00261\u00260\u00260 \\\\ 0\u00260\u0026-1\u0026-1 \\\\ 0\u00260\u00260\u00260 \\end{matrix}\\right ] \\end{aligned}$$ \n\n其计算过程正好是我们想要的 \n\n$$\\begin{aligned} \\left ( \\begin{matrix} x' \u0026= x \\cdot 1 + y \\cdot 0 + z \\cdot 0 + 1 \\cdot 0 = x \\\\ y' \u0026= x \\cdot 0 + y \\cdot 1 + z \\cdot 0 + 1 \\cdot 0 = y \\\\ z' \u0026= x \\cdot 0 + y \\cdot 0 + z \\cdot (-1) + 1 \\cdot 0 = -z \\\\ w' \u0026= x \\cdot 0 + y \\cdot 0 + z \\cdot (-1) + 1 \\cdot 0 = -z \\end{matrix} \\right . \\end{aligned}\n$$\n\n$$\\begin{array}{ll} x' = \\dfrac{x'=x}{w'=-z},\\\\ y' = \\dfrac{y'=y}{w'=-z},\\\\ z' = \\dfrac{z'=-z}{w'=-z} = 1. \\end{array}$$ \n\n其中$z'=\\frac{z}{w} = \\frac{-z}{-z} = 1$,　　$x'=\\frac{x}{w} = \\frac{x}{-z}$,　　$y'=\\frac{y}{w} = \\frac{y}{-z}$接下来我们就需要详细计算每个部分了\n\n[计算投影点的$x'$和$y'$坐标,将范围映射到[-1,1]](https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/graphics/PerspProjectionDerivation.6edn0immf7o0.webp) \n\n$$\\left[\\begin{array}{cccc} { \\frac{2n}{ r-l } } \u0026 0 \u0026 ... \u0026 0 \\\\ 0 \u0026 { \\frac{2n}{ t-b } } \u0026 ... \u0026 0 \\\\ { \\frac{r + l}{ r-l } } \u0026 { \\frac{t + b}{ t-b } } \u0026 ... \u0026 {-1}\\\\ 0 \u0026 0 \u0026 ... \u0026 0\\\\ \\end{array}\\right]$$\n\n[将投影点的z坐标重新映射到范围[-1,1]](https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/graphics/Remapping-the-z-coordinate-of-the-projected.2oof8otgmpu0.webp)\n\n(我们根据齐次转三维点时, $(x,y,z)$这三个分量都要除以$w$分量，我们有\n\n$$(x', y', z') = (x/w, y/w, z/w)$$\n\n其中$x$和$y$对$z$无影响)，则上一步骤中的矩阵可以设为\n\n$$\\left[\\begin{array}{cccc} { \\frac{2n}{ r-l } } \u0026 0 \u0026 0 \u0026 0 \\\\ 0 \u0026 { \\frac{2n}{ t-b } } \u0026 0 \u0026 0 \\\\ { \\frac{r + l}{ r-l } } \u0026 { \\frac{t + b}{ t-b } } \u0026 \\color{red}{A} \u0026 {-1}\\\\ 0 \u0026 0 \u0026 \\color{red}{B} \u0026 0\\\\ \\end{array}\\right]$$ \n\n其中\u003cspan style=\"color:red\"\u003eA\u003c/span\u003e和\u003cspan style=\"color:red\"\u003eB\u003c/span\u003e是我们要求的,则可以列出等式\n\n$$z' = \\dfrac{0 * x + 0 * y + A * z + B * w}{w = -z} \\rightarrow \\dfrac{A z + B}{w = -z}.$$ \n\n**注意这里的$w=1$是$(x,y,z,w=1)$中的$w$，而不是这个矩阵中的$w$分量**\u003cbr\u003e再根据我们已知$z$正好落在$near$近平面时应当等于$-1$，正好落在$far$远平面时应当等于$1$, 我们可以列出式子\n\n$$\\left ( \\begin{array}{ll} \\dfrac{(z=-n)A + B}{(-z=-(-n)=n)} = -1 \u0026\\text{ when } z = n\\\\ \\\\ \\dfrac{(z=-f)A + B}{(-z=-(-f)=f)} = 1 \u0026 \\text{ when } z = f \\end{array} \\right. $$ \n$$ \\rightarrow  \\left ( \\begin{array}{ll} {-nA + B} = -n \u0026 (1)\\\\  {-fA + B} = f \u0026 (2) \\end{array} \\right.$$ \n\n$$ A=-\\frac{f+n}{f-n} $$ \n\n$$ B=-\\frac{2fn}{f-n} $$ \n(也可以映射到[0,1]范围内)\n\n**补充资料**\n\n1. 关于$P'_x = \\frac{P_x}{-P_z}$\n\n链接: https://www.scratchapixel.com/lessons/3d-basic-rendering/perspective-and-orthographic-projection-matrix/projection-matrices-what-you-need-to-know-first\n\n2. 为什么除以了$-z$呢？投影过程中的相似三角形中的比例关系\n\n3. 关于透视矩阵中的齐次项的$-1$\n\n链接: https://www.scratchapixel.com/lessons/3d-basic-rendering/perspective-and-orthographic-projection-matrix/building-basic-perspective-projection-matrix\n\n将原来透视矩阵中的$(0,0,0,1)$变为$(0,0,-1,0)$之后, 就说当我们用这个透视矩阵的$w$分量乘以一个齐次点\n$$(x,y,z,1)$$\n时，我们有\n$$x \\cdot 0 + y \\cdot 0+z \\cdot -1+1 \\cdot 0 = -z$$\n也就是说，这个齐次点$w$的值经过矩阵计算之后从之前的$1$变为了$-z$,同时，齐次点$(x,y,z)$变为三维点时需要经过$(x/w, y/w, z/w)$，此时这样就有\n$$(x/w, y/w, z/w) \\Rightarrow (x/{-z}, y/{-z}, z/{-z})$$\n\n4. 关于透视矩阵中的$z$项的$-1$\n\n链接: https://www.scratchapixel.com/lessons/3d-basic-rendering/perspective-and-orthographic-projection-matrix/building-basic-perspective-projection-matrix\n\n因为摄像机是朝向$-z$方向的，所以摄像机前所有的点的$z$坐标都是负的，这就是为什么【资料1】中\n$$x' = \\frac{x}{-z}$$\n中的$z$前方带有负号\n\n**透视变换矩阵**\n\n$$\\begin{aligned} M_{persp} = \\left [ \\begin{matrix} \\frac{2n}{r-l} \u0026 0 \u0026 \\frac{l+r}{l-r} \u0026 0 \\\\ 0 \u0026 \\frac{2n}{t-b} \u0026 \\frac{b+t}{b-t} \u0026 0 \\\\ 0 \u0026 0 \u0026 \\frac{f+n}{f-n} \u0026 \\frac{2nf}{n-f} \\\\ 0 \u0026 0 \u0026 1 \u0026 0 \\end{matrix}\\right ] \\end{aligned}$$ \n或 \n$$\\begin{aligned} M_{persp} = \\left [ \\begin{matrix} \\frac{2n}{r-l} \u0026 0 \u0026 0 \u0026 0 \\\\ 0 \u0026 \\frac{2n}{t-b} \u0026 0 \u0026 0 \\\\ \\frac{r+l}{r-l} \u0026 \\frac{t+b}{t-b} \u0026 -\\frac{f+n}{f-n} \u0026 -1 \\\\ 0 \u0026 0 \u0026 -\\frac{2nf}{n-f} \u0026 0 \\end{matrix}\\right ] \\end{aligned}$$ \n\n\u003ccenter\u003e(注意其中两者之间的负号)\u003c/center\u003e\u003cbr\u003e\n\n则我们有\n\n$$[x', y', z', w'] = \\left [ \\begin{matrix} x \\\\ y \\\\ z \\\\ w=1 \\end{matrix} \\right ] * M_{persp}$$ \n其中\n$$w'=0 \\cdot x + 0 \\cdot y - 1 \\cdot z + 0 \\cdot 1 = -z$$\n\n计算并验证一下，假设$n=1，f=20$公式\n\n$$\\frac{-\\frac{f+n}{f-n} *z -\\frac{2fn}{f-n} }{-z}$$\n\n代入$n$和$f$并计算得\n\n$$\\frac{-\\frac{21}{19} * z - \\frac{40}{19}}{-z}$$\n\n其中$\\frac{-21}{19}=-1.1$和$\\frac{-40}{19}=-2.1$则得到结果\n\n$$z=1 \\rightarrow \\frac{-1.1*1 -2.1}{-1} = 3.2$$ \n\n$$z=-1 \\rightarrow \\frac{-1.1*-1 -2.1}{1} = -1$$ \n\n$$z=-20 \\rightarrow \\frac{-1.1*-20 -2.1}{20} = 0.995$$ \n\n$$z=-21 \\rightarrow \\frac{-1.1*-21 -2.1}{21} = 1.1$$\n","lastmodified":"2024-06-05T09:48:57.367223771Z","tags":[]},"/adv/picture":{"title":"My Picture","content":"图形学技术，画面总是沁人心脾。[[computer_science|Computer Science]]\n影视动画，传播正能量。[[cg_outline|CG Outline]]\n兼爱非攻，我们自古就是命运共同体。[[my_thinking|My Thinking]] \n探索发现，思考如何更好的创造未来。 [[my_finder|Finder]] \n","lastmodified":"2024-06-05T09:48:57.367223771Z","tags":[]},"/adv/polygon_area":{"title":"Polygon Area","content":"\n## Shoelace Theorem\n\n\n\n\n\n\n\n\n[^1]: [Art of Problem Solving](https://artofproblemsolving.com/wiki/index.php/Shoelace_Theorem)","lastmodified":"2024-06-05T09:48:57.367223771Z","tags":[]},"/adv/polygon_triangulation":{"title":"Polygon Triangulation","content":"\n## Fan Triangulation\n\n[[fan_triangulation]]\n\n### Ear clipping\n\n[[ear_clipping_triangulation]]\n\n","lastmodified":"2024-06-05T09:48:57.367223771Z","tags":[]},"/adv/projection":{"title":"Projection","content":"\n**几何中的投影**\n\n用光线照射物体，在某个平面（地面、墙壁等）上得到的影子叫做物体的投影（Projection），照射光线叫做投影线，投影所在的平面叫做投影面 \n\n有时光线是一组互相平行的射线，例如太阳光或探照灯光的一束光中的光线。由平行光线形成的投影是平行投影（Parallel projection).\n\n由同一点（点光源发出的光线）形成的投影叫做中心投影（Center projection)。\n\n**向量中的投影**\n一个向量在另一个向量上的”影子“，是一种降维，感觉表示一种相关性","lastmodified":"2024-06-05T09:48:57.367223771Z","tags":[]},"/adv/showcase":{"title":"Showcase","content":"\n---\n","lastmodified":"2024-06-05T09:48:57.367223771Z","tags":[]},"/adv/sine_law":{"title":"Sine law","content":"\n正弦定理","lastmodified":"2024-06-05T09:48:57.367223771Z","tags":[]},"/adv/space_and_transformation":{"title":"Space and transformation","content":"\n\n**图形学渲染中的空间变换**\n\n什么是空间变换？当我们想渲染一个物品到屏幕中，例如一个小盒子，从小盒子的角度出发，也就是**Local Space**，它看所有的物品都是相对于它来说的，例如小盒子的正前方有一个小球，是相对于小盒子来说它的前方有一个小球，但是对于小球来说，那么就不一定了，可能是小球的后方或者前后左右上下都有可能，那么就会出现小盒子说，不行，大家要以我为参考，小球会说，凭什么以你为参考呢？以我为参考不好吗？争执不下，那这样下去不行，所以最后我们规定某个指定的地方插一个小旗子:triangular_flag_on_post:，就指定这个地方在三维下就是$(0,0,0)$为坐标原点，所有的物品不管是小盒子还是小球或者其它什么物品，都必须以这个原点为相对参考，那么这样就清晰明了了，小盒子相对于原点在$(1,0,0)$处，等等，小球相对于原点在$(0,1,0)$处，这就是**World Space**\n\n当我们观察一个物品时，以我们自己为原点，朝前方规定为朝$-z$方向看去，所以假设有一个小盒子在我们的左手边时，也就是$-x$方向，我们需要朝左转动头部90°，如果在上方的话，也就是$+y$方向，我们就需要朝上转动头部90°，但每次都要转动头部，好麻烦对吧？那么有没有其它的方法呢？还是假设这个小盒子在我们的左手边，如果我们想要观察它，则需要向左转动头部90°对吧，那么我就在想能不能不转动头部而是把这个小盒子拿到我的前方，也就是把这个小盒子相对我来说往右转动90°到我的正前方，仔细想想可以吗？是可以的，排除其它所有的事物，就想象只有我们自己和这个小盒子，**我们朝左转动去看这个小盒子和把这个小盒子朝右转动到我们面前再去看，最终的观察效果是一模一样的**！所以我们给在世界空间中的所有物品再做一个变换，能够让我们观察到，就像类似这个小盒子朝右转动一样，类似这样的变换之后的空间我们称作**View Space**\n\n到了这里，我们知道物品的位置了，还知道了观察的方向，但是似乎还缺少一些东西，那就是如何去观察，就像我们的eyes眼睛一样，你是激光眼，透视眼，还是千里眼，还是写轮眼，眼睛不一样，看到的画面就会有不一样的效果，而我们的眼睛看到的呢就是最普通的透视效果，叫做**Perspective Transformation**，例如两条平行的铁轨\u003cdiv align=center\u003e\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/graphics/PerspectiveProjection.6ujk7r238gs0.webp\" width=\"190\"\u003e\u003c/div\u003e我们最终看到的画面是这种近大远小的，并且超出画面外的物品，也就是我们所看不到的都会被\"裁切\"掉，这种在指定了我们如何去**观察的方式**之后的我们称为**Clip Space**，当然还有另外一种常用的观察方式叫做**Orthogonal Transformation**\n\n所以对于任何物体，应用**Model Transformation**到**World Space**，然后应用**View Transformation**到**View Space**，再应用**Perspective Transformation**或者**Orthogonal Transformation**到**Clip Space**，再除以w分量到**NDC Space**，最后再应用**Viewport Transformation**到**Screen Space**，**Screen Space**就是最终的显示屏幕, 以上统称为**空间变换**\n\n**透视变换与正交变换**\u003cdiv align=center\u003e\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/graphics/orthographic_perspective_view.6van0bm8j340.webp\" width=\"790\"\u003e\u003c/div\u003e\n\n(https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/graphics/Perspective-and-Orthographic-Frustum.424xa80owoe.webp)\n\n透视变换[[perspective_transformation]]是将一个锥内我们所可以看到的事物，最终投射到一\"点\"处\n\n正交变换[[orthographic_transformation]]是将一个方体内我们所可以看到的事物，最终投射到一\"面\"上\n\n视口变换[[viewport_transformation|Viewport transformation]]\n\n**NDC Space** \n\n(Normalized device coordinate/规格化设备坐标) 归一化设备坐标或NDC空间是独立于屏幕的显示坐标系统; 它包含一个立方体，其中$x、y$和$z$组件的范围从$−1$到$1$。\n\n**Space Transformation**\u003cdiv align=center\u003e\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/graphics/空间变换.3uujhna7v4o0.webp\"\u003e\u003c/div\u003e\n\n**W Component**\n\n可以通过增大$w$分量的值，是点朝向原点移动，减小$w$分量的值，可以使点朝向无穷点。(https://stackoverflow.com/questions/2422750/in-opengl-vertex-shaders-what-is-w-and-why-do-i-divide-by-it)\n\n在到clip空间后，我们会根据$-w \\leq x,y,z \\leq w$来决定丢弃哪些模型,因为这是都是超出了屏幕之外的。 例如$-w \\leq x \\leq w$是在$x$轴向上超出了，以此类推，这里为什么是与$w$的值比较与在NDC空间中为什么是除以$w$的值是归一化是如出一辙的。\n\nSee. MVP_Understanding.hip","lastmodified":"2024-06-05T09:48:57.367223771Z","tags":[]},"/adv/technology_development":{"title":"Technology Development","content":"\n# Wave Function Collapse\n## 概念\n\n**双缝干涉** - 当没有观测时,光子呈现的是波的性质.当观测时,光子呈现的是粒子的性质.\n\n**薛定谔的猫** - 当匣子里的猫被观测时,猫的状态要么死要么活,只能在两者之间二选一,而没有观测的话,那么猫的状态既不死也不活\n\n**熵** - 物理意义表示物质的混乱程度,熵越大,说明物质越混乱,熵越小,说明物质越稳定,例如水加热变成雾,这个过程熵值增加(熵增),水降温变成冰,这个过程熵值减少(熵减)\n\n**波函数塌陷** - 从混乱变成确定的现象,就叫做波函数塌陷\n\n**算法的核心原理** - 就是动态使候选对象的范围变得越来越小,直到最后所有的位置都能够选取到合适的对象. 而如何动态使候选对象范围变小呢? 就是通过约束规则,传播和回溯.\n\n1. **规则，传播** - 波函数坍缩的算法传播思路可以根据已坍缩位置的邻居进行传播.把规则套进去,对每个邻居的可选集合进行处理.\n2. **回溯** - 把出错的方案排除,然后再回退.重新选一遍.这就是回溯的意义\n\n## 过程\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.3zipv3vc1ue0.webp\" alt=\"image\" width=600 /\u003e\n\n结合可视化中的示例与下方的文字会更好理解。\n\n假设我们有一个空间，我们把这个空间划分为若干个格子，每个格子在初始状态下有很多种可能性，很多种状态，我这里假设有ABCD四种种状态好了。\n\n状态：ABCD（A，AB，CD）\n规则：A-C,D 匹配，A-A,B互斥，C-A匹配, D-B匹配，C-C,D互斥 （下面灵魂画手的图片会比较明了）\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.1vyjv7wuvy68.webp\" alt=\"image\" width=520/\u003e\n\n1. 每个空间小格在初始状态都处于超态状态，它有ABCD四种可能状态。\n\n2. 我们对其中一个小格进行观测，假设对中间的小格进行观测好了，这个小格由于受到了我们的观测所以它会发生塌陷，从超态塌陷为确定态，这里假设这个小格塌陷成了A确定状态。\n3. 当中间的小格塌陷成一个确定状态以后，周围小格会受到中间小格的影响也会发生塌陷。根据规则，那么周围的一圈空间只能是状态C,D，并且这里在坍缩后会熵减，并且影响周围。\n4. 我们再扩大一圈，那些状态只能是C,D的格子的周围格子又只能是状态A,B了。\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.1kziiicpzls0.webp\" alt=\"image\" /\u003e\n5. 这样循环往复，迭代每次熵最低的那个，然后塌缩，如果发现规则冲突无法塌缩，则回溯到之前保存的状态，继续。\n\n## 多维\n\n三维空间下生成建筑的例子\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.2sr1bpkix7s0.webp\" alt=\"image\" width=500/\u003e\n\n二维空间下生成地图的例子\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.3jwl5bxpce00.webp\" alt=\"image\" width=500/\u003e\n\n## 参考\n\n\n可视化 - [wfc2d 算法过程可视化](https://anseyuyin.github.io/wfc2D/demos/algorithmVisualization/)\n\n[GitHub - marian42/wavefunctioncollapse: Walk through an infinite, procedurally generated city](https://github.com/marian42/wavefunctioncollapse)\n\n[基于《波函数坍缩算法》的无限城市程序化随机生成 - 知乎](https://zhuanlan.zhihu.com/p/66416593)\n\n描述比较简单易懂的 - [虚幻4渲染编程(程序化世界篇)【第四卷：Wave Function Collapse生成算法】 - 知乎](https://zhuanlan.zhihu.com/p/364474077)\n\n# Interior Mapping\n\n\n这个技术实现了一种假室内效果。\n\n## 代码\n\n```c\nShader \"MyShader/InteriorMappingTest\"\n{\n\tstatic float3 up=float3(0,1,0); \n\tstatic float3 right=float3(1,0,0); \n\tstatic float3 forward=float3(0,0,1);\n\n\tfixed4 frag (v2f i) : SV_Target\n    {\n\t\t\n    }\n}\n\n\n\n```\n\n[UNITY SHADER GRAPH with Fake Interiors Shader - YouTube](https://www.youtube.com/watch?v=tXtu8Yzp7I0)\n\n# Billboard Cloud","lastmodified":"2024-06-05T09:48:57.367223771Z","tags":[]},"/adv/test_format":{"title":"Test format","content":"\n\u003e\n## Math\n\u003e [!INFO] INFO\n\u003e \n\u003e Test \n\u003e $$\\int_{a}^{b} x^2 dx$$\n\u003e Inline $a$\n\u003e \n\n\u003e [!NOTE] \n\u003e \n\u003e DG: Supported, But can't be in the same line, must start another line\n\u003e \n\u003e Obsidian: Supported.\n\u003e \n\u003e Hugo: Supported.\n\n---\n$$\n\\sum^N_{k=1} \\color{Lavender}{k^2}\n$$\n$$\n\\sum^N_{k=1} \\color{green}{k^2}\n$$\n---\n\u003e [!NOTE]\n\u003e \n\u003e  Hugo: the color not supported. `Lavender`, Ok with `green`\n\u003e  \n\u003e  Obsidian: Supported.\n\u003e \n\u003e  DG: Supported. [GitHub - oleeskild/digitalgarden](https://github.com/oleeskild/digitalgarden)\n\n---\n\n* Should display error or not rendered\n\n$$\n\\left\\{\\begin{aligned}\n3x + 5y +  z \\\\\\\\\n7x - 2y + 4z \\\\\\\\\n-6x + 3y + 2z\n\\end{aligned}\\right.\n$$\n$$\n\\left\\lbrace\\begin{aligned}\n3x + 5y +  z \\\\\\\\\n7x - 2y + 4z \\\\\\\\\n-6x + 3y + 2z\n\\end{aligned}\\right.\n$$\n\n\u003e [!WARNING]  \n\u003e \n\u003e Hugo: Not supported.  `\\left\\{`, Can use `\\left(` or `\\left\\lbrace`\n\n---\n\n$$\n  \\begin{array}{c|cccc}\n  \\text{min} \u0026 0 \u0026 1 \u0026 2 \u0026 3\\\\\n  \\hline\n  0 \u0026 0 \u0026 0 \u0026 0 \u0026 0\\\\\n  1 \u0026 0 \u0026 1 \u0026 1 \u0026 1\\\\\n  2 \u0026 0 \u0026 1 \u0026 2 \u0026 2\\\\\n  3 \u0026 0 \u0026 1 \u0026 2 \u0026 3\n  \\end{array}\n$$\n---\n\n$$\n% outer vertical array of arrays 外层垂直表格\n\\begin{array}{c}\n    % inner horizontal array of arrays 内层水平表格\n    \\begin{array}{cc}\n        % inner array of minimum values 内层\"最小值\"数组\n        \\begin{array}{c|cccc}\n        \\text{min} \u0026 0 \u0026 1 \u0026 2 \u0026 3\\\\\n        \\hline\n        0 \u0026 0 \u0026 0 \u0026 0 \u0026 0\\\\\n        1 \u0026 0 \u0026 1 \u0026 1 \u0026 1\\\\\n        2 \u0026 0 \u0026 1 \u0026 2 \u0026 2\\\\\n        3 \u0026 0 \u0026 1 \u0026 2 \u0026 3\n        \\end{array}\n    \u0026\n        % inner array of maximum values 内层\"最大值\"数组\n        \\begin{array}{c|cccc}\n        \\text{max}\u00260\u00261\u00262\u00263\\\\\n        \\hline\n        0 \u0026 0 \u0026 1 \u0026 2 \u0026 3\\\\\n        1 \u0026 1 \u0026 1 \u0026 2 \u0026 3\\\\\n        2 \u0026 2 \u0026 2 \u0026 2 \u0026 3\\\\\n        3 \u0026 3 \u0026 3 \u0026 3 \u0026 3\n        \\end{array}\n    \\end{array}\n    % 内层第一行表格组结束\n    \\\\\n    % inner array of delta values 内层第二行Delta值数组\n        \\begin{array}{c|cccc}\n        \\Delta\u00260\u00261\u00262\u00263\\\\\n        \\hline\n        0 \u0026 0 \u0026 1 \u0026 2 \u0026 3\\\\\n        1 \u0026 1 \u0026 0 \u0026 1 \u0026 2\\\\\n        2 \u0026 2 \u0026 1 \u0026 0 \u0026 1\\\\\n        3 \u0026 3 \u0026 2 \u0026 1 \u0026 0\n        \\end{array}\n        % 内层第二行表格组结束\n\\end{array}\n$$\n\n\n\n\u003e [!WARNING] Please use `\\\\` instead of `\\\\\\\\`\n\n## Code \n\n```python\nimport os\nprint(\"A message\")\n```\n\n\n## Other\n\n\u003e [!FAQ]- Closed by default\n\u003e \n\u003e Folding/Collapsable callout\n\n\n\u003e [!NOTE]+ Open by default\n\u003e \n\u003e Folding/Collapsable callout\n\u003e \n\u003e A new line is required between the label and the content to be used correctly in Hugo\n\n## MathJax / LaTex\n\n[MathJax basic tutorial and quick reference](https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference)\n\nInline $\\sqrt{\\mathstrut a} - \\sqrt{\\mathstrut b}$ formula\n\n* Should display error\n\n$$\nf\\left(\n   \\left[ \n     \\frac{\n       1+\\left\\{x,y\\right\\}\n     }{\n       \\left(\n          \\frac{x}{y}+\\frac{y}{x}\n       \\right)\n       \\left(u+1\\right)\n     }+a\n   \\right]^{3/2}\n\\right)\n$$\n\n$$\nf\\left(\n   \\left[ \n     \\frac{1+\\left\\lbrace x,y\\right\\rbrace }{\\left(\\frac{x}{y}+\\frac{y}{x}\\right)\n\\left(u+1\\right)}\n+a\n   \\right]^{3/2}\n\\right)\n$$\n\u003e [!WARNING] Please use `\\left\\(` or `\\left\\lbrace` instead of `\\left\\{`\n\n\n---\n\n$$0.414213562373095048\\approx6\\*16^{-1}+a\\*16^{-2}+0\\*16^{-3}+\\cdots$$\n\n* Should not displayed\n\n$$0.414213562373095048\\approx6*16^{-1}+a*16^{-2}+0*16^{-3}+\\cdots$$\n\n$$0.414213562373095048\\approx6\\ast16^{-1}+a\\ast16^{-2}+0\\ast16^{-3}+\\cdots$$\n\n\u003e [!WARNING] Please use `\\ast` instead of `\\*`, when there have many `***` in the formula, the formula will not render.\n\u003e \n\u003e Hugo:  Supported. \n\u003e \n\u003e DG: some error. `\\*`\n\u003e \n\u003e Obsidian: same as DG `\\*`\n\n---\n\n$$\n\\boldsymbol{x}_{i+1}+\\boldsymbol{x}\n$$\n\n---\n\n* Should not displayed\n\n$$\\boldsymbol{x}_{i+1}+\\boldsymbol{x}_{i+2}=\\boldsymbol{x}_{i+3}$$\n\n$$\\boldsymbol{x}\\_{i+1}+\\boldsymbol{x}\\_{i+2}=\\boldsymbol{x}\\_{i+3}$$\n\n---\n\u003e [!WARNING] You must replace `_` to `\\_`\n\u003e \n\u003e Hugo: The real reason is `_` , Otherwise this formula will not render.\n\n---\n\n## Misc\n\n\n\u003cvideo id=\"video\" controls=\"\" preload=\"none\" poster=\"视频图片地址\"\u003e \n\u003csource id=\"mp4\" src=\"https://server1.xyzzyxwz.top:12030/res/a.mp4\" type=\"video/mp4\"\u003e\n\u003c/video\u003e\n\n\u003caudio id=\"audio\" controls=\"\" preload=\"none\"\u003e \u003csource id=\"mp3\" src=\"https://server1.xyzzyxwz.top:12030/res/a.mp3\"\u003e\n\u003c/audio\u003e​\n---\n\n| Tables        | Are           | Cool  |\n| ------------- |:-------------:| -----:|\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      | centered      |   $12 |\n| zebra stripes | are neat      |    $1 |\n\n\n## Symblos\n\n$$\n\\begin{cases}\n\\sqsubseteq  \\\\\n{\\displaystyle \\color {Periwinkle}{\\text{Periwinkle}}} \\\\\n{\\color{Blue}x^2}+{\\color{Brown}2x} - {\\color{OliveGreen}1} \\\\\n{\\Vvdash \\nvdash \\nVdash \\nvDash \\nVDash} \\\\\n{\\or \\lor \\vee, \\curlyvee, \\bigvee} \\\\\n\\blacktriangle, \\blacktriangledown, \\blacktriangleleft,  \\blacktriangleright \\\\\n\\sim, \\nsim, \\backsim, \\thicksim, \\simeq, \\backsimeq, \\eqsim, \\cong, \\ncong \\\\\n\\cup, \\Cup, \\sqcup, \\bigcup, \\bigsqcup, \\uplus, \\biguplus \\\\\n\\infty, \\aleph, \\complement, \\backepsilon, \\eth, \\Finv, \\hbar \\\\\n\\Z \\\\\n\\yen \\\\\n\\Zeta \\\\\n\\zeta \\\\\n\\xcancel \\\\\n\\widehat \\\\\n\\varinjlim \\\\\n\\end{cases}\n$$\n\n\u003e[!WARNING] When space  ` `  shown in this formula, that will not render.\n\n---\n$$f(n) =\n\\begin{cases} \nn/2,  \u0026 \\text{if }n\\text{ is even} \\\\\\\\\n3n+1, \u0026 \\text{if }n\\text{ is odd}\n\\end{cases}$$\n\n---\n\n$$\n\\begin{array}{cc}\n\\mathrm{Bad} \u0026 \\mathrm{Better} \\\\\n\\hline \\\\\ne^{i\\frac{\\pi}2} \\quad e^{\\frac{i\\pi}2}\u0026 e^{i\\pi/2} \\\\\n\\int_{-\\frac\\pi2}^\\frac\\pi2 \\sin x\\,dx \u0026 \\int_{-\\pi/2}^{\\pi/2}\\sin x\\,dx \\\\\n\\end{array}\n$$\n---\n$$\\cancelto{\\cancelto{\\cancelto{x^{2+x}}{\\cancelto{x^2}{x}+4}}4}0$$\n\n$$\n\\begin{array}{|rc|}\n\\hline\n\\verb+\\color{black}{text}+ \u0026 \\color{black}{text} \\\\\n\\verb+\\color{gray}{text}+ \u0026 \\color{gray}{text} \\\\\n\\verb+\\color{silver}{text}+ \u0026 \\color{silver}{text} \\\\\n\\verb+\\color{white}{text}+ \u0026 \\color{white}{text} \\\\\n\\hline\n\\verb+\\color{maroon}{text}+ \u0026 \\color{maroon}{text} \\\\\n\\verb+\\color{red}{text}+ \u0026 \\color{red}{text} \\\\\n\\verb+\\color{yellow}{text}+ \u0026 \\color{yellow}{text} \\\\\n\\verb+\\color{lime}{text}+ \u0026 \\color{lime}{text} \\\\\n\\verb+\\color{olive}{text}+ \u0026 \\color{olive}{text} \\\\\n\\verb+\\color{green}{text}+ \u0026 \\color{green}{text} \\\\\n\\verb+\\color{teal}{text}+ \u0026 \\color{teal}{text} \\\\\n\\verb+\\color{aqua}{text}+ \u0026 \\color{aqua}{text} \\\\\n\\verb+\\color{blue}{text}+ \u0026 \\color{blue}{text} \\\\\n\\verb+\\color{navy}{text}+ \u0026 \\color{navy}{text} \\\\\n\\verb+\\color{purple}{text}+ \u0026 \\color{purple}{text} \\\\ \n\\verb+\\color{fuchsia}{text}+ \u0026 \\color{magenta}{text} \\\\\n\\hline\n\\end{array}\n$$\n\n---\n\n* Do not understand why a new page can be rendered, or delete the space and line feed can be rendered\n\n$$\n\\left\\langle  \nq \n\\middle\\|\n  \\frac{\\frac{x}{y}}{\\frac{u}{v}}\n\\middle| \np \n\\right\\rangle\n$$\n\n---\n\n\u003cdiv style=\"color: green\"\u003e\n$$\n\\left\\langle  \n  q\n\\middle\\|\n  \\frac{\\frac{x}{y}}{\\frac{u}{v}}\n\\middle| \n   p \n\\right\\rangle\n$$\n\u003c/div\u003e\n\n\u003e [!INFO]\n\u003e \n\u003e Hugo: Support on MathJax, And use `mathj:true`. But sometimes not displayed. Or use `\u003cdiv\u003e\u003c/div\u003e`\n\n\n\u003ch4\u003eAfter testing for half a day, I found that the default rendering is the best\u003c/h4\u003e","lastmodified":"2024-06-05T09:48:57.371223786Z","tags":["basis"]},"/adv/transpose":{"title":"Transpose","content":"\n**转置**\n\n假设我们有一个矩阵\n$$A=\\left ( \\begin{matrix} 5 \u0026 6 \\\\ 9 \u0026 4 \\end{matrix} \\right )$$\n它表示了从$2$维到$2$维空间的变换，对应任意的$m \\cdot n$矩阵，都表示一个从 n 维空间到 m 维空间的变换，例如我们有一个$1 \\cdot 2$矩阵$\\left ( \\begin{matrix} 1 \u0026 -2 \\end{matrix} \\right )$，它表示了一个从2维空间到1维空间的变换，如图中我们可以看到$(1,-2)$变换到了$-1$\u003cdiv align=center\u003e\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/mathematics/2维到1维的变换.3zimar96skc0.webp\" width=\"520\"\u003e\u003c/div\u003e可以想象成一部机器，喂入两个数，得到一个数，具体的操作过程与**投影**[[projection]]有关,就像一个小人在数轴上，先移动了$1$步，然后又移动了$-2$步，那么最终看来，这个小人只移动了$-1$步,即后退了一步\n\n而转置呢，操作上来说就是*行变为列，列变成行*，转了一下，例如\n$$\\left ( \\begin{matrix} 1 \u0026 -2 \\end{matrix} \\right )$$\n转过来就是\n$$\\left ( \\begin{matrix} 1 \\\\ -2 \\end{matrix} \\right )$$ \n(即我们应当结合维度变换的角度去理解转置)\n\n将这些操作转换成代数上就是\n$$\\left ( \\begin{matrix} 1 \u0026 -2 \\end{matrix} \\right ) \\cdot \\left ( \\begin{matrix} 1 \\\\ 1 \\end{matrix} \\right ) = 1\\cdot 1+ (-2\\cdot 1)=-1$$\n我们使用$\\cdot$这个小点来表示这种\"走了1步，又走了-2步\"这种计算，而这种计算呢，又恰巧就是我们待会要讲到的**点乘**[[dot_product]]\n\n* 补充：关于更加详细的**坐标变换**， 线性代数的本质 [【搬运】【线性代数】线性代数的本质\\_哔哩哔哩\\_bilibili](https://www.bilibili.com/video/BV18J411T7vS)\n","lastmodified":"2024-06-05T09:48:57.371223786Z","tags":[]},"/adv/triangular_area":{"title":"Triangular area","content":"\n三角形面积计算\n\n![image](https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.4l1flcfl04y0.webp)\n\n$$\nA=\\frac{bh}{2}\n$$\n\n三角形面积可以用底x高，然后除以2。因为两个一样的三角形可以拼成一个矩形或者平行四边形\n\n## **第一种**\n\n$$\nA=\\frac{1}{2} ab \\sin C\n$$\n\n$b \\sin C = h$ 还是二分之一底乘高\n\n## **第二种**\n\n$$\nA = \\frac{abc}{4R}\n$$\n借助正弦定理[[sine_law]]\n\n\n## **第三种**\n\n$$\nA=\\frac{a+b+c}{2} \\cdot r\n$$\n\n## **第四种** \n\n余弦定理的延申， 也就是海伦公式， 根据 余弦定理 [[cosine_law]] 我们有 \n\n\n$$\\cos^2 A=\\frac{a^4+b^4+c^4-2a^2b^2+2b^2c^2-2a^2c^2}{4b^2c^2} $$\n\n\u003e 计算验证: ([(-a^2+b^2+c^2)^2](https://zs.symbolab.com/solver/algebra-calculator/%5Cleft(-a%5E%7B2%7D%2Bb%5E%7B2%7D%2Bc%5E%7B2%7D%5Cright)%5E%7B2%7D?or=input))\n\n根据\n\n$$\\cos^2A+sin^2A=1$$\n\n$$ \\sin A=\\sqrt{1-\\cos^2a}=\\sqrt{\\frac{4b^2c^2}{4b^2c^2}-\\frac{a^4+b^4+c^4-2a^2b^2+2b^2c^2-2a^2c^2}{4b^2c^2}}$$\n\n$$ =\\sqrt{\\frac{4b^2c^2-(a^4+b^4+c^4-2a^2b^2+2b^2c^2-2a^2c^2)}{4b^2c^2}}$$\n\n$$ =\\frac{\\sqrt{-a^4-b^4-c^4+2b^2c^2+2c^2a^2+2a^2b^2}}{2bc}$$\n有三角形面积\n$$\\Delta=\\frac{1}{2}bc \\sin A$$\n\n代入$\\sin A$有\n\n$$\\Delta=\\frac{1}{4}\\sqrt{(a+b+c)(-a+b+c)(a-b+c)(a+b-c)}$$ \n(排列组合)\n\n\n\u003e [!INFO] 变体\n\u003e \n\n$$\n\\Delta = \\sqrt{p(p-a)(p-b)(p-c)}\n$$\n其中 \n$$\np=\\frac{a+b+c}{2}\n$$\n\n\n\n[^1]: [几何图形面积公式的发展简史，从“海伦公式”到“高斯公式” - 知乎](https://zhuanlan.zhihu.com/p/378369630)","lastmodified":"2024-06-05T09:48:57.371223786Z","tags":[]},"/adv/troubleshooting":{"title":"Troubleshooting and FAQ","content":"\n---\n\n","lastmodified":"2024-06-05T09:48:57.371223786Z","tags":[]},"/adv/two_ears_theorem":{"title":"Two ears theorem","content":"\nIn geometry, the two ears theorem states that **every simple polygon with more than three vertices has at least two ears, vertices that can be removed from the polygon without introducing any crossings**.\n\n在简单多边形中，任何顶点数大于3的至少有两个Ear。","lastmodified":"2024-06-05T09:48:57.371223786Z","tags":[]},"/adv/unity_live_capture":{"title":"Unity Live Capture","content":"## 提要\n\n在微博上看到樱花兔的视频，其中提到了Unity Face Capture，遂来捣鼓一番。\n\n在App Store中搜索 Unity Face Capture,注意要打完整才能搜索出来，安装之后打开是获取一堆权限，全部同意后就可以在UnityEditor-\u003ePackage Manager中安装Live Capture这个包。安装成功后在Window -\u003e Live Capture -\u003e Connections中开启服务了。\n\n注意此时需要关闭防火墙，当然也有其它的方法，这里为了测试简单就直接关闭了防火墙后才可以链接成功。\n\n同样，可以在App Store中搜索Unity Virtual Camera并安装。\n\n## 步骤\n\n### Face Capture\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.22m0l5c6gwtc.webp\" alt=\"image\" /\u003e\n\n这里有Samples可以导入。\n\n定位到Assets-\u003eSamples-\u003eLive Capture-\u003e3.0.0-\u003eARKit Face Sample，打开FaceCaptureSample。\n\n点击运行游戏。\n\n再打开手机上的App，连接成功后即可看到Unity中的效果。\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.5ftn8or4ekw0.webp\" alt=\"image\" /\u003e\n\n\u003cimg src=\"http://xyzzyxwz.top:8080/wp-content/uploads/2023/11/20231125_023235000_iOS.jpg\" alt=\"image\" width=\"150\" /\u003e\n\n这是一个微笑的效果，以及在Editor中的效果。\n\n[Unity Face Capture - Easy Tutorial (2022)](https://www.youtube.com/watch?v=UNW78Z8pvSU)\n\n[Unity【Live Capture】- 关于人脸捕捉的解决方案-腾讯云开发者社区-腾讯云](https://cloud.tencent.com/developer/article/2086337)\n\n### Virtual Camera\n\n1. 在场景中新建Virtual Camera Actor。并且更改Transform的位置等。\n2. 在场景中新建Take Recorder，在大纲中选择新建的TakeRecorder，在Inspector-\u003eTake Recorder-\u003eCapture Devices,点击小+号，新建一个VirtualCameraDevice，再选择New Virtual CameraDevice(默认新建后是这个名称)，在Inspector中将Camera设置为刚刚新建的Virtual Camera Actor\n3. 创建完上面两步后，就可以启动Game，并且同时打开手机App\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.5oyt6qqpp3o0.webp\" alt=\"image\" /\u003e\n\n\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/e/image.2xmlj65nwlo0.webp\" alt=\"image\" /\u003e\n\n[Live Captue Apps Startup Guide PDF](https://forum.unity.com/attachments/live-capture-apps-startup-guide-pdf.961348/)","lastmodified":"2024-06-05T09:48:57.371223786Z","tags":["unity"]},"/adv/viewport_transformation":{"title":"Viewport transformation","content":"\n**Screen Space**\n\n从NDC（三维）到我们的屏幕空间（二维），也就是真正要显示在屏幕上；首先NDC空间范围是$-1$到$1$，而屏幕空间表示像素范围对应的是$(0,0)$到$(w, h)$例如我们屏幕分辨率为$520\\times 520$那么就是$(520,520)$，也就是说我们需要从NDC的$(-1,-1)$到$(1,1)$映射到屏幕的$(0,0)$到$(520,520)$;假设有一点顶点为$(-0.5,-0.5,-0.5,1)$，是左下角的一个顶点 （也就是正交变换里我们计算并验证中的那个小盒子上的一个边界点）经过一个正交变换后是$(-1,1,-0.992,1)$，假设有一屏幕长为$520$，宽为$520$顶点$(-0.5,-0.5)$也就是NDC中的$(-1,-1)$会变换到屏幕空间中的$(0,0)$,同理如果是顶点$(0.5,0.5)$，NDC中的$(1,1)$会变成屏幕空间中的$(520, 520)$,我们假设另外一个顶点$(0.25,0.25)$,对应NDC中的$(0.5,0.5)$会变成屏幕空间中的$(390, 390)$\u003ccenter\u003e\u003cimg style=\"border-radius: 0.3125em; box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);\" src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/graphics/ScreenSpace.6m3i63w9eqc0.webp\"\u003e\u003cbr\u003e\u003cdiv style=\"color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;\"\u003eFigure 1\u003c/div\u003e\u003c/center\u003e\n\n根据这些我们可以得到我们的**视口变换矩阵**\n\n$$\\begin{aligned} \\left [ \\begin{matrix} \\frac{w}{2} \u0026 0 \u0026 0 \u0026 \\frac{w}{2} \\\\ 0 \u0026 \\frac{h}{2} \u0026 0 \u0026 \\frac{h}{2} \\\\ 0 \u0026 0 \u0026 \\frac{1}{2} \u0026 \\frac{1}{2} \\\\ 0\u00260\u00260\u00261 \\end{matrix}\\right ] \\end{aligned}$$ \n\n（矩阵中的$z$为$\\frac{1}{2}$是为保持$z$值不变） 来验证一下,假设我们的屏幕是$520\\times 520$的，则矩阵为\n\n$$\\begin{aligned} \\left [ \\begin{matrix} 260 \u0026 0 \u0026 0 \u0026 260 \\\\ 0 \u0026 260 \u0026 0 \u0026 260 \\\\ 0 \u0026 0 \u0026 0.5 \u0026 0.5 \\\\ 0\u00260\u00260\u00261 \\end{matrix}\\right ] \\end{aligned}$$ \n\n顶点$(0.25,0.25)$，NDC中为$(0.5，0.5)$则\n\n$$\\begin{aligned} \\left [ \\begin{matrix} 0.5\u00260.5\u00261\u00261 \\end{matrix} \\right ] \\end{aligned} \\begin{aligned} \\left [ \\begin{matrix} 260 \u0026 0 \u0026 0 \u0026 260 \\\\ 0 \u0026 260 \u0026 0 \u0026 260 \\\\ 0 \u0026 0 \u0026 0.5 \u0026 0.5 \\\\ 0\u00260\u00260\u00261 \\end{matrix}\\right ] \\end{aligned} \\begin{aligned}  \\left [ \\begin{matrix} 390\u0026390\u00261\u00261 \\end{matrix}\\right ] \\end{aligned}$$ \n\n顶点$(-0.5,-0.5)$，NDC中为$(-1，-1)$则\n\n$$\\begin{aligned} \\left [ \\begin{matrix} -1\u0026-1\u00261\u00261 \\end{matrix} \\right ] \\end{aligned} \\begin{aligned} \\left [ \\begin{matrix} 260 \u0026 0 \u0026 0 \u0026 260 \\\\ 0 \u0026 260 \u0026 0 \u0026 260 \\\\ 0 \u0026 0 \u0026 0.5 \u0026 0.5 \\\\ 0\u00260\u00260\u00261 \\end{matrix}\\right ] \\end{aligned} \\begin{aligned}  \\left [ \\begin{matrix} 0\u00260\u00261\u00261 \\end{matrix}\\right ] \\end{aligned}$$\n\n映射到屏幕坐标$(0,0)$像素点（也就是说最左下的那个小盒子的边界点正好映射到屏幕的左下角）\n\n如果长宽是不一样的\n\n\u003cdiv align=center\u003e\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/graphics/ScreenSpace.7cnosi0vi480.webp\"\u003e\u003c/div\u003e\n\n长宽不一样我们依然可以处理，只不过要多一个概念$aspect$,\n\n$$aspect=\\frac{width}{height}$$\n\n它是一个比例\n\n\u003cdiv align=center\u003e\u003cimg src=\"https://cdn.jsdelivr.net/gh/aaronmack/image-hosting@master/graphics/视口变换演示.19ypc5014qkg.webp\"\u003e\u003c/div\u003e \n\n左上图是比例为$1:1$的情况下，如果我们改变了窗口大小，例如改为了$640\\times 480$，也就是比例为$1:1.3333$,如果我们此时什么都不做，则我们会得到左下的结果（仔细想想，为什么，是因为我们的视口变换矩阵，像素是一一对应的，**即使窗口大小变了，但映射关系并没有变**）所以我们如果才能得到右上的结果呢？ 很简单，在进行正交变换或者透视变换的时候将$x$方向也就是水平方向按照$aspect$比例收缩一些\n","lastmodified":"2024-06-05T09:48:57.371223786Z","tags":[]}}