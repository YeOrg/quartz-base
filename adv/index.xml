<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Advs on</title><link>https://knowledge.xyzzyxwz.top/adv/</link><description>Recent content in Advs on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://knowledge.xyzzyxwz.top/adv/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://knowledge.xyzzyxwz.top/adv/bijection_injection_surjection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://knowledge.xyzzyxwz.top/adv/bijection_injection_surjection/</guid><description/></item><item><title/><link>https://knowledge.xyzzyxwz.top/adv/cg_pipeline/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://knowledge.xyzzyxwz.top/adv/cg_pipeline/</guid><description>OpenPype 题记 在捣鼓Pipeline时，从Github上发现了OpenPype这款DCC管道工具和CgWire开源的流程管理软件。 OpenPype就像是Publisher和Loader，交接棒一样进行流程中数据的管理，并且支持和CgWire的互动，满足一般工作室的需求。 目前Pype的官方提供了云支持，但代码是开源的你可以自己搭建数据库和Pype。
准备 系统 Windows+Docker Bash 其中在生成CA的部分，是使用的cgywin
数据库使用的mongodb，我们为了安全，使用ca证书进行authorization，测试的时候发现ca证书和数据库如果换了电脑，就需要重新生成。 生成CA证书和公私钥 (下方的命令)
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 Ref: https://github.</description></item><item><title/><link>https://knowledge.xyzzyxwz.top/adv/color_managment_workflow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://knowledge.xyzzyxwz.top/adv/color_managment_workflow/</guid><description>Color management workflow (CMW) - (sRGB ACES) Introduce Reference:
 https://chrisbrejon.com/cg-cinematography/chapter-1-color-management/#rendering-and-display-spaces
 https://chrisbrejon.com/cg-cinematography/chapter-1-5-academy-color-encoding-system-aces/
Eyes vs All light will travel in a straight line unless something gets in the way and does one of the following:  * Reflect it (like a mirror).</description></item><item><title/><link>https://knowledge.xyzzyxwz.top/adv/computational_geometry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://knowledge.xyzzyxwz.top/adv/computational_geometry/</guid><description>Polygon Triangulation
[[polygon_triangulation]]</description></item><item><title/><link>https://knowledge.xyzzyxwz.top/adv/computer_graphics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://knowledge.xyzzyxwz.top/adv/computer_graphics/</guid><description/></item><item><title/><link>https://knowledge.xyzzyxwz.top/adv/computer_science/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://knowledge.xyzzyxwz.top/adv/computer_science/</guid><description>[[computational_geometry]]
[[computer_graphics]]</description></item><item><title/><link>https://knowledge.xyzzyxwz.top/adv/coordinate_system/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://knowledge.xyzzyxwz.top/adv/coordinate_system/</guid><description>在几何学中[[mathematics_geometry]]，坐标系是一个使用一个或多个数或坐标来唯一确定流形（如欧几里得空间）上的点或其他几何元素的位置的系统。
[[barycentric_coordinates]]
[[equation_and_coordinate_axis]]
[[homogenous_coordinates]]</description></item><item><title/><link>https://knowledge.xyzzyxwz.top/adv/digital_garden/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://knowledge.xyzzyxwz.top/adv/digital_garden/</guid><description>题记 最早有一天是想改变自己的做笔记的方式，思考了半晚上，最后得到了个结论就是，笔记应当记成图，而不是树，遂第二天去查资料，看到这篇，顿时找到自己想要的~
玩转 Obsidian 04：为什么推荐使用 Obsidian 做知识管理 - 少数派
笔记可以这样做，之前我们一般是使用树的层级结构去记笔记，但我们知道知识与知识之间一般是有联系的，知识与知识之间应该是一张图，通过相互之间的联系进行关联。
软件上使用Obsidian，但我们还想发布到网上，可以使用社区插件Digital Garden进行设置和发布，再使用免费的vecel进行部署。
安装 在1中的文档写的非常详细，每一步，里面需要你知道一些关于Github的与Vecel的配置。
其它 https://github.com/oleeskild/Obsidian-Digital-Garden 社区插件的地址</description></item><item><title/><link>https://knowledge.xyzzyxwz.top/adv/ear_clipping_triangulation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://knowledge.xyzzyxwz.top/adv/ear_clipping_triangulation/</guid><description/></item><item><title/><link>https://knowledge.xyzzyxwz.top/adv/fan_triangulation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://knowledge.xyzzyxwz.top/adv/fan_triangulation/</guid><description>在计算几何中[[computational_geometry]]，扇形三角剖分是对多边形进行三角剖分的一种简单方法，即选择一个顶点并绘制通往多边形所有其他顶点的边。这种方法通常只用于凸多边形。</description></item><item><title/><link>https://knowledge.xyzzyxwz.top/adv/graphics_dynamical_simulation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://knowledge.xyzzyxwz.top/adv/graphics_dynamical_simulation/</guid><description>[[computer_graphics]]</description></item><item><title/><link>https://knowledge.xyzzyxwz.top/adv/graphics_geometry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://knowledge.xyzzyxwz.top/adv/graphics_geometry/</guid><description>[[computer_graphics]]</description></item><item><title/><link>https://knowledge.xyzzyxwz.top/adv/graphics_rendering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://knowledge.xyzzyxwz.top/adv/graphics_rendering/</guid><description>[[computer_graphics]]</description></item><item><title/><link>https://knowledge.xyzzyxwz.top/adv/mathematics_function/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://knowledge.xyzzyxwz.top/adv/mathematics_function/</guid><description>函数是把一个集 &amp;ldquo;A&amp;rdquo; 的元素与另一个集 &amp;ldquo;B&amp;rdquo; 的元素配对的方法</description></item><item><title/><link>https://knowledge.xyzzyxwz.top/adv/mathematics_geometry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://knowledge.xyzzyxwz.top/adv/mathematics_geometry/</guid><description>几何最初是为了建立物理世界的模型而发展起来的
3D Projection and Geometric Transformation 三维投影（或图形投影）是一种在二维（2D）表面上显示三维（3D）物体的设计技术。
在数学中,几何变换是指一个集合到它本身(或到另一个这样的集合)的任何双射 [[bijection_injection_surjection]]。
[[space_and_transformation]]
Two ears theorem [[two_ears_theorem]]</description></item><item><title/><link>https://knowledge.xyzzyxwz.top/adv/os_windows/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://knowledge.xyzzyxwz.top/adv/os_windows/</guid><description>这里打算长久更新这篇，去记录与OS-Windows相关的东西
1. Windows激活
发现一个非常方便的Windows激活工具，但可能需要科学上网才行~
https://github.com/massgravel/Microsoft-Activation-Scripts https://github.com/TGSAN/CMWTAT_Digital_Edition/releases/tag/2.6.4.0
2. Windows优化
这个工具下载下来后可以直接运行，里面有非常多的选项，比如开启关闭Windows更新，禁用一些缓存等等~
https://github.com/hellzerg/optimizer
3. 禁用Defender
忘记了是用哪一个去关闭的Windows的Defender，感觉其实只要不下载来路不明的app一般都不需要这个，或者除非黑客盯上你了，就是要攻击你~
https://github.com/ionuttbara/windows-defender-remover
https://github.com/swagkarna/Defeat-Defender-V1.2.0
4. 磁盘映射</description></item><item><title/><link>https://knowledge.xyzzyxwz.top/adv/picture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://knowledge.xyzzyxwz.top/adv/picture/</guid><description>[[computer_science]]</description></item><item><title/><link>https://knowledge.xyzzyxwz.top/adv/polygon_area/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://knowledge.xyzzyxwz.top/adv/polygon_area/</guid><description>Shoelace Theorem</description></item><item><title/><link>https://knowledge.xyzzyxwz.top/adv/polygon_triangulation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://knowledge.xyzzyxwz.top/adv/polygon_triangulation/</guid><description>Fan Triangulation [[fan_triangulation]]
Ear clipping [[ear_clipping_triangulation]]</description></item><item><title/><link>https://knowledge.xyzzyxwz.top/adv/sine_law/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://knowledge.xyzzyxwz.top/adv/sine_law/</guid><description>正弦定理</description></item><item><title/><link>https://knowledge.xyzzyxwz.top/adv/triangular_area/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://knowledge.xyzzyxwz.top/adv/triangular_area/</guid><description>三角形面积计算
$$ A=\frac{bh}{2} $$
三角形面积可以用底x高，然后除以2。因为两个一样的三角形可以拼成一个矩形或者平行四边形
第一种 $$ A=\frac{1}{2} ab \sin C $$
$b \sin C = h$ 还是二分之一底乘高
第二种 $$ A = \frac{abc}{4R} $$ 借助正弦定理[[sine_law]]</description></item><item><title/><link>https://knowledge.xyzzyxwz.top/adv/two_ears_theorem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://knowledge.xyzzyxwz.top/adv/two_ears_theorem/</guid><description>In geometry, the two ears theorem states that every simple polygon with more than three vertices has at least two ears, vertices that can be removed from the polygon without introducing any crossings.</description></item><item><title>About Me</title><link>https://knowledge.xyzzyxwz.top/adv/about_me/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://knowledge.xyzzyxwz.top/adv/about_me/</guid><description>原来你就是阿龙，让我找到你了。
咳咳，这我可就有的说了，他很喜欢动画电影，梦想可以制作出来心目中的作品。 在16年的时候，第一次真正接触三维软件后，就完全陷入了当中。后来自学了Houdini特效和编程，从此踏上了征途。
他在生活中，喜欢奇思妙想，但也不是瞎想哈哈，有时活泼，活泼的时候和小孩子没有什么区别；有时沉默，沉默的时候大多数在想事情，在想当前做的工作。
他的梦想是，驾驶飞机，在天空飞行。走遍山川草木。创作出他心中的作品。
平时他没有什么不开心的，要是不说话啦，其实不是不开心，而是被某个东西卡住了，让你感觉有一些郁闷。
想过的生活，喜欢去转一转，小到平时的走路散步，大到想去一些美丽的地方。有一辆车，有一个家 [房子+喜欢的人在一起]，做着喜欢的事情。 喜欢大自然和星空，喜欢吃面，最喜欢的是卷卷面(上次听妈妈说是甘肃那里的)，最喜欢的颜色淡紫色和淡蓝色，淡的颜色都挺喜欢的。
喜欢给自己出一点难题，不断挑战自我。
常记于心的是对知识的追求，对爱的渴望，对苦难的怜悯。对待人生应有应无所住，而生其心的态度，勇敢的去努力，坦然的去接受。
孟龙 - 23年10月</description></item><item><title>Barycentric coordinates</title><link>https://knowledge.xyzzyxwz.top/adv/barycentric_coordinates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://knowledge.xyzzyxwz.top/adv/barycentric_coordinates/</guid><description>重心坐标
插值Interpolation
给一段距离，再选取这段距离上的一个区间并记刻度$0-1$，然后使用插值我们可以计算出这段距离上的每一处的值，当在中间时，就是$0.5$; 或者说我们将$0$刻度处设为红色，$1$刻度处设为绿色，同样使用插值我们可以计算出这段距离上每一处的颜色，使用颜色混合，当在中间时，红色和绿色的强度是一样的，我们知道可以混合出黄色
重心坐标的引入
模型可以使用许多三角形来表示
刚才举例中的在一段距离上插值两个颜色应用到三角形上该如何表示呢？答案是使用重心坐标,重心坐标就是在一个三角形内使用三个数值 ($\alpha\ \beta\ \gamma$),用这三个数值来表示这个三角形内每一个点的位置，并且需要满足这三个数值相加起来等于$1$
用一种直观的感受，我们小时候应该玩过一种玩具，一个透明的塑料盖子里有一个迷宫，里面有一个小铁球，我们通过前后左右摆动来控制小铁球走出迷宫
将这个迷宫想象成三角形，当我们摇动时，这个小球就会前往这个三角形中不同的地方，是不是就是&amp;ldquo;重心&amp;rdquo;再往那个地方偏呢在，在数学中也是一样的道理。
现在我们向左下移动，那么这个小球就会&amp;quot;铛&amp;quot;的一声，停靠在左下方
那么就像所有的&amp;quot;重心&amp;quot;都落在了左下方这个$A$点上了，在数学上表示呢，就是$\alpha$的数值为$1$,$\beta$和$\gamma$的值为$0$
如何计算这个坐标
$P$点分别与三角形的三个顶点相连，我们可以得到三个小三角形，然后通过分别计算这个三个小三角形的面积与整个三角形的面积的比值</description></item><item><title>Complex transformation</title><link>https://knowledge.xyzzyxwz.top/adv/complex_transformation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://knowledge.xyzzyxwz.top/adv/complex_transformation/</guid><description>变换复合
变换是可以复合的，考虑一组数
$$\left ( \begin{matrix} -1 \ 1 \end{matrix} \right ) 和 \left ( \begin{matrix} 2 \ 2 \end{matrix} \right )$$</description></item><item><title>Coordinate basis vector and transformation</title><link>https://knowledge.xyzzyxwz.top/adv/coordinate_basis_vector_and_transformation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://knowledge.xyzzyxwz.top/adv/coordinate_basis_vector_and_transformation/</guid><description>坐标基矢
坐标基矢是我们人为定义的事物；一维情形下就是数轴上$0$到$1$之间那个距离，记为
$$(1,)$$
二维有两个坐标轴，分别为
$$(1,0)$$
叫做$i$帽，符号记为$\hat{i}$和
$$(0,1)$$
叫做$j$帽，符号记为 $\hat{j}$
刚才我们未引入坐标基矢，引入坐标基矢后，现在就有了一种统一的形式，上述例子的完整情况为
$$\left ( \begin{matrix} 1x+0y=2 \ 0x+1y=2 \end{matrix} \right.$$
矩阵形式</description></item><item><title>Cosine law</title><link>https://knowledge.xyzzyxwz.top/adv/cosine_law/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://knowledge.xyzzyxwz.top/adv/cosine_law/</guid><description>余弦定理是描述三角形中三边长度与一个角的余弦值关系的数学定理，是勾股定理在一般三角形情形下的推广，勾股定理是余弦定理的特例
$$\begin{array}{l}a^2=b^2+c^2-2bc\ cos A \ b^2=a^2+c^2-2ac\ cos B \ c^2=a^2+b^2-2ab\ cos C \ cos A = \frac{-a^2+b^2+c^2}{2bc} \ cos B = \frac{a^2-b^2+c^2}{2ac} \ cos C = \frac{a^2+b^2-c^2}{2ab} \ \end{array}$$</description></item><item><title>Cross product</title><link>https://knowledge.xyzzyxwz.top/adv/cross_product/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://knowledge.xyzzyxwz.top/adv/cross_product/</guid><description>叉乘只在三维中有定义，两个向量的叉乘可以产生一个与这两个向量都垂直的新向量。例如计算一个物体表面的法向量
叉乘定义
$${\displaystyle \mathbf {a} \times \mathbf {b}=\left|\mathbf {a} \right|\left|\mathbf {b} \right|\sin(\theta)\mathbf{n}}$$
其中$\theta$表示$\mathbf{a}$向量和$\mathbf{b}$向量之间的夹角，而 ${\displaystyle \mathbf {n} }$则是一个与${\displaystyle \mathbf {a} }$、${\displaystyle \mathbf {b} }$所构成的平面垂直的单位向量，方向由右手定则决定 ( https://zh.</description></item><item><title>Dot product</title><link>https://knowledge.xyzzyxwz.top/adv/dot_product/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://knowledge.xyzzyxwz.top/adv/dot_product/</guid><description>点乘我们通常用于衡量两个向量的方向差，或者衡量&amp;quot;做功&amp;quot;的大小，通常我们将它们单位化，然后再计算，这样取值范围就在$-1$到$1$之间，例如两个向量共向，那么值为$1$，反向则为$-1$，垂直为$0$
代数定义
两个向量${\displaystyle {\vec {a}}=[a_{1},a_{2},\cdots ,a_{n}]}$和${\displaystyle {\vec {b}}=[b_{1},b_{2},\cdots ,b_{n}]}$的点积定义为
$$\begin{aligned} \vec{a}\cdot \vec{b} = \sum_{i=1}^{n} a_ib_i \end{aligned}$$
其中$n$是维度，在2维情况下就是$a_1b_1+a_2b_2$,例如
$$\left ( \begin{matrix} 5_{(a_1)} &amp;amp; 6_{(b_1)} \ 9_{(a_2)} &amp;amp; 4_{(b_2)} \end{matrix} \right )$$</description></item><item><title>Dual vector</title><link>https://knowledge.xyzzyxwz.top/adv/dual_vector/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://knowledge.xyzzyxwz.top/adv/dual_vector/</guid><description>给定一个矢量,如果存在这样一个映射,它把给定的矢量映射为一个实数,就说这个映射是对偶矢量。例如一个$n$维行向量
$$(a_1,a_2\cdots a_n)$$
它既可以理解为行向量,也可理解为某种映射,该映射把给定的$n$维列向量
$$\left ( \begin{matrix} b_1 \ b_2 \ \cdots \ b_n \end{matrix}\right )$$
(矢量)映射为实数$k$,
$$k=a_1b_1+a_2b_2+\cdots+a_nb_n$$
即矩阵的乘积。则这个映射满足对偶矢量的定义,因此行向量$(a_1,a_2\cdots a_n)$是矢量$\left ( \begin{matrix} b_1 \ b_2 \ \cdots \ b_n \end{matrix}\right )$的对偶矢量。</description></item><item><title>Equation and coordinate axis</title><link>https://knowledge.xyzzyxwz.top/adv/equation_and_coordinate_axis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://knowledge.xyzzyxwz.top/adv/equation_and_coordinate_axis/</guid><description>方程中的等号是问题的核心，方程（英文：equation）是表示两个数学式（如两个数、函数、量、运算）之间相等关系的一种等式，而函数的定义是在非空数集之间的映射称为函数，要注意区分
我们先定义坐标轴这个家伙，首先定义一条直直的线，然后我们再在这条线上定义一些单位，也就是刻度(1,2,3&amp;hellip;)等，这些都是我们定义的，刻度$1$可以代表任何事物，例如一个苹果，移动了一米等等都可以，而这条直线呢，也是我们定义的，就像我们走路都是直直的前往某个地方，所以为了刻画这种东西，所以我们定义坐标轴也为直的，如果我们每个人都走路是沿曲折的曲线前进，那么我们的坐标轴估计也就是弯弯曲曲的了 (只是猜测)，好了，我们定义完了&amp;quot;坐标轴&amp;quot;，来看一个例子
首先让我们来思考个问题，先假设$(0,)$到$(1,)$之间表示$1$米，假设小红站在$(0,)$点不动，小明从$(0,)$出发走到了$(2,)$这个位置，走了$2$米，请问，小红需要走多少个$1$米就可以达到小明现在的位置，我们假设需要走$x$个$1$米就可以达到小明的位置，表现为方程就是$1x=2,x=2$,小红需要走$2$个$1$米这么长的距离才可以达到小明的位置，这就是方程，描述两个事物之间的相等关系，其中等号是核心，只不过在一维情况下，比较简单，到了二维时，就要稍微复杂那么一丢丢了
这里举一个简单的二维情况下，我们还是以小明和小红走路这个例子为例，前面是在数轴上，他们可以活动的范围太小了，只在一条线上，我们现在把它扩大到一个平面上，现在取两条数轴，还有刻度，然后再让这两条数轴垂直，像$(x,y)$那样，那么能不能斜着呢？可以，只不过这些都是与我们的生活相贴近的，就像展开的地球，如果我们生活的地方就像第二张被错切之后的那样,其中的任何事物都是错切的形状，那估计我们的坐标系也就是会是那样定义了，就像$(x&amp;rsquo;,y&amp;rsquo;)$那样 (只是猜测)
(二维坐标系，两条不相互垂直的坐标轴，就像我们所生活的世界，我们在一个巨大的平面上) 现在把这两个数轴放到一个平面中去，那么我们的维度就上升了一个层面，定义完之后，也就是说，我们不仅可以左右移动了，也可以上下移动了
假设我们在$(0,0)$点，想要前往到$(2,2)$点，我们能想象得到也比较直观的就是，沿着左右方向中的右那个方向走$2$个单位，然后再沿着上下方向中的上那个方向走$2$个单位，就到了$(2,2)$，你们可能想，这也太麻烦了，我直接从$(0,0)$到$(2,2)$之间连一条线，然后沿着那条线走不就行了嘛，是的，这就是极坐标系的由来，我们看待同一种问题的不同视角，这里我们先讨论直角坐标系
回到问题，$(0,0) \rightarrow (2,2)$, 分开来看，就是先往右移动$2m$到达$p1$，再往上移动$2m$到达$p2$，设往右移动$x$个$1m$才能到达$p1$处,然后往上移动$y$个$1m$才能到达$p2$处, 则我们有</description></item><item><title>Equation and determinant</title><link>https://knowledge.xyzzyxwz.top/adv/equation_and_determinant/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://knowledge.xyzzyxwz.top/adv/equation_and_determinant/</guid><description>方程与行列式
有一个方程，我们试着解一下
$$\begin{array}{l} \left ( \begin{matrix} 5x+6y=7 \quad (1) \ 9x+4y=3 \quad (2) \end{matrix} \right. \end{array}$$ 我们用消去法 $$\begin{array}{l} (2) \times \frac{5}{9} - (1) \ (1)\times \frac{4}{6} - (2) \end{array}$$ 最终可以得到 $$\begin{array}{l} y(5\times 4-6\times 9)=3\times 5-7\times 9 \ x(5\times 4-6\times 9)=7\times 4-6\times 3 \end{array}$$</description></item><item><title>Field of view</title><link>https://knowledge.xyzzyxwz.top/adv/field_of_view/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://knowledge.xyzzyxwz.top/adv/field_of_view/</guid><description>FOV (Field-Of-View) and aspect ratio
原理
透视矩阵中我们使用$top、bottom、left、right、near、far$来定义，但通常我们不这样做，而是使用$fov、aspect\ ratio、near、far$来定义，但他们本质上都是一样的，像人的眼睛也是有$fov$，叫做 视度这么一说的,顾名思义，视度越大，我们看到的事物也就越多，例如$fov90$就比$fov60$看到的多，它是视点中心到视锥左侧与视点中心到视锥右侧所张开的角度，当然这样只能计算出左右侧的，还需要一个$aspect\ ratio$(屏幕纵横比)来计算上下侧的。
计算
根据三角函数 $$\begin{array}{l} \tan( \dfrac{ FOV } {2}) = \dfrac{ opposite } { adjacent } = \dfrac {BC}{AB} = \dfrac{top}{near} \ top = \tan( \dfrac{ FOV } {2}) * near \ bottom = -top \end{array}$$ 如果我们的$aspect \quad ratio$(宽高比)为$1$的话，则 $$\begin{array}{l} right = top\ left = bottom = -top \end{array}$$ 但通常我们的屏幕的宽高比都不是$1:1$的，如</description></item><item><title>Homogenous coordinates</title><link>https://knowledge.xyzzyxwz.top/adv/homogenous_coordinates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://knowledge.xyzzyxwz.top/adv/homogenous_coordinates/</guid><description>齐次坐标
以二维为例，在平移变换中我们新增一个坐标分量叫$w$，让其先等于$1$
则平移的矩阵可以表示为 $$\left ( \begin{matrix} x&amp;rsquo; \ y&amp;rsquo; \ 1 \end{matrix} \right ) = \left ( \begin{matrix} 1&amp;amp;0&amp;amp;t_x \ 0&amp;amp;1&amp;amp;t_y \ 0&amp;amp;0&amp;amp;1 \end{matrix} \right ) \left ( \begin{matrix} x \ y \ 1 \end{matrix} \right ) = \left ( \begin{matrix} x+t_x\ y+t_y \ 1 \end{matrix} \right )$$ 再来看一下用齐次坐标是否可以表示之前的那些变换,均匀缩放 $$\left ( \begin{matrix} x&amp;rsquo; \ y&amp;rsquo; \ 1 \end{matrix} \right ) = \left ( \begin{matrix} s&amp;amp;0&amp;amp;0 \ 0&amp;amp;s&amp;amp;0 \ 0&amp;amp;0&amp;amp;1 \end{matrix} \right ) \left ( \begin{matrix} x \ y \ 1 \end{matrix} \right )$$ 以及旋转 $$\mathbf{R}_\theta = \left ( \begin{matrix} cos\theta &amp;amp; -sin\theta&amp;amp;0 \ sin\theta &amp;amp; cos\theta&amp;amp;0 \ 0&amp;amp;0&amp;amp;1 \end{matrix} \right )$$ 都是可以的</description></item><item><title>Linear and nonlinear depth</title><link>https://knowledge.xyzzyxwz.top/adv/linear_and_nonlinear_depth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://knowledge.xyzzyxwz.top/adv/linear_and_nonlinear_depth/</guid><description>深度
线性深度 $$F_{depth}=\frac{z-near}{far-near}$$
接近近平面的时值为$0$，远平面时为$1$，但我们通常不使用这个深度，因为我们的投影特性导致插值不是线性的(由于在投影平面上的相同步长随着三角形面与相机之间的距离增加而在三角形面上产生更大的步长-《Mathematics for 3D Game Programming and Computer Graphics-P107) (正交投影与透视投影的视锥不同，所以不存在透视投影中的近大远小效果，在这样的情况下，正交投影中的深度可以使用线性深度)
非线性深度
In detail see WorldGrid.fs.glsl $$\begin{aligned} F_{depth} = \frac{\frac{1}{z}-\frac{1}{near}}{\frac{1}{far}-\frac{1}{near}} \end{aligned}$$</description></item><item><title>Linear transforms and translation</title><link>https://knowledge.xyzzyxwz.top/adv/linear_transforms_and_translation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://knowledge.xyzzyxwz.top/adv/linear_transforms_and_translation/</guid><description>线性变换Linear Transforms
缩放Scale $$\left ( \begin{matrix} x&amp;rsquo;\ y&amp;rsquo; \end{matrix} \right ) = \left ( \begin{matrix} s&amp;amp;0\ 0&amp;amp;s \end{matrix} \right ) \left ( \begin{matrix} x\ y \end{matrix} \right )$$</description></item><item><title>Orthographic transformation</title><link>https://knowledge.xyzzyxwz.top/adv/orthographic_transformation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://knowledge.xyzzyxwz.top/adv/orthographic_transformation/</guid><description>正交变换Orthographic Transformation
什么是正交变换？ 图片 正交变换也是一个投影过程，这里则不像透视变换中那样是一个椎体了，而是一个方体，所以在正交变换中，近大远小这种情况则不存在，相反，你会看到所有的物体无论远近，在投影平面上都是有相仿的大小
步骤
创建一个能够包含的下场景内所有物体的一个BoundingBox, $(l:left, r:right, t:top, b:bottom, f:front, b:back)$,然后将其映射到$(-1,-1,-1)$到$(1,1,1)$范围内；$x$坐标映射到$(l, r) \Rightarrow (-1,1)$, $y$坐标映射到$(t,b) \Rightarrow (1,-1)$，然后将内容投射到投影平面上
资料</description></item><item><title>Perspective transformation</title><link>https://knowledge.xyzzyxwz.top/adv/perspective_transformation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://knowledge.xyzzyxwz.top/adv/perspective_transformation/</guid><description>透视变换Perspective Transformation
什么是透视变换？ 图片 透视变换是一个投影过程，其中透视变换就像将人的眼睛当做一个中心点，外部世界是一个大平面，在眼睛与这个平面之间形成一个椎体，然后将这个平面上的内容投射到眼睛内。
为什么变换之后的空间被称为裁切空间？裁切就是把不需要的部分去除掉，就是这幅图片中一样，投影平面在左侧
而在投影中心另一侧的右侧的点我们是不需要的，假设这个点的坐标为
$$(2,5,10)$$
应用计算之后是
$$x&amp;rsquo;=\frac{2}{-10}=-0.2$$ $$y&amp;rsquo;=\frac{5}{-10}=-0.5$$ $$z&amp;rsquo;=\frac{10}{-10}=-1$$
那么这个计算过程是如何进行的呢？根据相似三角形
Figure 1 (从P投射到P') 我们有
$$\frac{BA=\color{blue}{z_{blue}}=1}{EA=\color{green}{z_{green}}=3}=\frac{BC=y&amp;rsquo;}{EF=y}$$ $$y&amp;rsquo;=\frac{y*\color{blue}{z_{blue}}}{\color{green}{z_{green}}}$$</description></item><item><title>Projection</title><link>https://knowledge.xyzzyxwz.top/adv/projection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://knowledge.xyzzyxwz.top/adv/projection/</guid><description>几何中的投影
用光线照射物体，在某个平面（地面、墙壁等）上得到的影子叫做物体的投影（Projection），照射光线叫做投影线，投影所在的平面叫做投影面
有时光线是一组互相平行的射线，例如太阳光或探照灯光的一束光中的光线。由平行光线形成的投影是平行投影（Parallel projection).
由同一点（点光源发出的光线）形成的投影叫做中心投影（Center projection)。
向量中的投影 一个向量在另一个向量上的”影子“，是一种降维，感觉表示一种相关性</description></item><item><title>Showcase</title><link>https://knowledge.xyzzyxwz.top/adv/showcase/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://knowledge.xyzzyxwz.top/adv/showcase/</guid><description/></item><item><title>Space and transformation</title><link>https://knowledge.xyzzyxwz.top/adv/space_and_transformation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://knowledge.xyzzyxwz.top/adv/space_and_transformation/</guid><description>图形学渲染中的空间变换
什么是空间变换？当我们想渲染一个物品到屏幕中，例如一个小盒子，从小盒子的角度出发，也就是Local Space，它看所有的物品都是相对于它来说的，例如小盒子的正前方有一个小球，是相对于小盒子来说它的前方有一个小球，但是对于小球来说，那么就不一定了，可能是小球的后方或者前后左右上下都有可能，那么就会出现小盒子说，不行，大家要以我为参考，小球会说，凭什么以你为参考呢？以我为参考不好吗？争执不下，那这样下去不行，所以最后我们规定某个指定的地方插一个小旗子:triangular_flag_on_post:，就指定这个地方在三维下就是$(0,0,0)$为坐标原点，所有的物品不管是小盒子还是小球或者其它什么物品，都必须以这个原点为相对参考，那么这样就清晰明了了，小盒子相对于原点在$(1,0,0)$处，等等，小球相对于原点在$(0,1,0)$处，这就是World Space
当我们观察一个物品时，以我们自己为原点，朝前方规定为朝$-z$方向看去，所以假设有一个小盒子在我们的左手边时，也就是$-x$方向，我们需要朝左转动头部90°，如果在上方的话，也就是$+y$方向，我们就需要朝上转动头部90°，但每次都要转动头部，好麻烦对吧？那么有没有其它的方法呢？还是假设这个小盒子在我们的左手边，如果我们想要观察它，则需要向左转动头部90°对吧，那么我就在想能不能不转动头部而是把这个小盒子拿到我的前方，也就是把这个小盒子相对我来说往右转动90°到我的正前方，仔细想想可以吗？是可以的，排除其它所有的事物，就想象只有我们自己和这个小盒子，我们朝左转动去看这个小盒子和把这个小盒子朝右转动到我们面前再去看，最终的观察效果是一模一样的！所以我们给在世界空间中的所有物品再做一个变换，能够让我们观察到，就像类似这个小盒子朝右转动一样，类似这样的变换之后的空间我们称作View Space
到了这里，我们知道物品的位置了，还知道了观察的方向，但是似乎还缺少一些东西，那就是如何去观察，就像我们的eyes眼睛一样，你是激光眼，透视眼，还是千里眼，还是写轮眼，眼睛不一样，看到的画面就会有不一样的效果，而我们的眼睛看到的呢就是最普通的透视效果，叫做Perspective Transformation，例如两条平行的铁轨我们最终看到的画面是这种近大远小的，并且超出画面外的物品，也就是我们所看不到的都会被&amp;quot;裁切&amp;quot;掉，这种在指定了我们如何去观察的方式之后的我们称为Clip Space，当然还有另外一种常用的观察方式叫做Orthogonal Transformation
所以对于任何物体，应用Model Transformation到World Space，然后应用View Transformation到View Space，再应用Perspective Transformation或者Orthogonal Transformation到Clip Space，再除以w分量到NDC Space，最后再应用Viewport Transformation到Screen Space，Screen Space就是最终的显示屏幕, 以上统称为空间变换</description></item><item><title>Test format</title><link>https://knowledge.xyzzyxwz.top/adv/test_format/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://knowledge.xyzzyxwz.top/adv/test_format/</guid><description>Math [!INFO] INFO
Test $$\int_{a}^{b} x^2 dx$$ Inline $a$
[!NOTE]
DG: Supported, But can&amp;rsquo;t be in the same line, must start another line</description></item><item><title>Transpose</title><link>https://knowledge.xyzzyxwz.top/adv/transpose/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://knowledge.xyzzyxwz.top/adv/transpose/</guid><description>转置
假设我们有一个矩阵 $$A=\left ( \begin{matrix} 5 &amp;amp; 6 \ 9 &amp;amp; 4 \end{matrix} \right )$$ 它表示了从$2$维到$2$维空间的变换，对应任意的$m \cdot n$矩阵，都表示一个从 n 维空间到 m 维空间的变换，例如我们有一个$1 \cdot 2$矩阵$\left ( \begin{matrix} 1 &amp;amp; -2 \end{matrix} \right )$，它表示了一个从2维空间到1维空间的变换，如图中我们可以看到$(1,-2)$变换到了$-1$可以想象成一部机器，喂入两个数，得到一个数，具体的操作过程与投影[[projection]]有关,就像一个小人在数轴上，先移动了$1$步，然后又移动了$-2$步，那么最终看来，这个小人只移动了$-1$步,即后退了一步</description></item><item><title>Troubleshooting and FAQ</title><link>https://knowledge.xyzzyxwz.top/adv/troubleshooting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://knowledge.xyzzyxwz.top/adv/troubleshooting/</guid><description/></item><item><title>Viewport transformation</title><link>https://knowledge.xyzzyxwz.top/adv/viewport_transformation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://knowledge.xyzzyxwz.top/adv/viewport_transformation/</guid><description>Screen Space
从NDC（三维）到我们的屏幕空间（二维），也就是真正要显示在屏幕上；首先NDC空间范围是$-1$到$1$，而屏幕空间表示像素范围对应的是$(0,0)$到$(w, h)$例如我们屏幕分辨率为$520\times 520$那么就是$(520,520)$，也就是说我们需要从NDC的$(-1,-1)$到$(1,1)$映射到屏幕的$(0,0)$到$(520,520)$;假设有一点顶点为$(-0.5,-0.5,-0.5,1)$，是左下角的一个顶点 （也就是正交变换里我们计算并验证中的那个小盒子上的一个边界点）经过一个正交变换后是$(-1,1,-0.992,1)$，假设有一屏幕长为$520$，宽为$520$顶点$(-0.5,-0.5)$也就是NDC中的$(-1,-1)$会变换到屏幕空间中的$(0,0)$,同理如果是顶点$(0.5,0.5)$，NDC中的$(1,1)$会变成屏幕空间中的$(520, 520)$,我们假设另外一个顶点$(0.25,0.25)$,对应NDC中的$(0.5,0.5)$会变成屏幕空间中的$(390, 390)$Figure 1
根据这些我们可以得到我们的视口变换矩阵
$$\begin{aligned} \left [ \begin{matrix} \frac{w}{2} &amp;amp; 0 &amp;amp; 0 &amp;amp; \frac{w}{2} \ 0 &amp;amp; \frac{h}{2} &amp;amp; 0 &amp;amp; \frac{h}{2} \ 0 &amp;amp; 0 &amp;amp; \frac{1}{2} &amp;amp; \frac{1}{2} \ 0&amp;amp;0&amp;amp;0&amp;amp;1 \end{matrix}\right ] \end{aligned}$$</description></item></channel></rss>